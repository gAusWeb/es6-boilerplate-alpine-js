/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@alpinejs/collapse/dist/module.esm.js":
/*!************************************************************!*\
  !*** ./node_modules/@alpinejs/collapse/dist/module.esm.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ module_default)
/* harmony export */ });
// packages/collapse/src/index.js
function src_default(Alpine) {
  Alpine.directive("collapse", collapse);
  collapse.inline = (el, {modifiers}) => {
    if (!modifiers.includes("min"))
      return;
    el._x_doShow = () => {
    };
    el._x_doHide = () => {
    };
  };
  function collapse(el, {modifiers}) {
    let duration = modifierValue(modifiers, "duration", 250) / 1e3;
    let floor = modifierValue(modifiers, "min", 0);
    let fullyHide = !modifiers.includes("min");
    if (!el._x_isShown)
      el.style.height = `${floor}px`;
    if (!el._x_isShown && fullyHide)
      el.hidden = true;
    if (!el._x_isShown)
      el.style.overflow = "hidden";
    let setFunction = (el2, styles) => {
      let revertFunction = Alpine.setStyles(el2, styles);
      return styles.height ? () => {
      } : revertFunction;
    };
    let transitionStyles = {
      transitionProperty: "height",
      transitionDuration: `${duration}s`,
      transitionTimingFunction: "cubic-bezier(0.4, 0.0, 0.2, 1)"
    };
    el._x_transition = {
      in(before = () => {
      }, after = () => {
      }) {
        if (fullyHide)
          el.hidden = false;
        if (fullyHide)
          el.style.display = null;
        let current = el.getBoundingClientRect().height;
        el.style.height = "auto";
        let full = el.getBoundingClientRect().height;
        if (current === full) {
          current = floor;
        }
        Alpine.transition(el, Alpine.setStyles, {
          during: transitionStyles,
          start: {height: current + "px"},
          end: {height: full + "px"}
        }, () => el._x_isShown = true, () => {
          if (el.getBoundingClientRect().height == full) {
            el.style.overflow = null;
          }
        });
      },
      out(before = () => {
      }, after = () => {
      }) {
        let full = el.getBoundingClientRect().height;
        Alpine.transition(el, setFunction, {
          during: transitionStyles,
          start: {height: full + "px"},
          end: {height: floor + "px"}
        }, () => el.style.overflow = "hidden", () => {
          el._x_isShown = false;
          if (el.style.height == `${floor}px` && fullyHide) {
            el.style.display = "none";
            el.hidden = true;
          }
        });
      }
    };
  }
}
function modifierValue(modifiers, key, fallback) {
  if (modifiers.indexOf(key) === -1)
    return fallback;
  const rawValue = modifiers[modifiers.indexOf(key) + 1];
  if (!rawValue)
    return fallback;
  if (key === "duration") {
    let match = rawValue.match(/([0-9]+)ms/);
    if (match)
      return match[1];
  }
  if (key === "min") {
    let match = rawValue.match(/([0-9]+)px/);
    if (match)
      return match[1];
  }
  return rawValue;
}

// packages/collapse/builds/module.js
var module_default = src_default;



/***/ }),

/***/ "./node_modules/alpinejs/dist/module.esm.js":
/*!**************************************************!*\
  !*** ./node_modules/alpinejs/dist/module.esm.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ module_default)
/* harmony export */ });
// packages/alpinejs/src/scheduler.js
var flushPending = false;
var flushing = false;
var queue = [];
var lastFlushedIndex = -1;
function scheduler(callback) {
  queueJob(callback);
}
function queueJob(job) {
  if (!queue.includes(job))
    queue.push(job);
  queueFlush();
}
function dequeueJob(job) {
  let index = queue.indexOf(job);
  if (index !== -1 && index > lastFlushedIndex)
    queue.splice(index, 1);
}
function queueFlush() {
  if (!flushing && !flushPending) {
    flushPending = true;
    queueMicrotask(flushJobs);
  }
}
function flushJobs() {
  flushPending = false;
  flushing = true;
  for (let i = 0; i < queue.length; i++) {
    queue[i]();
    lastFlushedIndex = i;
  }
  queue.length = 0;
  lastFlushedIndex = -1;
  flushing = false;
}

// packages/alpinejs/src/reactivity.js
var reactive;
var effect;
var release;
var raw;
var shouldSchedule = true;
function disableEffectScheduling(callback) {
  shouldSchedule = false;
  callback();
  shouldSchedule = true;
}
function setReactivityEngine(engine) {
  reactive = engine.reactive;
  release = engine.release;
  effect = (callback) => engine.effect(callback, {scheduler: (task) => {
    if (shouldSchedule) {
      scheduler(task);
    } else {
      task();
    }
  }});
  raw = engine.raw;
}
function overrideEffect(override) {
  effect = override;
}
function elementBoundEffect(el) {
  let cleanup2 = () => {
  };
  let wrappedEffect = (callback) => {
    let effectReference = effect(callback);
    if (!el._x_effects) {
      el._x_effects = new Set();
      el._x_runEffects = () => {
        el._x_effects.forEach((i) => i());
      };
    }
    el._x_effects.add(effectReference);
    cleanup2 = () => {
      if (effectReference === void 0)
        return;
      el._x_effects.delete(effectReference);
      release(effectReference);
    };
    return effectReference;
  };
  return [wrappedEffect, () => {
    cleanup2();
  }];
}

// packages/alpinejs/src/mutation.js
var onAttributeAddeds = [];
var onElRemoveds = [];
var onElAddeds = [];
function onElAdded(callback) {
  onElAddeds.push(callback);
}
function onElRemoved(el, callback) {
  if (typeof callback === "function") {
    if (!el._x_cleanups)
      el._x_cleanups = [];
    el._x_cleanups.push(callback);
  } else {
    callback = el;
    onElRemoveds.push(callback);
  }
}
function onAttributesAdded(callback) {
  onAttributeAddeds.push(callback);
}
function onAttributeRemoved(el, name, callback) {
  if (!el._x_attributeCleanups)
    el._x_attributeCleanups = {};
  if (!el._x_attributeCleanups[name])
    el._x_attributeCleanups[name] = [];
  el._x_attributeCleanups[name].push(callback);
}
function cleanupAttributes(el, names) {
  if (!el._x_attributeCleanups)
    return;
  Object.entries(el._x_attributeCleanups).forEach(([name, value]) => {
    if (names === void 0 || names.includes(name)) {
      value.forEach((i) => i());
      delete el._x_attributeCleanups[name];
    }
  });
}
var observer = new MutationObserver(onMutate);
var currentlyObserving = false;
function startObservingMutations() {
  observer.observe(document, {subtree: true, childList: true, attributes: true, attributeOldValue: true});
  currentlyObserving = true;
}
function stopObservingMutations() {
  flushObserver();
  observer.disconnect();
  currentlyObserving = false;
}
var recordQueue = [];
var willProcessRecordQueue = false;
function flushObserver() {
  recordQueue = recordQueue.concat(observer.takeRecords());
  if (recordQueue.length && !willProcessRecordQueue) {
    willProcessRecordQueue = true;
    queueMicrotask(() => {
      processRecordQueue();
      willProcessRecordQueue = false;
    });
  }
}
function processRecordQueue() {
  onMutate(recordQueue);
  recordQueue.length = 0;
}
function mutateDom(callback) {
  if (!currentlyObserving)
    return callback();
  stopObservingMutations();
  let result = callback();
  startObservingMutations();
  return result;
}
var isCollecting = false;
var deferredMutations = [];
function deferMutations() {
  isCollecting = true;
}
function flushAndStopDeferringMutations() {
  isCollecting = false;
  onMutate(deferredMutations);
  deferredMutations = [];
}
function onMutate(mutations) {
  if (isCollecting) {
    deferredMutations = deferredMutations.concat(mutations);
    return;
  }
  let addedNodes = [];
  let removedNodes = [];
  let addedAttributes = new Map();
  let removedAttributes = new Map();
  for (let i = 0; i < mutations.length; i++) {
    if (mutations[i].target._x_ignoreMutationObserver)
      continue;
    if (mutations[i].type === "childList") {
      mutations[i].addedNodes.forEach((node) => node.nodeType === 1 && addedNodes.push(node));
      mutations[i].removedNodes.forEach((node) => node.nodeType === 1 && removedNodes.push(node));
    }
    if (mutations[i].type === "attributes") {
      let el = mutations[i].target;
      let name = mutations[i].attributeName;
      let oldValue = mutations[i].oldValue;
      let add2 = () => {
        if (!addedAttributes.has(el))
          addedAttributes.set(el, []);
        addedAttributes.get(el).push({name, value: el.getAttribute(name)});
      };
      let remove = () => {
        if (!removedAttributes.has(el))
          removedAttributes.set(el, []);
        removedAttributes.get(el).push(name);
      };
      if (el.hasAttribute(name) && oldValue === null) {
        add2();
      } else if (el.hasAttribute(name)) {
        remove();
        add2();
      } else {
        remove();
      }
    }
  }
  removedAttributes.forEach((attrs, el) => {
    cleanupAttributes(el, attrs);
  });
  addedAttributes.forEach((attrs, el) => {
    onAttributeAddeds.forEach((i) => i(el, attrs));
  });
  for (let node of removedNodes) {
    if (addedNodes.includes(node))
      continue;
    onElRemoveds.forEach((i) => i(node));
    if (node._x_cleanups) {
      while (node._x_cleanups.length)
        node._x_cleanups.pop()();
    }
  }
  addedNodes.forEach((node) => {
    node._x_ignoreSelf = true;
    node._x_ignore = true;
  });
  for (let node of addedNodes) {
    if (removedNodes.includes(node))
      continue;
    if (!node.isConnected)
      continue;
    delete node._x_ignoreSelf;
    delete node._x_ignore;
    onElAddeds.forEach((i) => i(node));
    node._x_ignore = true;
    node._x_ignoreSelf = true;
  }
  addedNodes.forEach((node) => {
    delete node._x_ignoreSelf;
    delete node._x_ignore;
  });
  addedNodes = null;
  removedNodes = null;
  addedAttributes = null;
  removedAttributes = null;
}

// packages/alpinejs/src/scope.js
function scope(node) {
  return mergeProxies(closestDataStack(node));
}
function addScopeToNode(node, data2, referenceNode) {
  node._x_dataStack = [data2, ...closestDataStack(referenceNode || node)];
  return () => {
    node._x_dataStack = node._x_dataStack.filter((i) => i !== data2);
  };
}
function closestDataStack(node) {
  if (node._x_dataStack)
    return node._x_dataStack;
  if (typeof ShadowRoot === "function" && node instanceof ShadowRoot) {
    return closestDataStack(node.host);
  }
  if (!node.parentNode) {
    return [];
  }
  return closestDataStack(node.parentNode);
}
function mergeProxies(objects) {
  let thisProxy = new Proxy({}, {
    ownKeys: () => {
      return Array.from(new Set(objects.flatMap((i) => Object.keys(i))));
    },
    has: (target, name) => {
      return objects.some((obj) => obj.hasOwnProperty(name));
    },
    get: (target, name) => {
      return (objects.find((obj) => {
        if (obj.hasOwnProperty(name)) {
          let descriptor = Object.getOwnPropertyDescriptor(obj, name);
          if (descriptor.get && descriptor.get._x_alreadyBound || descriptor.set && descriptor.set._x_alreadyBound) {
            return true;
          }
          if ((descriptor.get || descriptor.set) && descriptor.enumerable) {
            let getter = descriptor.get;
            let setter = descriptor.set;
            let property = descriptor;
            getter = getter && getter.bind(thisProxy);
            setter = setter && setter.bind(thisProxy);
            if (getter)
              getter._x_alreadyBound = true;
            if (setter)
              setter._x_alreadyBound = true;
            Object.defineProperty(obj, name, {
              ...property,
              get: getter,
              set: setter
            });
          }
          return true;
        }
        return false;
      }) || {})[name];
    },
    set: (target, name, value) => {
      let closestObjectWithKey = objects.find((obj) => obj.hasOwnProperty(name));
      if (closestObjectWithKey) {
        closestObjectWithKey[name] = value;
      } else {
        objects[objects.length - 1][name] = value;
      }
      return true;
    }
  });
  return thisProxy;
}

// packages/alpinejs/src/interceptor.js
function initInterceptors(data2) {
  let isObject2 = (val) => typeof val === "object" && !Array.isArray(val) && val !== null;
  let recurse = (obj, basePath = "") => {
    Object.entries(Object.getOwnPropertyDescriptors(obj)).forEach(([key, {value, enumerable}]) => {
      if (enumerable === false || value === void 0)
        return;
      let path = basePath === "" ? key : `${basePath}.${key}`;
      if (typeof value === "object" && value !== null && value._x_interceptor) {
        obj[key] = value.initialize(data2, path, key);
      } else {
        if (isObject2(value) && value !== obj && !(value instanceof Element)) {
          recurse(value, path);
        }
      }
    });
  };
  return recurse(data2);
}
function interceptor(callback, mutateObj = () => {
}) {
  let obj = {
    initialValue: void 0,
    _x_interceptor: true,
    initialize(data2, path, key) {
      return callback(this.initialValue, () => get(data2, path), (value) => set(data2, path, value), path, key);
    }
  };
  mutateObj(obj);
  return (initialValue) => {
    if (typeof initialValue === "object" && initialValue !== null && initialValue._x_interceptor) {
      let initialize = obj.initialize.bind(obj);
      obj.initialize = (data2, path, key) => {
        let innerValue = initialValue.initialize(data2, path, key);
        obj.initialValue = innerValue;
        return initialize(data2, path, key);
      };
    } else {
      obj.initialValue = initialValue;
    }
    return obj;
  };
}
function get(obj, path) {
  return path.split(".").reduce((carry, segment) => carry[segment], obj);
}
function set(obj, path, value) {
  if (typeof path === "string")
    path = path.split(".");
  if (path.length === 1)
    obj[path[0]] = value;
  else if (path.length === 0)
    throw error;
  else {
    if (obj[path[0]])
      return set(obj[path[0]], path.slice(1), value);
    else {
      obj[path[0]] = {};
      return set(obj[path[0]], path.slice(1), value);
    }
  }
}

// packages/alpinejs/src/magics.js
var magics = {};
function magic(name, callback) {
  magics[name] = callback;
}
function injectMagics(obj, el) {
  Object.entries(magics).forEach(([name, callback]) => {
    let memoizedUtilities = null;
    function getUtilities() {
      if (memoizedUtilities) {
        return memoizedUtilities;
      } else {
        let [utilities, cleanup2] = getElementBoundUtilities(el);
        memoizedUtilities = {interceptor, ...utilities};
        onElRemoved(el, cleanup2);
        return memoizedUtilities;
      }
    }
    Object.defineProperty(obj, `$${name}`, {
      get() {
        return callback(el, getUtilities());
      },
      enumerable: false
    });
  });
  return obj;
}

// packages/alpinejs/src/utils/error.js
function tryCatch(el, expression, callback, ...args) {
  try {
    return callback(...args);
  } catch (e) {
    handleError(e, el, expression);
  }
}
function handleError(error2, el, expression = void 0) {
  Object.assign(error2, {el, expression});
  console.warn(`Alpine Expression Error: ${error2.message}

${expression ? 'Expression: "' + expression + '"\n\n' : ""}`, el);
  setTimeout(() => {
    throw error2;
  }, 0);
}

// packages/alpinejs/src/evaluator.js
var shouldAutoEvaluateFunctions = true;
function dontAutoEvaluateFunctions(callback) {
  let cache = shouldAutoEvaluateFunctions;
  shouldAutoEvaluateFunctions = false;
  let result = callback();
  shouldAutoEvaluateFunctions = cache;
  return result;
}
function evaluate(el, expression, extras = {}) {
  let result;
  evaluateLater(el, expression)((value) => result = value, extras);
  return result;
}
function evaluateLater(...args) {
  return theEvaluatorFunction(...args);
}
var theEvaluatorFunction = normalEvaluator;
function setEvaluator(newEvaluator) {
  theEvaluatorFunction = newEvaluator;
}
function normalEvaluator(el, expression) {
  let overriddenMagics = {};
  injectMagics(overriddenMagics, el);
  let dataStack = [overriddenMagics, ...closestDataStack(el)];
  let evaluator = typeof expression === "function" ? generateEvaluatorFromFunction(dataStack, expression) : generateEvaluatorFromString(dataStack, expression, el);
  return tryCatch.bind(null, el, expression, evaluator);
}
function generateEvaluatorFromFunction(dataStack, func) {
  return (receiver = () => {
  }, {scope: scope2 = {}, params = []} = {}) => {
    let result = func.apply(mergeProxies([scope2, ...dataStack]), params);
    runIfTypeOfFunction(receiver, result);
  };
}
var evaluatorMemo = {};
function generateFunctionFromString(expression, el) {
  if (evaluatorMemo[expression]) {
    return evaluatorMemo[expression];
  }
  let AsyncFunction = Object.getPrototypeOf(async function() {
  }).constructor;
  let rightSideSafeExpression = /^[\n\s]*if.*\(.*\)/.test(expression) || /^(let|const)\s/.test(expression) ? `(async()=>{ ${expression} })()` : expression;
  const safeAsyncFunction = () => {
    try {
      return new AsyncFunction(["__self", "scope"], `with (scope) { __self.result = ${rightSideSafeExpression} }; __self.finished = true; return __self.result;`);
    } catch (error2) {
      handleError(error2, el, expression);
      return Promise.resolve();
    }
  };
  let func = safeAsyncFunction();
  evaluatorMemo[expression] = func;
  return func;
}
function generateEvaluatorFromString(dataStack, expression, el) {
  let func = generateFunctionFromString(expression, el);
  return (receiver = () => {
  }, {scope: scope2 = {}, params = []} = {}) => {
    func.result = void 0;
    func.finished = false;
    let completeScope = mergeProxies([scope2, ...dataStack]);
    if (typeof func === "function") {
      let promise = func(func, completeScope).catch((error2) => handleError(error2, el, expression));
      if (func.finished) {
        runIfTypeOfFunction(receiver, func.result, completeScope, params, el);
        func.result = void 0;
      } else {
        promise.then((result) => {
          runIfTypeOfFunction(receiver, result, completeScope, params, el);
        }).catch((error2) => handleError(error2, el, expression)).finally(() => func.result = void 0);
      }
    }
  };
}
function runIfTypeOfFunction(receiver, value, scope2, params, el) {
  if (shouldAutoEvaluateFunctions && typeof value === "function") {
    let result = value.apply(scope2, params);
    if (result instanceof Promise) {
      result.then((i) => runIfTypeOfFunction(receiver, i, scope2, params)).catch((error2) => handleError(error2, el, value));
    } else {
      receiver(result);
    }
  } else if (typeof value === "object" && value instanceof Promise) {
    value.then((i) => receiver(i));
  } else {
    receiver(value);
  }
}

// packages/alpinejs/src/directives.js
var prefixAsString = "x-";
function prefix(subject = "") {
  return prefixAsString + subject;
}
function setPrefix(newPrefix) {
  prefixAsString = newPrefix;
}
var directiveHandlers = {};
function directive(name, callback) {
  directiveHandlers[name] = callback;
  return {
    before(directive2) {
      if (!directiveHandlers[directive2]) {
        console.warn("Cannot find directive `${directive}`. `${name}` will use the default order of execution");
        return;
      }
      const pos = directiveOrder.indexOf(directive2);
      directiveOrder.splice(pos >= 0 ? pos : directiveOrder.indexOf("DEFAULT"), 0, name);
    }
  };
}
function directives(el, attributes, originalAttributeOverride) {
  attributes = Array.from(attributes);
  if (el._x_virtualDirectives) {
    let vAttributes = Object.entries(el._x_virtualDirectives).map(([name, value]) => ({name, value}));
    let staticAttributes = attributesOnly(vAttributes);
    vAttributes = vAttributes.map((attribute) => {
      if (staticAttributes.find((attr) => attr.name === attribute.name)) {
        return {
          name: `x-bind:${attribute.name}`,
          value: `"${attribute.value}"`
        };
      }
      return attribute;
    });
    attributes = attributes.concat(vAttributes);
  }
  let transformedAttributeMap = {};
  let directives2 = attributes.map(toTransformedAttributes((newName, oldName) => transformedAttributeMap[newName] = oldName)).filter(outNonAlpineAttributes).map(toParsedDirectives(transformedAttributeMap, originalAttributeOverride)).sort(byPriority);
  return directives2.map((directive2) => {
    return getDirectiveHandler(el, directive2);
  });
}
function attributesOnly(attributes) {
  return Array.from(attributes).map(toTransformedAttributes()).filter((attr) => !outNonAlpineAttributes(attr));
}
var isDeferringHandlers = false;
var directiveHandlerStacks = new Map();
var currentHandlerStackKey = Symbol();
function deferHandlingDirectives(callback) {
  isDeferringHandlers = true;
  let key = Symbol();
  currentHandlerStackKey = key;
  directiveHandlerStacks.set(key, []);
  let flushHandlers = () => {
    while (directiveHandlerStacks.get(key).length)
      directiveHandlerStacks.get(key).shift()();
    directiveHandlerStacks.delete(key);
  };
  let stopDeferring = () => {
    isDeferringHandlers = false;
    flushHandlers();
  };
  callback(flushHandlers);
  stopDeferring();
}
function getElementBoundUtilities(el) {
  let cleanups = [];
  let cleanup2 = (callback) => cleanups.push(callback);
  let [effect3, cleanupEffect] = elementBoundEffect(el);
  cleanups.push(cleanupEffect);
  let utilities = {
    Alpine: alpine_default,
    effect: effect3,
    cleanup: cleanup2,
    evaluateLater: evaluateLater.bind(evaluateLater, el),
    evaluate: evaluate.bind(evaluate, el)
  };
  let doCleanup = () => cleanups.forEach((i) => i());
  return [utilities, doCleanup];
}
function getDirectiveHandler(el, directive2) {
  let noop = () => {
  };
  let handler4 = directiveHandlers[directive2.type] || noop;
  let [utilities, cleanup2] = getElementBoundUtilities(el);
  onAttributeRemoved(el, directive2.original, cleanup2);
  let fullHandler = () => {
    if (el._x_ignore || el._x_ignoreSelf)
      return;
    handler4.inline && handler4.inline(el, directive2, utilities);
    handler4 = handler4.bind(handler4, el, directive2, utilities);
    isDeferringHandlers ? directiveHandlerStacks.get(currentHandlerStackKey).push(handler4) : handler4();
  };
  fullHandler.runCleanups = cleanup2;
  return fullHandler;
}
var startingWith = (subject, replacement) => ({name, value}) => {
  if (name.startsWith(subject))
    name = name.replace(subject, replacement);
  return {name, value};
};
var into = (i) => i;
function toTransformedAttributes(callback = () => {
}) {
  return ({name, value}) => {
    let {name: newName, value: newValue} = attributeTransformers.reduce((carry, transform) => {
      return transform(carry);
    }, {name, value});
    if (newName !== name)
      callback(newName, name);
    return {name: newName, value: newValue};
  };
}
var attributeTransformers = [];
function mapAttributes(callback) {
  attributeTransformers.push(callback);
}
function outNonAlpineAttributes({name}) {
  return alpineAttributeRegex().test(name);
}
var alpineAttributeRegex = () => new RegExp(`^${prefixAsString}([^:^.]+)\\b`);
function toParsedDirectives(transformedAttributeMap, originalAttributeOverride) {
  return ({name, value}) => {
    let typeMatch = name.match(alpineAttributeRegex());
    let valueMatch = name.match(/:([a-zA-Z0-9\-:]+)/);
    let modifiers = name.match(/\.[^.\]]+(?=[^\]]*$)/g) || [];
    let original = originalAttributeOverride || transformedAttributeMap[name] || name;
    return {
      type: typeMatch ? typeMatch[1] : null,
      value: valueMatch ? valueMatch[1] : null,
      modifiers: modifiers.map((i) => i.replace(".", "")),
      expression: value,
      original
    };
  };
}
var DEFAULT = "DEFAULT";
var directiveOrder = [
  "ignore",
  "ref",
  "data",
  "id",
  "bind",
  "init",
  "for",
  "model",
  "modelable",
  "transition",
  "show",
  "if",
  DEFAULT,
  "teleport"
];
function byPriority(a, b) {
  let typeA = directiveOrder.indexOf(a.type) === -1 ? DEFAULT : a.type;
  let typeB = directiveOrder.indexOf(b.type) === -1 ? DEFAULT : b.type;
  return directiveOrder.indexOf(typeA) - directiveOrder.indexOf(typeB);
}

// packages/alpinejs/src/utils/dispatch.js
function dispatch(el, name, detail = {}) {
  el.dispatchEvent(new CustomEvent(name, {
    detail,
    bubbles: true,
    composed: true,
    cancelable: true
  }));
}

// packages/alpinejs/src/utils/walk.js
function walk(el, callback) {
  if (typeof ShadowRoot === "function" && el instanceof ShadowRoot) {
    Array.from(el.children).forEach((el2) => walk(el2, callback));
    return;
  }
  let skip = false;
  callback(el, () => skip = true);
  if (skip)
    return;
  let node = el.firstElementChild;
  while (node) {
    walk(node, callback, false);
    node = node.nextElementSibling;
  }
}

// packages/alpinejs/src/utils/warn.js
function warn(message, ...args) {
  console.warn(`Alpine Warning: ${message}`, ...args);
}

// packages/alpinejs/src/lifecycle.js
var started = false;
function start() {
  if (started)
    warn("Alpine has already been initialized on this page. Calling Alpine.start() more than once can cause problems.");
  started = true;
  if (!document.body)
    warn("Unable to initialize. Trying to load Alpine before `<body>` is available. Did you forget to add `defer` in Alpine's `<script>` tag?");
  dispatch(document, "alpine:init");
  dispatch(document, "alpine:initializing");
  startObservingMutations();
  onElAdded((el) => initTree(el, walk));
  onElRemoved((el) => destroyTree(el));
  onAttributesAdded((el, attrs) => {
    directives(el, attrs).forEach((handle) => handle());
  });
  let outNestedComponents = (el) => !closestRoot(el.parentElement, true);
  Array.from(document.querySelectorAll(allSelectors())).filter(outNestedComponents).forEach((el) => {
    initTree(el);
  });
  dispatch(document, "alpine:initialized");
}
var rootSelectorCallbacks = [];
var initSelectorCallbacks = [];
function rootSelectors() {
  return rootSelectorCallbacks.map((fn) => fn());
}
function allSelectors() {
  return rootSelectorCallbacks.concat(initSelectorCallbacks).map((fn) => fn());
}
function addRootSelector(selectorCallback) {
  rootSelectorCallbacks.push(selectorCallback);
}
function addInitSelector(selectorCallback) {
  initSelectorCallbacks.push(selectorCallback);
}
function closestRoot(el, includeInitSelectors = false) {
  return findClosest(el, (element) => {
    const selectors = includeInitSelectors ? allSelectors() : rootSelectors();
    if (selectors.some((selector) => element.matches(selector)))
      return true;
  });
}
function findClosest(el, callback) {
  if (!el)
    return;
  if (callback(el))
    return el;
  if (el._x_teleportBack)
    el = el._x_teleportBack;
  if (!el.parentElement)
    return;
  return findClosest(el.parentElement, callback);
}
function isRoot(el) {
  return rootSelectors().some((selector) => el.matches(selector));
}
var initInterceptors2 = [];
function interceptInit(callback) {
  initInterceptors2.push(callback);
}
function initTree(el, walker = walk, intercept = () => {
}) {
  deferHandlingDirectives(() => {
    walker(el, (el2, skip) => {
      intercept(el2, skip);
      initInterceptors2.forEach((i) => i(el2, skip));
      directives(el2, el2.attributes).forEach((handle) => handle());
      el2._x_ignore && skip();
    });
  });
}
function destroyTree(root) {
  walk(root, (el) => cleanupAttributes(el));
}

// packages/alpinejs/src/nextTick.js
var tickStack = [];
var isHolding = false;
function nextTick(callback = () => {
}) {
  queueMicrotask(() => {
    isHolding || setTimeout(() => {
      releaseNextTicks();
    });
  });
  return new Promise((res) => {
    tickStack.push(() => {
      callback();
      res();
    });
  });
}
function releaseNextTicks() {
  isHolding = false;
  while (tickStack.length)
    tickStack.shift()();
}
function holdNextTicks() {
  isHolding = true;
}

// packages/alpinejs/src/utils/classes.js
function setClasses(el, value) {
  if (Array.isArray(value)) {
    return setClassesFromString(el, value.join(" "));
  } else if (typeof value === "object" && value !== null) {
    return setClassesFromObject(el, value);
  } else if (typeof value === "function") {
    return setClasses(el, value());
  }
  return setClassesFromString(el, value);
}
function setClassesFromString(el, classString) {
  let split = (classString2) => classString2.split(" ").filter(Boolean);
  let missingClasses = (classString2) => classString2.split(" ").filter((i) => !el.classList.contains(i)).filter(Boolean);
  let addClassesAndReturnUndo = (classes) => {
    el.classList.add(...classes);
    return () => {
      el.classList.remove(...classes);
    };
  };
  classString = classString === true ? classString = "" : classString || "";
  return addClassesAndReturnUndo(missingClasses(classString));
}
function setClassesFromObject(el, classObject) {
  let split = (classString) => classString.split(" ").filter(Boolean);
  let forAdd = Object.entries(classObject).flatMap(([classString, bool]) => bool ? split(classString) : false).filter(Boolean);
  let forRemove = Object.entries(classObject).flatMap(([classString, bool]) => !bool ? split(classString) : false).filter(Boolean);
  let added = [];
  let removed = [];
  forRemove.forEach((i) => {
    if (el.classList.contains(i)) {
      el.classList.remove(i);
      removed.push(i);
    }
  });
  forAdd.forEach((i) => {
    if (!el.classList.contains(i)) {
      el.classList.add(i);
      added.push(i);
    }
  });
  return () => {
    removed.forEach((i) => el.classList.add(i));
    added.forEach((i) => el.classList.remove(i));
  };
}

// packages/alpinejs/src/utils/styles.js
function setStyles(el, value) {
  if (typeof value === "object" && value !== null) {
    return setStylesFromObject(el, value);
  }
  return setStylesFromString(el, value);
}
function setStylesFromObject(el, value) {
  let previousStyles = {};
  Object.entries(value).forEach(([key, value2]) => {
    previousStyles[key] = el.style[key];
    if (!key.startsWith("--")) {
      key = kebabCase(key);
    }
    el.style.setProperty(key, value2);
  });
  setTimeout(() => {
    if (el.style.length === 0) {
      el.removeAttribute("style");
    }
  });
  return () => {
    setStyles(el, previousStyles);
  };
}
function setStylesFromString(el, value) {
  let cache = el.getAttribute("style", value);
  el.setAttribute("style", value);
  return () => {
    el.setAttribute("style", cache || "");
  };
}
function kebabCase(subject) {
  return subject.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
}

// packages/alpinejs/src/utils/once.js
function once(callback, fallback = () => {
}) {
  let called = false;
  return function() {
    if (!called) {
      called = true;
      callback.apply(this, arguments);
    } else {
      fallback.apply(this, arguments);
    }
  };
}

// packages/alpinejs/src/directives/x-transition.js
directive("transition", (el, {value, modifiers, expression}, {evaluate: evaluate2}) => {
  if (typeof expression === "function")
    expression = evaluate2(expression);
  if (expression === false)
    return;
  if (!expression || typeof expression === "boolean") {
    registerTransitionsFromHelper(el, modifiers, value);
  } else {
    registerTransitionsFromClassString(el, expression, value);
  }
});
function registerTransitionsFromClassString(el, classString, stage) {
  registerTransitionObject(el, setClasses, "");
  let directiveStorageMap = {
    enter: (classes) => {
      el._x_transition.enter.during = classes;
    },
    "enter-start": (classes) => {
      el._x_transition.enter.start = classes;
    },
    "enter-end": (classes) => {
      el._x_transition.enter.end = classes;
    },
    leave: (classes) => {
      el._x_transition.leave.during = classes;
    },
    "leave-start": (classes) => {
      el._x_transition.leave.start = classes;
    },
    "leave-end": (classes) => {
      el._x_transition.leave.end = classes;
    }
  };
  directiveStorageMap[stage](classString);
}
function registerTransitionsFromHelper(el, modifiers, stage) {
  registerTransitionObject(el, setStyles);
  let doesntSpecify = !modifiers.includes("in") && !modifiers.includes("out") && !stage;
  let transitioningIn = doesntSpecify || modifiers.includes("in") || ["enter"].includes(stage);
  let transitioningOut = doesntSpecify || modifiers.includes("out") || ["leave"].includes(stage);
  if (modifiers.includes("in") && !doesntSpecify) {
    modifiers = modifiers.filter((i, index) => index < modifiers.indexOf("out"));
  }
  if (modifiers.includes("out") && !doesntSpecify) {
    modifiers = modifiers.filter((i, index) => index > modifiers.indexOf("out"));
  }
  let wantsAll = !modifiers.includes("opacity") && !modifiers.includes("scale");
  let wantsOpacity = wantsAll || modifiers.includes("opacity");
  let wantsScale = wantsAll || modifiers.includes("scale");
  let opacityValue = wantsOpacity ? 0 : 1;
  let scaleValue = wantsScale ? modifierValue(modifiers, "scale", 95) / 100 : 1;
  let delay = modifierValue(modifiers, "delay", 0) / 1e3;
  let origin = modifierValue(modifiers, "origin", "center");
  let property = "opacity, transform";
  let durationIn = modifierValue(modifiers, "duration", 150) / 1e3;
  let durationOut = modifierValue(modifiers, "duration", 75) / 1e3;
  let easing = `cubic-bezier(0.4, 0.0, 0.2, 1)`;
  if (transitioningIn) {
    el._x_transition.enter.during = {
      transformOrigin: origin,
      transitionDelay: `${delay}s`,
      transitionProperty: property,
      transitionDuration: `${durationIn}s`,
      transitionTimingFunction: easing
    };
    el._x_transition.enter.start = {
      opacity: opacityValue,
      transform: `scale(${scaleValue})`
    };
    el._x_transition.enter.end = {
      opacity: 1,
      transform: `scale(1)`
    };
  }
  if (transitioningOut) {
    el._x_transition.leave.during = {
      transformOrigin: origin,
      transitionDelay: `${delay}s`,
      transitionProperty: property,
      transitionDuration: `${durationOut}s`,
      transitionTimingFunction: easing
    };
    el._x_transition.leave.start = {
      opacity: 1,
      transform: `scale(1)`
    };
    el._x_transition.leave.end = {
      opacity: opacityValue,
      transform: `scale(${scaleValue})`
    };
  }
}
function registerTransitionObject(el, setFunction, defaultValue = {}) {
  if (!el._x_transition)
    el._x_transition = {
      enter: {during: defaultValue, start: defaultValue, end: defaultValue},
      leave: {during: defaultValue, start: defaultValue, end: defaultValue},
      in(before = () => {
      }, after = () => {
      }) {
        transition(el, setFunction, {
          during: this.enter.during,
          start: this.enter.start,
          end: this.enter.end
        }, before, after);
      },
      out(before = () => {
      }, after = () => {
      }) {
        transition(el, setFunction, {
          during: this.leave.during,
          start: this.leave.start,
          end: this.leave.end
        }, before, after);
      }
    };
}
window.Element.prototype._x_toggleAndCascadeWithTransitions = function(el, value, show, hide) {
  const nextTick2 = document.visibilityState === "visible" ? requestAnimationFrame : setTimeout;
  let clickAwayCompatibleShow = () => nextTick2(show);
  if (value) {
    if (el._x_transition && (el._x_transition.enter || el._x_transition.leave)) {
      el._x_transition.enter && (Object.entries(el._x_transition.enter.during).length || Object.entries(el._x_transition.enter.start).length || Object.entries(el._x_transition.enter.end).length) ? el._x_transition.in(show) : clickAwayCompatibleShow();
    } else {
      el._x_transition ? el._x_transition.in(show) : clickAwayCompatibleShow();
    }
    return;
  }
  el._x_hidePromise = el._x_transition ? new Promise((resolve, reject) => {
    el._x_transition.out(() => {
    }, () => resolve(hide));
    el._x_transitioning.beforeCancel(() => reject({isFromCancelledTransition: true}));
  }) : Promise.resolve(hide);
  queueMicrotask(() => {
    let closest = closestHide(el);
    if (closest) {
      if (!closest._x_hideChildren)
        closest._x_hideChildren = [];
      closest._x_hideChildren.push(el);
    } else {
      nextTick2(() => {
        let hideAfterChildren = (el2) => {
          let carry = Promise.all([
            el2._x_hidePromise,
            ...(el2._x_hideChildren || []).map(hideAfterChildren)
          ]).then(([i]) => i());
          delete el2._x_hidePromise;
          delete el2._x_hideChildren;
          return carry;
        };
        hideAfterChildren(el).catch((e) => {
          if (!e.isFromCancelledTransition)
            throw e;
        });
      });
    }
  });
};
function closestHide(el) {
  let parent = el.parentNode;
  if (!parent)
    return;
  return parent._x_hidePromise ? parent : closestHide(parent);
}
function transition(el, setFunction, {during, start: start2, end} = {}, before = () => {
}, after = () => {
}) {
  if (el._x_transitioning)
    el._x_transitioning.cancel();
  if (Object.keys(during).length === 0 && Object.keys(start2).length === 0 && Object.keys(end).length === 0) {
    before();
    after();
    return;
  }
  let undoStart, undoDuring, undoEnd;
  performTransition(el, {
    start() {
      undoStart = setFunction(el, start2);
    },
    during() {
      undoDuring = setFunction(el, during);
    },
    before,
    end() {
      undoStart();
      undoEnd = setFunction(el, end);
    },
    after,
    cleanup() {
      undoDuring();
      undoEnd();
    }
  });
}
function performTransition(el, stages) {
  let interrupted, reachedBefore, reachedEnd;
  let finish = once(() => {
    mutateDom(() => {
      interrupted = true;
      if (!reachedBefore)
        stages.before();
      if (!reachedEnd) {
        stages.end();
        releaseNextTicks();
      }
      stages.after();
      if (el.isConnected)
        stages.cleanup();
      delete el._x_transitioning;
    });
  });
  el._x_transitioning = {
    beforeCancels: [],
    beforeCancel(callback) {
      this.beforeCancels.push(callback);
    },
    cancel: once(function() {
      while (this.beforeCancels.length) {
        this.beforeCancels.shift()();
      }
      ;
      finish();
    }),
    finish
  };
  mutateDom(() => {
    stages.start();
    stages.during();
  });
  holdNextTicks();
  requestAnimationFrame(() => {
    if (interrupted)
      return;
    let duration = Number(getComputedStyle(el).transitionDuration.replace(/,.*/, "").replace("s", "")) * 1e3;
    let delay = Number(getComputedStyle(el).transitionDelay.replace(/,.*/, "").replace("s", "")) * 1e3;
    if (duration === 0)
      duration = Number(getComputedStyle(el).animationDuration.replace("s", "")) * 1e3;
    mutateDom(() => {
      stages.before();
    });
    reachedBefore = true;
    requestAnimationFrame(() => {
      if (interrupted)
        return;
      mutateDom(() => {
        stages.end();
      });
      releaseNextTicks();
      setTimeout(el._x_transitioning.finish, duration + delay);
      reachedEnd = true;
    });
  });
}
function modifierValue(modifiers, key, fallback) {
  if (modifiers.indexOf(key) === -1)
    return fallback;
  const rawValue = modifiers[modifiers.indexOf(key) + 1];
  if (!rawValue)
    return fallback;
  if (key === "scale") {
    if (isNaN(rawValue))
      return fallback;
  }
  if (key === "duration" || key === "delay") {
    let match = rawValue.match(/([0-9]+)ms/);
    if (match)
      return match[1];
  }
  if (key === "origin") {
    if (["top", "right", "left", "center", "bottom"].includes(modifiers[modifiers.indexOf(key) + 2])) {
      return [rawValue, modifiers[modifiers.indexOf(key) + 2]].join(" ");
    }
  }
  return rawValue;
}

// packages/alpinejs/src/clone.js
var isCloning = false;
function skipDuringClone(callback, fallback = () => {
}) {
  return (...args) => isCloning ? fallback(...args) : callback(...args);
}
function onlyDuringClone(callback) {
  return (...args) => isCloning && callback(...args);
}
function clone(oldEl, newEl) {
  if (!newEl._x_dataStack)
    newEl._x_dataStack = oldEl._x_dataStack;
  isCloning = true;
  dontRegisterReactiveSideEffects(() => {
    cloneTree(newEl);
  });
  isCloning = false;
}
function cloneTree(el) {
  let hasRunThroughFirstEl = false;
  let shallowWalker = (el2, callback) => {
    walk(el2, (el3, skip) => {
      if (hasRunThroughFirstEl && isRoot(el3))
        return skip();
      hasRunThroughFirstEl = true;
      callback(el3, skip);
    });
  };
  initTree(el, shallowWalker);
}
function dontRegisterReactiveSideEffects(callback) {
  let cache = effect;
  overrideEffect((callback2, el) => {
    let storedEffect = cache(callback2);
    release(storedEffect);
    return () => {
    };
  });
  callback();
  overrideEffect(cache);
}

// packages/alpinejs/src/utils/bind.js
function bind(el, name, value, modifiers = []) {
  if (!el._x_bindings)
    el._x_bindings = reactive({});
  el._x_bindings[name] = value;
  name = modifiers.includes("camel") ? camelCase(name) : name;
  switch (name) {
    case "value":
      bindInputValue(el, value);
      break;
    case "style":
      bindStyles(el, value);
      break;
    case "class":
      bindClasses(el, value);
      break;
    case "selected":
    case "checked":
      bindAttributeAndProperty(el, name, value);
      break;
    default:
      bindAttribute(el, name, value);
      break;
  }
}
function bindInputValue(el, value) {
  if (el.type === "radio") {
    if (el.attributes.value === void 0) {
      el.value = value;
    }
    if (window.fromModel) {
      el.checked = checkedAttrLooseCompare(el.value, value);
    }
  } else if (el.type === "checkbox") {
    if (Number.isInteger(value)) {
      el.value = value;
    } else if (!Number.isInteger(value) && !Array.isArray(value) && typeof value !== "boolean" && ![null, void 0].includes(value)) {
      el.value = String(value);
    } else {
      if (Array.isArray(value)) {
        el.checked = value.some((val) => checkedAttrLooseCompare(val, el.value));
      } else {
        el.checked = !!value;
      }
    }
  } else if (el.tagName === "SELECT") {
    updateSelect(el, value);
  } else {
    if (el.value === value)
      return;
    el.value = value;
  }
}
function bindClasses(el, value) {
  if (el._x_undoAddedClasses)
    el._x_undoAddedClasses();
  el._x_undoAddedClasses = setClasses(el, value);
}
function bindStyles(el, value) {
  if (el._x_undoAddedStyles)
    el._x_undoAddedStyles();
  el._x_undoAddedStyles = setStyles(el, value);
}
function bindAttributeAndProperty(el, name, value) {
  bindAttribute(el, name, value);
  setPropertyIfChanged(el, name, value);
}
function bindAttribute(el, name, value) {
  if ([null, void 0, false].includes(value) && attributeShouldntBePreservedIfFalsy(name)) {
    el.removeAttribute(name);
  } else {
    if (isBooleanAttr(name))
      value = name;
    setIfChanged(el, name, value);
  }
}
function setIfChanged(el, attrName, value) {
  if (el.getAttribute(attrName) != value) {
    el.setAttribute(attrName, value);
  }
}
function setPropertyIfChanged(el, propName, value) {
  if (el[propName] !== value) {
    el[propName] = value;
  }
}
function updateSelect(el, value) {
  const arrayWrappedValue = [].concat(value).map((value2) => {
    return value2 + "";
  });
  Array.from(el.options).forEach((option) => {
    option.selected = arrayWrappedValue.includes(option.value);
  });
}
function camelCase(subject) {
  return subject.toLowerCase().replace(/-(\w)/g, (match, char) => char.toUpperCase());
}
function checkedAttrLooseCompare(valueA, valueB) {
  return valueA == valueB;
}
function isBooleanAttr(attrName) {
  const booleanAttributes = [
    "disabled",
    "checked",
    "required",
    "readonly",
    "hidden",
    "open",
    "selected",
    "autofocus",
    "itemscope",
    "multiple",
    "novalidate",
    "allowfullscreen",
    "allowpaymentrequest",
    "formnovalidate",
    "autoplay",
    "controls",
    "loop",
    "muted",
    "playsinline",
    "default",
    "ismap",
    "reversed",
    "async",
    "defer",
    "nomodule"
  ];
  return booleanAttributes.includes(attrName);
}
function attributeShouldntBePreservedIfFalsy(name) {
  return !["aria-pressed", "aria-checked", "aria-expanded", "aria-selected"].includes(name);
}
function getBinding(el, name, fallback) {
  if (el._x_bindings && el._x_bindings[name] !== void 0)
    return el._x_bindings[name];
  return getAttributeBinding(el, name, fallback);
}
function extractProp(el, name, fallback, extract = true) {
  if (el._x_bindings && el._x_bindings[name] !== void 0)
    return el._x_bindings[name];
  if (el._x_inlineBindings && el._x_inlineBindings[name] !== void 0) {
    let binding = el._x_inlineBindings[name];
    binding.extract = extract;
    return dontAutoEvaluateFunctions(() => {
      return evaluate(el, binding.expression);
    });
  }
  return getAttributeBinding(el, name, fallback);
}
function getAttributeBinding(el, name, fallback) {
  let attr = el.getAttribute(name);
  if (attr === null)
    return typeof fallback === "function" ? fallback() : fallback;
  if (attr === "")
    return true;
  if (isBooleanAttr(name)) {
    return !![name, "true"].includes(attr);
  }
  return attr;
}

// packages/alpinejs/src/utils/debounce.js
function debounce(func, wait) {
  var timeout;
  return function() {
    var context = this, args = arguments;
    var later = function() {
      timeout = null;
      func.apply(context, args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

// packages/alpinejs/src/utils/throttle.js
function throttle(func, limit) {
  let inThrottle;
  return function() {
    let context = this, args = arguments;
    if (!inThrottle) {
      func.apply(context, args);
      inThrottle = true;
      setTimeout(() => inThrottle = false, limit);
    }
  };
}

// packages/alpinejs/src/plugin.js
function plugin(callback) {
  let callbacks = Array.isArray(callback) ? callback : [callback];
  callbacks.forEach((i) => i(alpine_default));
}

// packages/alpinejs/src/store.js
var stores = {};
var isReactive = false;
function store(name, value) {
  if (!isReactive) {
    stores = reactive(stores);
    isReactive = true;
  }
  if (value === void 0) {
    return stores[name];
  }
  stores[name] = value;
  if (typeof value === "object" && value !== null && value.hasOwnProperty("init") && typeof value.init === "function") {
    stores[name].init();
  }
  initInterceptors(stores[name]);
}
function getStores() {
  return stores;
}

// packages/alpinejs/src/binds.js
var binds = {};
function bind2(name, bindings) {
  let getBindings = typeof bindings !== "function" ? () => bindings : bindings;
  if (name instanceof Element) {
    applyBindingsObject(name, getBindings());
  } else {
    binds[name] = getBindings;
  }
}
function injectBindingProviders(obj) {
  Object.entries(binds).forEach(([name, callback]) => {
    Object.defineProperty(obj, name, {
      get() {
        return (...args) => {
          return callback(...args);
        };
      }
    });
  });
  return obj;
}
function applyBindingsObject(el, obj, original) {
  let cleanupRunners = [];
  while (cleanupRunners.length)
    cleanupRunners.pop()();
  let attributes = Object.entries(obj).map(([name, value]) => ({name, value}));
  let staticAttributes = attributesOnly(attributes);
  attributes = attributes.map((attribute) => {
    if (staticAttributes.find((attr) => attr.name === attribute.name)) {
      return {
        name: `x-bind:${attribute.name}`,
        value: `"${attribute.value}"`
      };
    }
    return attribute;
  });
  directives(el, attributes, original).map((handle) => {
    cleanupRunners.push(handle.runCleanups);
    handle();
  });
}

// packages/alpinejs/src/datas.js
var datas = {};
function data(name, callback) {
  datas[name] = callback;
}
function injectDataProviders(obj, context) {
  Object.entries(datas).forEach(([name, callback]) => {
    Object.defineProperty(obj, name, {
      get() {
        return (...args) => {
          return callback.bind(context)(...args);
        };
      },
      enumerable: false
    });
  });
  return obj;
}

// packages/alpinejs/src/alpine.js
var Alpine = {
  get reactive() {
    return reactive;
  },
  get release() {
    return release;
  },
  get effect() {
    return effect;
  },
  get raw() {
    return raw;
  },
  version: "3.12.3",
  flushAndStopDeferringMutations,
  dontAutoEvaluateFunctions,
  disableEffectScheduling,
  startObservingMutations,
  stopObservingMutations,
  setReactivityEngine,
  closestDataStack,
  skipDuringClone,
  onlyDuringClone,
  addRootSelector,
  addInitSelector,
  addScopeToNode,
  deferMutations,
  mapAttributes,
  evaluateLater,
  interceptInit,
  setEvaluator,
  mergeProxies,
  extractProp,
  findClosest,
  closestRoot,
  destroyTree,
  interceptor,
  transition,
  setStyles,
  mutateDom,
  directive,
  throttle,
  debounce,
  evaluate,
  initTree,
  nextTick,
  prefixed: prefix,
  prefix: setPrefix,
  plugin,
  magic,
  store,
  start,
  clone,
  bound: getBinding,
  $data: scope,
  walk,
  data,
  bind: bind2
};
var alpine_default = Alpine;

// node_modules/@vue/shared/dist/shared.esm-bundler.js
function makeMap(str, expectsLowerCase) {
  const map = Object.create(null);
  const list = str.split(",");
  for (let i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase ? (val) => !!map[val.toLowerCase()] : (val) => !!map[val];
}
var PatchFlagNames = {
  [1]: `TEXT`,
  [2]: `CLASS`,
  [4]: `STYLE`,
  [8]: `PROPS`,
  [16]: `FULL_PROPS`,
  [32]: `HYDRATE_EVENTS`,
  [64]: `STABLE_FRAGMENT`,
  [128]: `KEYED_FRAGMENT`,
  [256]: `UNKEYED_FRAGMENT`,
  [512]: `NEED_PATCH`,
  [1024]: `DYNAMIC_SLOTS`,
  [2048]: `DEV_ROOT_FRAGMENT`,
  [-1]: `HOISTED`,
  [-2]: `BAIL`
};
var slotFlagsText = {
  [1]: "STABLE",
  [2]: "DYNAMIC",
  [3]: "FORWARDED"
};
var specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
var isBooleanAttr2 = /* @__PURE__ */ makeMap(specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`);
var EMPTY_OBJ =  true ? Object.freeze({}) : 0;
var EMPTY_ARR =  true ? Object.freeze([]) : 0;
var extend = Object.assign;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var hasOwn = (val, key) => hasOwnProperty.call(val, key);
var isArray = Array.isArray;
var isMap = (val) => toTypeString(val) === "[object Map]";
var isString = (val) => typeof val === "string";
var isSymbol = (val) => typeof val === "symbol";
var isObject = (val) => val !== null && typeof val === "object";
var objectToString = Object.prototype.toString;
var toTypeString = (value) => objectToString.call(value);
var toRawType = (value) => {
  return toTypeString(value).slice(8, -1);
};
var isIntegerKey = (key) => isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
var cacheStringFunction = (fn) => {
  const cache = Object.create(null);
  return (str) => {
    const hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
};
var camelizeRE = /-(\w)/g;
var camelize = cacheStringFunction((str) => {
  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : "");
});
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, "-$1").toLowerCase());
var capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));
var toHandlerKey = cacheStringFunction((str) => str ? `on${capitalize(str)}` : ``);
var hasChanged = (value, oldValue) => value !== oldValue && (value === value || oldValue === oldValue);

// node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js
var targetMap = new WeakMap();
var effectStack = [];
var activeEffect;
var ITERATE_KEY = Symbol( true ? "iterate" : 0);
var MAP_KEY_ITERATE_KEY = Symbol( true ? "Map key iterate" : 0);
function isEffect(fn) {
  return fn && fn._isEffect === true;
}
function effect2(fn, options = EMPTY_OBJ) {
  if (isEffect(fn)) {
    fn = fn.raw;
  }
  const effect3 = createReactiveEffect(fn, options);
  if (!options.lazy) {
    effect3();
  }
  return effect3;
}
function stop(effect3) {
  if (effect3.active) {
    cleanup(effect3);
    if (effect3.options.onStop) {
      effect3.options.onStop();
    }
    effect3.active = false;
  }
}
var uid = 0;
function createReactiveEffect(fn, options) {
  const effect3 = function reactiveEffect() {
    if (!effect3.active) {
      return fn();
    }
    if (!effectStack.includes(effect3)) {
      cleanup(effect3);
      try {
        enableTracking();
        effectStack.push(effect3);
        activeEffect = effect3;
        return fn();
      } finally {
        effectStack.pop();
        resetTracking();
        activeEffect = effectStack[effectStack.length - 1];
      }
    }
  };
  effect3.id = uid++;
  effect3.allowRecurse = !!options.allowRecurse;
  effect3._isEffect = true;
  effect3.active = true;
  effect3.raw = fn;
  effect3.deps = [];
  effect3.options = options;
  return effect3;
}
function cleanup(effect3) {
  const {deps} = effect3;
  if (deps.length) {
    for (let i = 0; i < deps.length; i++) {
      deps[i].delete(effect3);
    }
    deps.length = 0;
  }
}
var shouldTrack = true;
var trackStack = [];
function pauseTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = false;
}
function enableTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = true;
}
function resetTracking() {
  const last = trackStack.pop();
  shouldTrack = last === void 0 ? true : last;
}
function track(target, type, key) {
  if (!shouldTrack || activeEffect === void 0) {
    return;
  }
  let depsMap = targetMap.get(target);
  if (!depsMap) {
    targetMap.set(target, depsMap = new Map());
  }
  let dep = depsMap.get(key);
  if (!dep) {
    depsMap.set(key, dep = new Set());
  }
  if (!dep.has(activeEffect)) {
    dep.add(activeEffect);
    activeEffect.deps.push(dep);
    if (activeEffect.options.onTrack) {
      activeEffect.options.onTrack({
        effect: activeEffect,
        target,
        type,
        key
      });
    }
  }
}
function trigger(target, type, key, newValue, oldValue, oldTarget) {
  const depsMap = targetMap.get(target);
  if (!depsMap) {
    return;
  }
  const effects = new Set();
  const add2 = (effectsToAdd) => {
    if (effectsToAdd) {
      effectsToAdd.forEach((effect3) => {
        if (effect3 !== activeEffect || effect3.allowRecurse) {
          effects.add(effect3);
        }
      });
    }
  };
  if (type === "clear") {
    depsMap.forEach(add2);
  } else if (key === "length" && isArray(target)) {
    depsMap.forEach((dep, key2) => {
      if (key2 === "length" || key2 >= newValue) {
        add2(dep);
      }
    });
  } else {
    if (key !== void 0) {
      add2(depsMap.get(key));
    }
    switch (type) {
      case "add":
        if (!isArray(target)) {
          add2(depsMap.get(ITERATE_KEY));
          if (isMap(target)) {
            add2(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        } else if (isIntegerKey(key)) {
          add2(depsMap.get("length"));
        }
        break;
      case "delete":
        if (!isArray(target)) {
          add2(depsMap.get(ITERATE_KEY));
          if (isMap(target)) {
            add2(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        }
        break;
      case "set":
        if (isMap(target)) {
          add2(depsMap.get(ITERATE_KEY));
        }
        break;
    }
  }
  const run = (effect3) => {
    if (effect3.options.onTrigger) {
      effect3.options.onTrigger({
        effect: effect3,
        target,
        key,
        type,
        newValue,
        oldValue,
        oldTarget
      });
    }
    if (effect3.options.scheduler) {
      effect3.options.scheduler(effect3);
    } else {
      effect3();
    }
  };
  effects.forEach(run);
}
var isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);
var builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol).map((key) => Symbol[key]).filter(isSymbol));
var get2 = /* @__PURE__ */ createGetter();
var shallowGet = /* @__PURE__ */ createGetter(false, true);
var readonlyGet = /* @__PURE__ */ createGetter(true);
var shallowReadonlyGet = /* @__PURE__ */ createGetter(true, true);
var arrayInstrumentations = {};
["includes", "indexOf", "lastIndexOf"].forEach((key) => {
  const method = Array.prototype[key];
  arrayInstrumentations[key] = function(...args) {
    const arr = toRaw(this);
    for (let i = 0, l = this.length; i < l; i++) {
      track(arr, "get", i + "");
    }
    const res = method.apply(arr, args);
    if (res === -1 || res === false) {
      return method.apply(arr, args.map(toRaw));
    } else {
      return res;
    }
  };
});
["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
  const method = Array.prototype[key];
  arrayInstrumentations[key] = function(...args) {
    pauseTracking();
    const res = method.apply(this, args);
    resetTracking();
    return res;
  };
});
function createGetter(isReadonly = false, shallow = false) {
  return function get3(target, key, receiver) {
    if (key === "__v_isReactive") {
      return !isReadonly;
    } else if (key === "__v_isReadonly") {
      return isReadonly;
    } else if (key === "__v_raw" && receiver === (isReadonly ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) {
      return target;
    }
    const targetIsArray = isArray(target);
    if (!isReadonly && targetIsArray && hasOwn(arrayInstrumentations, key)) {
      return Reflect.get(arrayInstrumentations, key, receiver);
    }
    const res = Reflect.get(target, key, receiver);
    if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
      return res;
    }
    if (!isReadonly) {
      track(target, "get", key);
    }
    if (shallow) {
      return res;
    }
    if (isRef(res)) {
      const shouldUnwrap = !targetIsArray || !isIntegerKey(key);
      return shouldUnwrap ? res.value : res;
    }
    if (isObject(res)) {
      return isReadonly ? readonly(res) : reactive2(res);
    }
    return res;
  };
}
var set2 = /* @__PURE__ */ createSetter();
var shallowSet = /* @__PURE__ */ createSetter(true);
function createSetter(shallow = false) {
  return function set3(target, key, value, receiver) {
    let oldValue = target[key];
    if (!shallow) {
      value = toRaw(value);
      oldValue = toRaw(oldValue);
      if (!isArray(target) && isRef(oldValue) && !isRef(value)) {
        oldValue.value = value;
        return true;
      }
    }
    const hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);
    const result = Reflect.set(target, key, value, receiver);
    if (target === toRaw(receiver)) {
      if (!hadKey) {
        trigger(target, "add", key, value);
      } else if (hasChanged(value, oldValue)) {
        trigger(target, "set", key, value, oldValue);
      }
    }
    return result;
  };
}
function deleteProperty(target, key) {
  const hadKey = hasOwn(target, key);
  const oldValue = target[key];
  const result = Reflect.deleteProperty(target, key);
  if (result && hadKey) {
    trigger(target, "delete", key, void 0, oldValue);
  }
  return result;
}
function has(target, key) {
  const result = Reflect.has(target, key);
  if (!isSymbol(key) || !builtInSymbols.has(key)) {
    track(target, "has", key);
  }
  return result;
}
function ownKeys(target) {
  track(target, "iterate", isArray(target) ? "length" : ITERATE_KEY);
  return Reflect.ownKeys(target);
}
var mutableHandlers = {
  get: get2,
  set: set2,
  deleteProperty,
  has,
  ownKeys
};
var readonlyHandlers = {
  get: readonlyGet,
  set(target, key) {
    if (true) {
      console.warn(`Set operation on key "${String(key)}" failed: target is readonly.`, target);
    }
    return true;
  },
  deleteProperty(target, key) {
    if (true) {
      console.warn(`Delete operation on key "${String(key)}" failed: target is readonly.`, target);
    }
    return true;
  }
};
var shallowReactiveHandlers = extend({}, mutableHandlers, {
  get: shallowGet,
  set: shallowSet
});
var shallowReadonlyHandlers = extend({}, readonlyHandlers, {
  get: shallowReadonlyGet
});
var toReactive = (value) => isObject(value) ? reactive2(value) : value;
var toReadonly = (value) => isObject(value) ? readonly(value) : value;
var toShallow = (value) => value;
var getProto = (v) => Reflect.getPrototypeOf(v);
function get$1(target, key, isReadonly = false, isShallow = false) {
  target = target["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (key !== rawKey) {
    !isReadonly && track(rawTarget, "get", key);
  }
  !isReadonly && track(rawTarget, "get", rawKey);
  const {has: has2} = getProto(rawTarget);
  const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
  if (has2.call(rawTarget, key)) {
    return wrap(target.get(key));
  } else if (has2.call(rawTarget, rawKey)) {
    return wrap(target.get(rawKey));
  } else if (target !== rawTarget) {
    target.get(key);
  }
}
function has$1(key, isReadonly = false) {
  const target = this["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (key !== rawKey) {
    !isReadonly && track(rawTarget, "has", key);
  }
  !isReadonly && track(rawTarget, "has", rawKey);
  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
}
function size(target, isReadonly = false) {
  target = target["__v_raw"];
  !isReadonly && track(toRaw(target), "iterate", ITERATE_KEY);
  return Reflect.get(target, "size", target);
}
function add(value) {
  value = toRaw(value);
  const target = toRaw(this);
  const proto = getProto(target);
  const hadKey = proto.has.call(target, value);
  if (!hadKey) {
    target.add(value);
    trigger(target, "add", value, value);
  }
  return this;
}
function set$1(key, value) {
  value = toRaw(value);
  const target = toRaw(this);
  const {has: has2, get: get3} = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  } else if (true) {
    checkIdentityKeys(target, has2, key);
  }
  const oldValue = get3.call(target, key);
  target.set(key, value);
  if (!hadKey) {
    trigger(target, "add", key, value);
  } else if (hasChanged(value, oldValue)) {
    trigger(target, "set", key, value, oldValue);
  }
  return this;
}
function deleteEntry(key) {
  const target = toRaw(this);
  const {has: has2, get: get3} = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  } else if (true) {
    checkIdentityKeys(target, has2, key);
  }
  const oldValue = get3 ? get3.call(target, key) : void 0;
  const result = target.delete(key);
  if (hadKey) {
    trigger(target, "delete", key, void 0, oldValue);
  }
  return result;
}
function clear() {
  const target = toRaw(this);
  const hadItems = target.size !== 0;
  const oldTarget =  true ? isMap(target) ? new Map(target) : new Set(target) : 0;
  const result = target.clear();
  if (hadItems) {
    trigger(target, "clear", void 0, void 0, oldTarget);
  }
  return result;
}
function createForEach(isReadonly, isShallow) {
  return function forEach(callback, thisArg) {
    const observed = this;
    const target = observed["__v_raw"];
    const rawTarget = toRaw(target);
    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
    !isReadonly && track(rawTarget, "iterate", ITERATE_KEY);
    return target.forEach((value, key) => {
      return callback.call(thisArg, wrap(value), wrap(key), observed);
    });
  };
}
function createIterableMethod(method, isReadonly, isShallow) {
  return function(...args) {
    const target = this["__v_raw"];
    const rawTarget = toRaw(target);
    const targetIsMap = isMap(rawTarget);
    const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
    const isKeyOnly = method === "keys" && targetIsMap;
    const innerIterator = target[method](...args);
    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
    !isReadonly && track(rawTarget, "iterate", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
    return {
      next() {
        const {value, done} = innerIterator.next();
        return done ? {value, done} : {
          value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
          done
        };
      },
      [Symbol.iterator]() {
        return this;
      }
    };
  };
}
function createReadonlyMethod(type) {
  return function(...args) {
    if (true) {
      const key = args[0] ? `on key "${args[0]}" ` : ``;
      console.warn(`${capitalize(type)} operation ${key}failed: target is readonly.`, toRaw(this));
    }
    return type === "delete" ? false : this;
  };
}
var mutableInstrumentations = {
  get(key) {
    return get$1(this, key);
  },
  get size() {
    return size(this);
  },
  has: has$1,
  add,
  set: set$1,
  delete: deleteEntry,
  clear,
  forEach: createForEach(false, false)
};
var shallowInstrumentations = {
  get(key) {
    return get$1(this, key, false, true);
  },
  get size() {
    return size(this);
  },
  has: has$1,
  add,
  set: set$1,
  delete: deleteEntry,
  clear,
  forEach: createForEach(false, true)
};
var readonlyInstrumentations = {
  get(key) {
    return get$1(this, key, true);
  },
  get size() {
    return size(this, true);
  },
  has(key) {
    return has$1.call(this, key, true);
  },
  add: createReadonlyMethod("add"),
  set: createReadonlyMethod("set"),
  delete: createReadonlyMethod("delete"),
  clear: createReadonlyMethod("clear"),
  forEach: createForEach(true, false)
};
var shallowReadonlyInstrumentations = {
  get(key) {
    return get$1(this, key, true, true);
  },
  get size() {
    return size(this, true);
  },
  has(key) {
    return has$1.call(this, key, true);
  },
  add: createReadonlyMethod("add"),
  set: createReadonlyMethod("set"),
  delete: createReadonlyMethod("delete"),
  clear: createReadonlyMethod("clear"),
  forEach: createForEach(true, true)
};
var iteratorMethods = ["keys", "values", "entries", Symbol.iterator];
iteratorMethods.forEach((method) => {
  mutableInstrumentations[method] = createIterableMethod(method, false, false);
  readonlyInstrumentations[method] = createIterableMethod(method, true, false);
  shallowInstrumentations[method] = createIterableMethod(method, false, true);
  shallowReadonlyInstrumentations[method] = createIterableMethod(method, true, true);
});
function createInstrumentationGetter(isReadonly, shallow) {
  const instrumentations = shallow ? isReadonly ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly ? readonlyInstrumentations : mutableInstrumentations;
  return (target, key, receiver) => {
    if (key === "__v_isReactive") {
      return !isReadonly;
    } else if (key === "__v_isReadonly") {
      return isReadonly;
    } else if (key === "__v_raw") {
      return target;
    }
    return Reflect.get(hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
  };
}
var mutableCollectionHandlers = {
  get: createInstrumentationGetter(false, false)
};
var shallowCollectionHandlers = {
  get: createInstrumentationGetter(false, true)
};
var readonlyCollectionHandlers = {
  get: createInstrumentationGetter(true, false)
};
var shallowReadonlyCollectionHandlers = {
  get: createInstrumentationGetter(true, true)
};
function checkIdentityKeys(target, has2, key) {
  const rawKey = toRaw(key);
  if (rawKey !== key && has2.call(target, rawKey)) {
    const type = toRawType(target);
    console.warn(`Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`);
  }
}
var reactiveMap = new WeakMap();
var shallowReactiveMap = new WeakMap();
var readonlyMap = new WeakMap();
var shallowReadonlyMap = new WeakMap();
function targetTypeMap(rawType) {
  switch (rawType) {
    case "Object":
    case "Array":
      return 1;
    case "Map":
    case "Set":
    case "WeakMap":
    case "WeakSet":
      return 2;
    default:
      return 0;
  }
}
function getTargetType(value) {
  return value["__v_skip"] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));
}
function reactive2(target) {
  if (target && target["__v_isReadonly"]) {
    return target;
  }
  return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);
}
function readonly(target) {
  return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
}
function createReactiveObject(target, isReadonly, baseHandlers, collectionHandlers, proxyMap) {
  if (!isObject(target)) {
    if (true) {
      console.warn(`value cannot be made reactive: ${String(target)}`);
    }
    return target;
  }
  if (target["__v_raw"] && !(isReadonly && target["__v_isReactive"])) {
    return target;
  }
  const existingProxy = proxyMap.get(target);
  if (existingProxy) {
    return existingProxy;
  }
  const targetType = getTargetType(target);
  if (targetType === 0) {
    return target;
  }
  const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);
  proxyMap.set(target, proxy);
  return proxy;
}
function toRaw(observed) {
  return observed && toRaw(observed["__v_raw"]) || observed;
}
function isRef(r) {
  return Boolean(r && r.__v_isRef === true);
}

// packages/alpinejs/src/magics/$nextTick.js
magic("nextTick", () => nextTick);

// packages/alpinejs/src/magics/$dispatch.js
magic("dispatch", (el) => dispatch.bind(dispatch, el));

// packages/alpinejs/src/magics/$watch.js
magic("watch", (el, {evaluateLater: evaluateLater2, effect: effect3}) => (key, callback) => {
  let evaluate2 = evaluateLater2(key);
  let firstTime = true;
  let oldValue;
  let effectReference = effect3(() => evaluate2((value) => {
    JSON.stringify(value);
    if (!firstTime) {
      queueMicrotask(() => {
        callback(value, oldValue);
        oldValue = value;
      });
    } else {
      oldValue = value;
    }
    firstTime = false;
  }));
  el._x_effects.delete(effectReference);
});

// packages/alpinejs/src/magics/$store.js
magic("store", getStores);

// packages/alpinejs/src/magics/$data.js
magic("data", (el) => scope(el));

// packages/alpinejs/src/magics/$root.js
magic("root", (el) => closestRoot(el));

// packages/alpinejs/src/magics/$refs.js
magic("refs", (el) => {
  if (el._x_refs_proxy)
    return el._x_refs_proxy;
  el._x_refs_proxy = mergeProxies(getArrayOfRefObject(el));
  return el._x_refs_proxy;
});
function getArrayOfRefObject(el) {
  let refObjects = [];
  let currentEl = el;
  while (currentEl) {
    if (currentEl._x_refs)
      refObjects.push(currentEl._x_refs);
    currentEl = currentEl.parentNode;
  }
  return refObjects;
}

// packages/alpinejs/src/ids.js
var globalIdMemo = {};
function findAndIncrementId(name) {
  if (!globalIdMemo[name])
    globalIdMemo[name] = 0;
  return ++globalIdMemo[name];
}
function closestIdRoot(el, name) {
  return findClosest(el, (element) => {
    if (element._x_ids && element._x_ids[name])
      return true;
  });
}
function setIdRoot(el, name) {
  if (!el._x_ids)
    el._x_ids = {};
  if (!el._x_ids[name])
    el._x_ids[name] = findAndIncrementId(name);
}

// packages/alpinejs/src/magics/$id.js
magic("id", (el) => (name, key = null) => {
  let root = closestIdRoot(el, name);
  let id = root ? root._x_ids[name] : findAndIncrementId(name);
  return key ? `${name}-${id}-${key}` : `${name}-${id}`;
});

// packages/alpinejs/src/magics/$el.js
magic("el", (el) => el);

// packages/alpinejs/src/magics/index.js
warnMissingPluginMagic("Focus", "focus", "focus");
warnMissingPluginMagic("Persist", "persist", "persist");
function warnMissingPluginMagic(name, magicName, slug) {
  magic(magicName, (el) => warn(`You can't use [$${directiveName}] without first installing the "${name}" plugin here: https://alpinejs.dev/plugins/${slug}`, el));
}

// packages/alpinejs/src/entangle.js
function entangle({get: outerGet, set: outerSet}, {get: innerGet, set: innerSet}) {
  let firstRun = true;
  let outerHash, innerHash, outerHashLatest, innerHashLatest;
  let reference = effect(() => {
    let outer, inner;
    if (firstRun) {
      outer = outerGet();
      innerSet(outer);
      inner = innerGet();
      firstRun = false;
    } else {
      outer = outerGet();
      inner = innerGet();
      outerHashLatest = JSON.stringify(outer);
      innerHashLatest = JSON.stringify(inner);
      if (outerHashLatest !== outerHash) {
        inner = innerGet();
        innerSet(outer);
        inner = outer;
      } else {
        outerSet(inner);
        outer = inner;
      }
    }
    outerHash = JSON.stringify(outer);
    innerHash = JSON.stringify(inner);
  });
  return () => {
    release(reference);
  };
}

// packages/alpinejs/src/directives/x-modelable.js
directive("modelable", (el, {expression}, {effect: effect3, evaluateLater: evaluateLater2, cleanup: cleanup2}) => {
  let func = evaluateLater2(expression);
  let innerGet = () => {
    let result;
    func((i) => result = i);
    return result;
  };
  let evaluateInnerSet = evaluateLater2(`${expression} = __placeholder`);
  let innerSet = (val) => evaluateInnerSet(() => {
  }, {scope: {__placeholder: val}});
  let initialValue = innerGet();
  innerSet(initialValue);
  queueMicrotask(() => {
    if (!el._x_model)
      return;
    el._x_removeModelListeners["default"]();
    let outerGet = el._x_model.get;
    let outerSet = el._x_model.set;
    let releaseEntanglement = entangle({
      get() {
        return outerGet();
      },
      set(value) {
        outerSet(value);
      }
    }, {
      get() {
        return innerGet();
      },
      set(value) {
        innerSet(value);
      }
    });
    cleanup2(releaseEntanglement);
  });
});

// packages/alpinejs/src/directives/x-teleport.js
var teleportContainerDuringClone = document.createElement("div");
directive("teleport", (el, {modifiers, expression}, {cleanup: cleanup2}) => {
  if (el.tagName.toLowerCase() !== "template")
    warn("x-teleport can only be used on a <template> tag", el);
  let target = skipDuringClone(() => {
    return document.querySelector(expression);
  }, () => {
    return teleportContainerDuringClone;
  })();
  if (!target)
    warn(`Cannot find x-teleport element for selector: "${expression}"`);
  let clone2 = el.content.cloneNode(true).firstElementChild;
  el._x_teleport = clone2;
  clone2._x_teleportBack = el;
  if (el._x_forwardEvents) {
    el._x_forwardEvents.forEach((eventName) => {
      clone2.addEventListener(eventName, (e) => {
        e.stopPropagation();
        el.dispatchEvent(new e.constructor(e.type, e));
      });
    });
  }
  addScopeToNode(clone2, {}, el);
  mutateDom(() => {
    if (modifiers.includes("prepend")) {
      target.parentNode.insertBefore(clone2, target);
    } else if (modifiers.includes("append")) {
      target.parentNode.insertBefore(clone2, target.nextSibling);
    } else {
      target.appendChild(clone2);
    }
    initTree(clone2);
    clone2._x_ignore = true;
  });
  cleanup2(() => clone2.remove());
});

// packages/alpinejs/src/directives/x-ignore.js
var handler = () => {
};
handler.inline = (el, {modifiers}, {cleanup: cleanup2}) => {
  modifiers.includes("self") ? el._x_ignoreSelf = true : el._x_ignore = true;
  cleanup2(() => {
    modifiers.includes("self") ? delete el._x_ignoreSelf : delete el._x_ignore;
  });
};
directive("ignore", handler);

// packages/alpinejs/src/directives/x-effect.js
directive("effect", (el, {expression}, {effect: effect3}) => effect3(evaluateLater(el, expression)));

// packages/alpinejs/src/utils/on.js
function on(el, event, modifiers, callback) {
  let listenerTarget = el;
  let handler4 = (e) => callback(e);
  let options = {};
  let wrapHandler = (callback2, wrapper) => (e) => wrapper(callback2, e);
  if (modifiers.includes("dot"))
    event = dotSyntax(event);
  if (modifiers.includes("camel"))
    event = camelCase2(event);
  if (modifiers.includes("passive"))
    options.passive = true;
  if (modifiers.includes("capture"))
    options.capture = true;
  if (modifiers.includes("window"))
    listenerTarget = window;
  if (modifiers.includes("document"))
    listenerTarget = document;
  if (modifiers.includes("debounce")) {
    let nextModifier = modifiers[modifiers.indexOf("debounce") + 1] || "invalid-wait";
    let wait = isNumeric(nextModifier.split("ms")[0]) ? Number(nextModifier.split("ms")[0]) : 250;
    handler4 = debounce(handler4, wait);
  }
  if (modifiers.includes("throttle")) {
    let nextModifier = modifiers[modifiers.indexOf("throttle") + 1] || "invalid-wait";
    let wait = isNumeric(nextModifier.split("ms")[0]) ? Number(nextModifier.split("ms")[0]) : 250;
    handler4 = throttle(handler4, wait);
  }
  if (modifiers.includes("prevent"))
    handler4 = wrapHandler(handler4, (next, e) => {
      e.preventDefault();
      next(e);
    });
  if (modifiers.includes("stop"))
    handler4 = wrapHandler(handler4, (next, e) => {
      e.stopPropagation();
      next(e);
    });
  if (modifiers.includes("self"))
    handler4 = wrapHandler(handler4, (next, e) => {
      e.target === el && next(e);
    });
  if (modifiers.includes("away") || modifiers.includes("outside")) {
    listenerTarget = document;
    handler4 = wrapHandler(handler4, (next, e) => {
      if (el.contains(e.target))
        return;
      if (e.target.isConnected === false)
        return;
      if (el.offsetWidth < 1 && el.offsetHeight < 1)
        return;
      if (el._x_isShown === false)
        return;
      next(e);
    });
  }
  if (modifiers.includes("once")) {
    handler4 = wrapHandler(handler4, (next, e) => {
      next(e);
      listenerTarget.removeEventListener(event, handler4, options);
    });
  }
  handler4 = wrapHandler(handler4, (next, e) => {
    if (isKeyEvent(event)) {
      if (isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers)) {
        return;
      }
    }
    next(e);
  });
  listenerTarget.addEventListener(event, handler4, options);
  return () => {
    listenerTarget.removeEventListener(event, handler4, options);
  };
}
function dotSyntax(subject) {
  return subject.replace(/-/g, ".");
}
function camelCase2(subject) {
  return subject.toLowerCase().replace(/-(\w)/g, (match, char) => char.toUpperCase());
}
function isNumeric(subject) {
  return !Array.isArray(subject) && !isNaN(subject);
}
function kebabCase2(subject) {
  if ([" ", "_"].includes(subject))
    return subject;
  return subject.replace(/([a-z])([A-Z])/g, "$1-$2").replace(/[_\s]/, "-").toLowerCase();
}
function isKeyEvent(event) {
  return ["keydown", "keyup"].includes(event);
}
function isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers) {
  let keyModifiers = modifiers.filter((i) => {
    return !["window", "document", "prevent", "stop", "once", "capture"].includes(i);
  });
  if (keyModifiers.includes("debounce")) {
    let debounceIndex = keyModifiers.indexOf("debounce");
    keyModifiers.splice(debounceIndex, isNumeric((keyModifiers[debounceIndex + 1] || "invalid-wait").split("ms")[0]) ? 2 : 1);
  }
  if (keyModifiers.includes("throttle")) {
    let debounceIndex = keyModifiers.indexOf("throttle");
    keyModifiers.splice(debounceIndex, isNumeric((keyModifiers[debounceIndex + 1] || "invalid-wait").split("ms")[0]) ? 2 : 1);
  }
  if (keyModifiers.length === 0)
    return false;
  if (keyModifiers.length === 1 && keyToModifiers(e.key).includes(keyModifiers[0]))
    return false;
  const systemKeyModifiers = ["ctrl", "shift", "alt", "meta", "cmd", "super"];
  const selectedSystemKeyModifiers = systemKeyModifiers.filter((modifier) => keyModifiers.includes(modifier));
  keyModifiers = keyModifiers.filter((i) => !selectedSystemKeyModifiers.includes(i));
  if (selectedSystemKeyModifiers.length > 0) {
    const activelyPressedKeyModifiers = selectedSystemKeyModifiers.filter((modifier) => {
      if (modifier === "cmd" || modifier === "super")
        modifier = "meta";
      return e[`${modifier}Key`];
    });
    if (activelyPressedKeyModifiers.length === selectedSystemKeyModifiers.length) {
      if (keyToModifiers(e.key).includes(keyModifiers[0]))
        return false;
    }
  }
  return true;
}
function keyToModifiers(key) {
  if (!key)
    return [];
  key = kebabCase2(key);
  let modifierToKeyMap = {
    ctrl: "control",
    slash: "/",
    space: " ",
    spacebar: " ",
    cmd: "meta",
    esc: "escape",
    up: "arrow-up",
    down: "arrow-down",
    left: "arrow-left",
    right: "arrow-right",
    period: ".",
    equal: "=",
    minus: "-",
    underscore: "_"
  };
  modifierToKeyMap[key] = key;
  return Object.keys(modifierToKeyMap).map((modifier) => {
    if (modifierToKeyMap[modifier] === key)
      return modifier;
  }).filter((modifier) => modifier);
}

// packages/alpinejs/src/directives/x-model.js
directive("model", (el, {modifiers, expression}, {effect: effect3, cleanup: cleanup2}) => {
  let scopeTarget = el;
  if (modifiers.includes("parent")) {
    scopeTarget = el.parentNode;
  }
  let evaluateGet = evaluateLater(scopeTarget, expression);
  let evaluateSet;
  if (typeof expression === "string") {
    evaluateSet = evaluateLater(scopeTarget, `${expression} = __placeholder`);
  } else if (typeof expression === "function" && typeof expression() === "string") {
    evaluateSet = evaluateLater(scopeTarget, `${expression()} = __placeholder`);
  } else {
    evaluateSet = () => {
    };
  }
  let getValue = () => {
    let result;
    evaluateGet((value) => result = value);
    return isGetterSetter(result) ? result.get() : result;
  };
  let setValue = (value) => {
    let result;
    evaluateGet((value2) => result = value2);
    if (isGetterSetter(result)) {
      result.set(value);
    } else {
      evaluateSet(() => {
      }, {
        scope: {__placeholder: value}
      });
    }
  };
  if (typeof expression === "string" && el.type === "radio") {
    mutateDom(() => {
      if (!el.hasAttribute("name"))
        el.setAttribute("name", expression);
    });
  }
  var event = el.tagName.toLowerCase() === "select" || ["checkbox", "radio"].includes(el.type) || modifiers.includes("lazy") ? "change" : "input";
  let removeListener = isCloning ? () => {
  } : on(el, event, modifiers, (e) => {
    setValue(getInputValue(el, modifiers, e, getValue()));
  });
  if (modifiers.includes("fill") && [null, ""].includes(getValue())) {
    el.dispatchEvent(new Event(event, {}));
  }
  if (!el._x_removeModelListeners)
    el._x_removeModelListeners = {};
  el._x_removeModelListeners["default"] = removeListener;
  cleanup2(() => el._x_removeModelListeners["default"]());
  if (el.form) {
    let removeResetListener = on(el.form, "reset", [], (e) => {
      nextTick(() => el._x_model && el._x_model.set(el.value));
    });
    cleanup2(() => removeResetListener());
  }
  el._x_model = {
    get() {
      return getValue();
    },
    set(value) {
      setValue(value);
    }
  };
  el._x_forceModelUpdate = (value) => {
    value = value === void 0 ? getValue() : value;
    if (value === void 0 && typeof expression === "string" && expression.match(/\./))
      value = "";
    window.fromModel = true;
    mutateDom(() => bind(el, "value", value));
    delete window.fromModel;
  };
  effect3(() => {
    let value = getValue();
    if (modifiers.includes("unintrusive") && document.activeElement.isSameNode(el))
      return;
    el._x_forceModelUpdate(value);
  });
});
function getInputValue(el, modifiers, event, currentValue) {
  return mutateDom(() => {
    if (event instanceof CustomEvent && event.detail !== void 0)
      return event.detail ?? event.target.value;
    else if (el.type === "checkbox") {
      if (Array.isArray(currentValue)) {
        let newValue = modifiers.includes("number") ? safeParseNumber(event.target.value) : event.target.value;
        return event.target.checked ? currentValue.concat([newValue]) : currentValue.filter((el2) => !checkedAttrLooseCompare2(el2, newValue));
      } else {
        return event.target.checked;
      }
    } else if (el.tagName.toLowerCase() === "select" && el.multiple) {
      return modifiers.includes("number") ? Array.from(event.target.selectedOptions).map((option) => {
        let rawValue = option.value || option.text;
        return safeParseNumber(rawValue);
      }) : Array.from(event.target.selectedOptions).map((option) => {
        return option.value || option.text;
      });
    } else {
      let rawValue = event.target.value;
      return modifiers.includes("number") ? safeParseNumber(rawValue) : modifiers.includes("trim") ? rawValue.trim() : rawValue;
    }
  });
}
function safeParseNumber(rawValue) {
  let number = rawValue ? parseFloat(rawValue) : null;
  return isNumeric2(number) ? number : rawValue;
}
function checkedAttrLooseCompare2(valueA, valueB) {
  return valueA == valueB;
}
function isNumeric2(subject) {
  return !Array.isArray(subject) && !isNaN(subject);
}
function isGetterSetter(value) {
  return value !== null && typeof value === "object" && typeof value.get === "function" && typeof value.set === "function";
}

// packages/alpinejs/src/directives/x-cloak.js
directive("cloak", (el) => queueMicrotask(() => mutateDom(() => el.removeAttribute(prefix("cloak")))));

// packages/alpinejs/src/directives/x-init.js
addInitSelector(() => `[${prefix("init")}]`);
directive("init", skipDuringClone((el, {expression}, {evaluate: evaluate2}) => {
  if (typeof expression === "string") {
    return !!expression.trim() && evaluate2(expression, {}, false);
  }
  return evaluate2(expression, {}, false);
}));

// packages/alpinejs/src/directives/x-text.js
directive("text", (el, {expression}, {effect: effect3, evaluateLater: evaluateLater2}) => {
  let evaluate2 = evaluateLater2(expression);
  effect3(() => {
    evaluate2((value) => {
      mutateDom(() => {
        el.textContent = value;
      });
    });
  });
});

// packages/alpinejs/src/directives/x-html.js
directive("html", (el, {expression}, {effect: effect3, evaluateLater: evaluateLater2}) => {
  let evaluate2 = evaluateLater2(expression);
  effect3(() => {
    evaluate2((value) => {
      mutateDom(() => {
        el.innerHTML = value;
        el._x_ignoreSelf = true;
        initTree(el);
        delete el._x_ignoreSelf;
      });
    });
  });
});

// packages/alpinejs/src/directives/x-bind.js
mapAttributes(startingWith(":", into(prefix("bind:"))));
var handler2 = (el, {value, modifiers, expression, original}, {effect: effect3}) => {
  if (!value) {
    let bindingProviders = {};
    injectBindingProviders(bindingProviders);
    let getBindings = evaluateLater(el, expression);
    getBindings((bindings) => {
      applyBindingsObject(el, bindings, original);
    }, {scope: bindingProviders});
    return;
  }
  if (value === "key")
    return storeKeyForXFor(el, expression);
  if (el._x_inlineBindings && el._x_inlineBindings[value] && el._x_inlineBindings[value].extract) {
    return;
  }
  let evaluate2 = evaluateLater(el, expression);
  effect3(() => evaluate2((result) => {
    if (result === void 0 && typeof expression === "string" && expression.match(/\./)) {
      result = "";
    }
    mutateDom(() => bind(el, value, result, modifiers));
  }));
};
handler2.inline = (el, {value, modifiers, expression}) => {
  if (!value)
    return;
  if (!el._x_inlineBindings)
    el._x_inlineBindings = {};
  el._x_inlineBindings[value] = {expression, extract: false};
};
directive("bind", handler2);
function storeKeyForXFor(el, expression) {
  el._x_keyExpression = expression;
}

// packages/alpinejs/src/directives/x-data.js
addRootSelector(() => `[${prefix("data")}]`);
directive("data", skipDuringClone((el, {expression}, {cleanup: cleanup2}) => {
  expression = expression === "" ? "{}" : expression;
  let magicContext = {};
  injectMagics(magicContext, el);
  let dataProviderContext = {};
  injectDataProviders(dataProviderContext, magicContext);
  let data2 = evaluate(el, expression, {scope: dataProviderContext});
  if (data2 === void 0 || data2 === true)
    data2 = {};
  injectMagics(data2, el);
  let reactiveData = reactive(data2);
  initInterceptors(reactiveData);
  let undo = addScopeToNode(el, reactiveData);
  reactiveData["init"] && evaluate(el, reactiveData["init"]);
  cleanup2(() => {
    reactiveData["destroy"] && evaluate(el, reactiveData["destroy"]);
    undo();
  });
}));

// packages/alpinejs/src/directives/x-show.js
directive("show", (el, {modifiers, expression}, {effect: effect3}) => {
  let evaluate2 = evaluateLater(el, expression);
  if (!el._x_doHide)
    el._x_doHide = () => {
      mutateDom(() => {
        el.style.setProperty("display", "none", modifiers.includes("important") ? "important" : void 0);
      });
    };
  if (!el._x_doShow)
    el._x_doShow = () => {
      mutateDom(() => {
        if (el.style.length === 1 && el.style.display === "none") {
          el.removeAttribute("style");
        } else {
          el.style.removeProperty("display");
        }
      });
    };
  let hide = () => {
    el._x_doHide();
    el._x_isShown = false;
  };
  let show = () => {
    el._x_doShow();
    el._x_isShown = true;
  };
  let clickAwayCompatibleShow = () => setTimeout(show);
  let toggle = once((value) => value ? show() : hide(), (value) => {
    if (typeof el._x_toggleAndCascadeWithTransitions === "function") {
      el._x_toggleAndCascadeWithTransitions(el, value, show, hide);
    } else {
      value ? clickAwayCompatibleShow() : hide();
    }
  });
  let oldValue;
  let firstTime = true;
  effect3(() => evaluate2((value) => {
    if (!firstTime && value === oldValue)
      return;
    if (modifiers.includes("immediate"))
      value ? clickAwayCompatibleShow() : hide();
    toggle(value);
    oldValue = value;
    firstTime = false;
  }));
});

// packages/alpinejs/src/directives/x-for.js
directive("for", (el, {expression}, {effect: effect3, cleanup: cleanup2}) => {
  let iteratorNames = parseForExpression(expression);
  let evaluateItems = evaluateLater(el, iteratorNames.items);
  let evaluateKey = evaluateLater(el, el._x_keyExpression || "index");
  el._x_prevKeys = [];
  el._x_lookup = {};
  effect3(() => loop(el, iteratorNames, evaluateItems, evaluateKey));
  cleanup2(() => {
    Object.values(el._x_lookup).forEach((el2) => el2.remove());
    delete el._x_prevKeys;
    delete el._x_lookup;
  });
});
function loop(el, iteratorNames, evaluateItems, evaluateKey) {
  let isObject2 = (i) => typeof i === "object" && !Array.isArray(i);
  let templateEl = el;
  evaluateItems((items) => {
    if (isNumeric3(items) && items >= 0) {
      items = Array.from(Array(items).keys(), (i) => i + 1);
    }
    if (items === void 0)
      items = [];
    let lookup = el._x_lookup;
    let prevKeys = el._x_prevKeys;
    let scopes = [];
    let keys = [];
    if (isObject2(items)) {
      items = Object.entries(items).map(([key, value]) => {
        let scope2 = getIterationScopeVariables(iteratorNames, value, key, items);
        evaluateKey((value2) => keys.push(value2), {scope: {index: key, ...scope2}});
        scopes.push(scope2);
      });
    } else {
      for (let i = 0; i < items.length; i++) {
        let scope2 = getIterationScopeVariables(iteratorNames, items[i], i, items);
        evaluateKey((value) => keys.push(value), {scope: {index: i, ...scope2}});
        scopes.push(scope2);
      }
    }
    let adds = [];
    let moves = [];
    let removes = [];
    let sames = [];
    for (let i = 0; i < prevKeys.length; i++) {
      let key = prevKeys[i];
      if (keys.indexOf(key) === -1)
        removes.push(key);
    }
    prevKeys = prevKeys.filter((key) => !removes.includes(key));
    let lastKey = "template";
    for (let i = 0; i < keys.length; i++) {
      let key = keys[i];
      let prevIndex = prevKeys.indexOf(key);
      if (prevIndex === -1) {
        prevKeys.splice(i, 0, key);
        adds.push([lastKey, i]);
      } else if (prevIndex !== i) {
        let keyInSpot = prevKeys.splice(i, 1)[0];
        let keyForSpot = prevKeys.splice(prevIndex - 1, 1)[0];
        prevKeys.splice(i, 0, keyForSpot);
        prevKeys.splice(prevIndex, 0, keyInSpot);
        moves.push([keyInSpot, keyForSpot]);
      } else {
        sames.push(key);
      }
      lastKey = key;
    }
    for (let i = 0; i < removes.length; i++) {
      let key = removes[i];
      if (!!lookup[key]._x_effects) {
        lookup[key]._x_effects.forEach(dequeueJob);
      }
      lookup[key].remove();
      lookup[key] = null;
      delete lookup[key];
    }
    for (let i = 0; i < moves.length; i++) {
      let [keyInSpot, keyForSpot] = moves[i];
      let elInSpot = lookup[keyInSpot];
      let elForSpot = lookup[keyForSpot];
      let marker = document.createElement("div");
      mutateDom(() => {
        if (!elForSpot)
          warn(`x-for ":key" is undefined or invalid`, templateEl);
        elForSpot.after(marker);
        elInSpot.after(elForSpot);
        elForSpot._x_currentIfEl && elForSpot.after(elForSpot._x_currentIfEl);
        marker.before(elInSpot);
        elInSpot._x_currentIfEl && elInSpot.after(elInSpot._x_currentIfEl);
        marker.remove();
      });
      elForSpot._x_refreshXForScope(scopes[keys.indexOf(keyForSpot)]);
    }
    for (let i = 0; i < adds.length; i++) {
      let [lastKey2, index] = adds[i];
      let lastEl = lastKey2 === "template" ? templateEl : lookup[lastKey2];
      if (lastEl._x_currentIfEl)
        lastEl = lastEl._x_currentIfEl;
      let scope2 = scopes[index];
      let key = keys[index];
      let clone2 = document.importNode(templateEl.content, true).firstElementChild;
      let reactiveScope = reactive(scope2);
      addScopeToNode(clone2, reactiveScope, templateEl);
      clone2._x_refreshXForScope = (newScope) => {
        Object.entries(newScope).forEach(([key2, value]) => {
          reactiveScope[key2] = value;
        });
      };
      mutateDom(() => {
        lastEl.after(clone2);
        initTree(clone2);
      });
      if (typeof key === "object") {
        warn("x-for key cannot be an object, it must be a string or an integer", templateEl);
      }
      lookup[key] = clone2;
    }
    for (let i = 0; i < sames.length; i++) {
      lookup[sames[i]]._x_refreshXForScope(scopes[keys.indexOf(sames[i])]);
    }
    templateEl._x_prevKeys = keys;
  });
}
function parseForExpression(expression) {
  let forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
  let stripParensRE = /^\s*\(|\)\s*$/g;
  let forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
  let inMatch = expression.match(forAliasRE);
  if (!inMatch)
    return;
  let res = {};
  res.items = inMatch[2].trim();
  let item = inMatch[1].replace(stripParensRE, "").trim();
  let iteratorMatch = item.match(forIteratorRE);
  if (iteratorMatch) {
    res.item = item.replace(forIteratorRE, "").trim();
    res.index = iteratorMatch[1].trim();
    if (iteratorMatch[2]) {
      res.collection = iteratorMatch[2].trim();
    }
  } else {
    res.item = item;
  }
  return res;
}
function getIterationScopeVariables(iteratorNames, item, index, items) {
  let scopeVariables = {};
  if (/^\[.*\]$/.test(iteratorNames.item) && Array.isArray(item)) {
    let names = iteratorNames.item.replace("[", "").replace("]", "").split(",").map((i) => i.trim());
    names.forEach((name, i) => {
      scopeVariables[name] = item[i];
    });
  } else if (/^\{.*\}$/.test(iteratorNames.item) && !Array.isArray(item) && typeof item === "object") {
    let names = iteratorNames.item.replace("{", "").replace("}", "").split(",").map((i) => i.trim());
    names.forEach((name) => {
      scopeVariables[name] = item[name];
    });
  } else {
    scopeVariables[iteratorNames.item] = item;
  }
  if (iteratorNames.index)
    scopeVariables[iteratorNames.index] = index;
  if (iteratorNames.collection)
    scopeVariables[iteratorNames.collection] = items;
  return scopeVariables;
}
function isNumeric3(subject) {
  return !Array.isArray(subject) && !isNaN(subject);
}

// packages/alpinejs/src/directives/x-ref.js
function handler3() {
}
handler3.inline = (el, {expression}, {cleanup: cleanup2}) => {
  let root = closestRoot(el);
  if (!root._x_refs)
    root._x_refs = {};
  root._x_refs[expression] = el;
  cleanup2(() => delete root._x_refs[expression]);
};
directive("ref", handler3);

// packages/alpinejs/src/directives/x-if.js
directive("if", (el, {expression}, {effect: effect3, cleanup: cleanup2}) => {
  let evaluate2 = evaluateLater(el, expression);
  let show = () => {
    if (el._x_currentIfEl)
      return el._x_currentIfEl;
    let clone2 = el.content.cloneNode(true).firstElementChild;
    addScopeToNode(clone2, {}, el);
    mutateDom(() => {
      el.after(clone2);
      initTree(clone2);
    });
    el._x_currentIfEl = clone2;
    el._x_undoIf = () => {
      walk(clone2, (node) => {
        if (!!node._x_effects) {
          node._x_effects.forEach(dequeueJob);
        }
      });
      clone2.remove();
      delete el._x_currentIfEl;
    };
    return clone2;
  };
  let hide = () => {
    if (!el._x_undoIf)
      return;
    el._x_undoIf();
    delete el._x_undoIf;
  };
  effect3(() => evaluate2((value) => {
    value ? show() : hide();
  }));
  cleanup2(() => el._x_undoIf && el._x_undoIf());
});

// packages/alpinejs/src/directives/x-id.js
directive("id", (el, {expression}, {evaluate: evaluate2}) => {
  let names = evaluate2(expression);
  names.forEach((name) => setIdRoot(el, name));
});

// packages/alpinejs/src/directives/x-on.js
mapAttributes(startingWith("@", into(prefix("on:"))));
directive("on", skipDuringClone((el, {value, modifiers, expression}, {cleanup: cleanup2}) => {
  let evaluate2 = expression ? evaluateLater(el, expression) : () => {
  };
  if (el.tagName.toLowerCase() === "template") {
    if (!el._x_forwardEvents)
      el._x_forwardEvents = [];
    if (!el._x_forwardEvents.includes(value))
      el._x_forwardEvents.push(value);
  }
  let removeListener = on(el, value, modifiers, (e) => {
    evaluate2(() => {
    }, {scope: {$event: e}, params: [e]});
  });
  cleanup2(() => removeListener());
}));

// packages/alpinejs/src/directives/index.js
warnMissingPluginDirective("Collapse", "collapse", "collapse");
warnMissingPluginDirective("Intersect", "intersect", "intersect");
warnMissingPluginDirective("Focus", "trap", "focus");
warnMissingPluginDirective("Mask", "mask", "mask");
function warnMissingPluginDirective(name, directiveName2, slug) {
  directive(directiveName2, (el) => warn(`You can't use [x-${directiveName2}] without first installing the "${name}" plugin here: https://alpinejs.dev/plugins/${slug}`, el));
}

// packages/alpinejs/src/index.js
alpine_default.setEvaluator(normalEvaluator);
alpine_default.setReactivityEngine({reactive: reactive2, effect: effect2, release: stop, raw: toRaw});
var src_default = alpine_default;

// packages/alpinejs/builds/module.js
var module_default = src_default;



/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/navigation.scss":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/navigation.scss ***!
  \**********************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.nav-icon {
  margin: 0;
  width: 32px;
  cursor: pointer;
}
.nav-icon:before, .nav-icon:after,
.nav-icon div {
  background-color: #000;
  border-radius: 3px;
  display: block;
  height: 2px;
  content: "";
  margin: 6px 0;
  transition: all 0.4s ease-in-out;
}
.nav-icon:before {
  transform: translateY(8px) rotate(135deg) scaleX(0.875);
}
.nav-icon:after {
  transform: translateY(-8px) rotate(-135deg) scaleX(0.875);
}
.nav-icon div {
  transform: scale(0);
}

.collapsed .nav-icon:before, .collapsed .nav-icon:after,
.collapsed .nav-icon div {
  background-color: #000;
  border-radius: 3px;
  display: block;
  height: 2px;
  content: "";
  margin: 6px 0;
  transition: all 0.4s ease-in-out;
}
.collapsed .nav-icon:before {
  transform: translateY(0) rotate(0deg) scaleX(1);
}
.collapsed .nav-icon:after {
  transform: translateY(0) rotate(0deg) scaleX(1);
}
.collapsed .nav-icon div {
  transform: scale(1);
}

ul {
  list-style-type: none;
  padding: 0;
  margin: 0;
}

nav {
  background-color: #fff;
}

[x-cloak] {
  display: none;
}

.container-custom {
  width: 100%;
}
@media (min-width: 576px) {
  .container-custom {
    margin-left: auto;
    margin-right: auto;
    max-width: 540px;
  }
}
@media (min-width: 768px) {
  .container-custom {
    max-width: 720px;
  }
}
@media (min-width: 992px) {
  .container-custom {
    max-width: 960px;
  }
}
@media (min-width: 1200px) {
  .container-custom {
    max-width: 1320px;
  }
}
@media (min-width: 1400px) {
  .container-custom {
    max-width: 1320px;
  }
}

* {
  font-family: sans-serif;
}

.navigation__header {
  background-color: #fff;
  width: 100%;
  padding-top: 1rem;
  padding-bottom: 1rem;
  box-shadow: 0px 4px 8px 0px rgba(50, 123, 163, 0.25);
}
.navigation__header-inner {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  flex-direction: row-reverse;
  justify-content: space-between;
  width: 100%;
  padding: 0 1rem;
}
.navigation__mobile-underlay {
  position: fixed;
  background-color: rgba(0, 0, 0, 0.25);
  inset: 0px;
  top: 80px;
}
.navigation__mobile-menu-wrapper {
  position: fixed;
  right: 0;
  top: 80px;
  height: calc(100vh - 80px);
  background-color: #fff;
  width: 100%;
  max-width: 20rem;
  overflow: hidden;
  transition-duration: 300ms;
  transition-property: all;
  transition-timing-function: cubic-bezier(0.17, 0.67, 0.27, 1);
}
.navigation .navigation__logo {
  display: none;
}
.navigation__desktop-menu-wrapper {
  display: flex;
  align-items: center;
  gap: 32px;
}
.navigation__login-cart-wrapper {
  display: flex;
  align-items: center;
  gap: 1rem;
}
.navigation__login button, .navigation__cart button {
  display: flex;
  align-items: center;
}
.navigation__layer-1 {
  display: none;
}
.navigation__primary-btn {
  background-color: red;
}
.navigation .active {
  font-weight: bold !important;
}
@media (min-width: 1024px) {
  .navigation {
    display: block;
  }
  .navigation__hamburger {
    display: none;
  }
  .navigation .navigation__logo {
    display: block;
  }
  .navigation__layer-1 {
    display: block;
  }
  .navigation__desktop-menu-wrapper {
    display: flex;
  }
  .navigation__desktop-menu-wrapper .navigation__logo {
    display: none;
  }
  .navigation__desktop-menu-wrapper .navigation__logo {
    display: block;
  }
  .navigation__desktop-menu-wrapper ul {
    display: flex;
    align-items: center;
    transform: translateY(-5px);
  }
  .navigation__desktop-menu-wrapper ul li {
    position: relative;
  }
  .navigation__desktop-menu-wrapper ul li.navigation__login .navigation__desktop-menu-dropdown, .navigation__desktop-menu-wrapper ul li.navigation__cart .navigation__desktop-menu-dropdown {
    --tw-translate-x: 0%;
    left: 100%;
    transform: translateX(-100%);
  }
  .navigation__desktop-menu-wrapper ul li.navigation__login svg {
    display: none;
    top: 27px;
  }
  .navigation__desktop-menu-wrapper ul li.navigation__login .navigation__desktop-menu-dropdown {
    margin-top: 21px;
  }
  .navigation__desktop-menu-wrapper ul li.navigation__login .navigation__primary-btn {
    flex-direction: column;
    align-items: center;
  }
  .navigation__desktop-menu-wrapper ul li.navigation__login .navigation__primary-btn > div {
    display: flex;
    align-items: center;
  }
  .navigation__desktop-menu-wrapper ul li.navigation__login .navigation__primary-btn img {
    margin-right: 0.25rem;
  }
  .navigation__desktop-menu-wrapper ul li.navigation__login.status--logged-in svg {
    display: block;
  }
  .navigation__desktop-menu-wrapper ul > li > button {
    display: flex;
    flex-direction: column;
    width: 100%;
    align-items: center;
    font-size: 16px;
    font-weight: 325;
    line-height: 16px; /* 100% */
  }
  .navigation__desktop-menu-wrapper ul > li > button svg {
    position: absolute;
    top: 15px;
    transform: rotate(0deg);
    transition: transform 0.3s ease-in-out;
  }
  .navigation__desktop-menu-wrapper ul > li > button.open svg {
    transform: rotate(180deg);
  }
  .navigation__desktop-menu-wrapper ul ul {
    flex-direction: column;
    width: 100%;
  }
  .navigation__desktop-menu-wrapper ul ul li {
    width: 300px;
  }
  .navigation__desktop-menu-wrapper > ul {
    gap: 32px;
  }
  .navigation__desktop-menu-dropdown {
    position: absolute;
    width: 300px;
    margin-top: 33px;
    --tw-translate-x: -50%;
    left: 50%;
    transform: translateX(-50%);
    border-radius: 0 0 0.5rem 0.5rem;
    box-shadow: 0px 4px 8px 0px rgba(50, 123, 163, 0.25);
  }
  .navigation__desktop-menu-dropdown.ease-in, .navigation__desktop-menu-dropdown.ease-out {
    transition-timing-function: cubic-bezier(0.17, 0.67, 0.27, 1) !important;
    transition-duration: 0.3s !important;
  }
}
.navigation__mobile-close-button {
  position: relative;
}
.navigation__mobile-ul button,
.navigation__mobile-ul a {
  padding: 1rem 2rem;
  width: 100%;
  text-align: left;
  display: block;
  border-top: 1px solid #eaeaea;
  border-bottom: 1px solid #eaeaea;
}
.navigation__mobile-close-li {
  display: flex;
  justify-content: flex-end;
  width: 100%;
}
.navigation__mobile-close-li button {
  display: inline-block;
  width: auto;
}`, "",{"version":3,"sources":["webpack://./src/navigation.scss"],"names":[],"mappings":"AA+DA;EACI,SAAA;EACA,WAAA;EACA,eAAA;AA9DJ;AA+BI;;EAGI,sBAtCA;EAuCA,kBAAA;EACA,cAAA;EACA,WAAA;EACA,WAAA;EACA,aAAA;EACA,gCAAA;AA9BR;AAgCI;EACI,uDAAA;AA9BR;AAgCI;EACI,yDAAA;AA9BR;AAgCI;EACI,mBAAA;AA9BR;;AAnBI;;EAGI,sBAPA;EAQA,kBAAA;EACA,cAAA;EACA,WAAA;EACA,WAAA;EACA,aAAA;EACA,gCAAA;AAqBR;AAlBI;EACI,+CAAA;AAoBR;AAlBI;EACI,+CAAA;AAoBR;AAlBI;EACI,mBAAA;AAoBR;;AAiCA;EACI,qBAAA;EACA,UAAA;EACA,SAAA;AA9BJ;;AAiCA;EACI,sBAAA;AA9BJ;;AAiCA;EACI,aAAA;AA9BJ;;AAiCA;EACI,WAAA;AA9BJ;AAgCI;EAHJ;IAIQ,iBAAA;IACA,kBAAA;IACA,gBAAA;EA7BN;AACF;AA+BI;EATJ;IAUQ,gBAAA;EA5BN;AACF;AA8BI;EAbJ;IAcQ,gBAAA;EA3BN;AACF;AA6BI;EAjBJ;IAkBQ,iBAAA;EA1BN;AACF;AA4BI;EArBJ;IAsBQ,iBAAA;EAzBN;AACF;;AA4BA;EACI,uBAAA;AAzBJ;;AAiCI;EACI,sBAAA;EACA,WAAA;EACA,iBAAA;EACA,oBAAA;EACA,oDAAA;AA9BR;AAiCI;EACI,aAAA;EACA,yBAAA;EACA,mBAAA;EACA,2BAAA;EACA,8BAAA;EACA,WAAA;EACA,eAAA;AA/BR;AAkCI;EACI,eAAA;EACA,qCAAA;EACA,UAAA;EACA,SAAA;AAhCR;AAmCI;EACI,eAAA;EACA,QAAA;EACA,SAAA;EACA,0BAAA;EACA,sBAAA;EACA,WAAA;EACA,gBAAA;EAEA,gBAAA;EACA,0BAAA;EACA,wBAAA;EACA,6DAAA;AAlCR;AAqCI;EACI,aAAA;AAnCR;AAsCI;EACI,aAAA;EACA,mBAAA;EACA,SAAA;AApCR;AAuCI;EACI,aAAA;EACA,mBAAA;EACA,SAAA;AArCR;AA0CQ;EACI,aAAA;EACA,mBAAA;AAxCZ;AA4CI;EACI,aAAA;AA1CR;AA6CI;EACI,qBAAA;AA3CR;AA8CI;EACI,4BAAA;AA5CR;AA+CI;EAjFJ;IAkFQ,cAAA;EA5CN;EA8CM;IACI,aAAA;EA5CV;EA+CM;IACI,cAAA;EA7CV;EAgDM;IACI,cAAA;EA9CV;EAiDM;IACI,aAAA;EA/CV;EAiDU;IACI,aAAA;EA/Cd;EAkDU;IACI,cAAA;EAhDd;EAmDU;IACI,aAAA;IACA,mBAAA;IACA,2BAAA;EAjDd;EAmDc;IACI,kBAAA;EAjDlB;EAqDsB;IACI,oBAAA;IACA,UAAA;IACA,4BAAA;EAnD1B;EAwDsB;IACI,aAAA;IACA,SAAA;EAtD1B;EAyDsB;IACI,gBAAA;EAvD1B;EA0DsB;IACI,sBAAA;IACA,mBAAA;EAxD1B;EA0D0B;IACI,aAAA;IACA,mBAAA;EAxD9B;EA2D0B;IACI,qBAAA;EAzD9B;EA8D0B;IACI,cAAA;EA5D9B;EAkEc;IACI,aAAA;IACA,sBAAA;IACA,WAAA;IACA,mBAAA;IACA,eAAA;IACA,gBAAA;IACA,iBAAA,EAAA,SAAA;EAhElB;EAkEkB;IACI,kBAAA;IACA,SAAA;IACA,uBAAA;IACA,sCAAA;EAhEtB;EAoEsB;IACI,yBAAA;EAlE1B;EAuEc;IACI,sBAAA;IACA,WAAA;EArElB;EAuEkB;IACI,YAAA;EArEtB;EA4EU;IACI,SAAA;EA1Ed;EA6EM;IACI,kBAAA;IACA,YAAA;IACA,gBAAA;IACA,sBAAA;IACA,SAAA;IACA,2BAAA;IACA,gCAAA;IACA,oDAAA;EA3EV;EA6EU;IAEI,wEAAA;IAMA,oCAAA;EAjFd;AACF;AAsFI;EACI,kBAAA;AApFR;AA2FQ;;EAEI,kBAAA;EACA,WAAA;EACA,gBAAA;EACA,cAAA;EACA,6BAAA;EACA,gCAAA;AAzFZ;AAgGI;EACI,aAAA;EACA,yBAAA;EACA,WAAA;AA9FR;AAgGQ;EACI,qBAAA;EACA,WAAA;AA9FZ","sourcesContent":["$black: #000;\n\n// Hamburger Animation: Base `=`\n@mixin cssUiAssetHamburger($theme-color: $black) {\n    &:before,\n    &:after,\n    div {\n        background-color: $theme-color;\n        border-radius: 3px;\n        display: block;\n        height: 2px;\n        content: \"\";\n        margin: 6px 0;\n        transition: all 0.4s ease-in-out;\n    }\n\n    &:before {\n        transform: translateY(0) rotate(0deg) scaleX(1);\n    }\n    &:after {\n        transform: translateY(0) rotate(0deg) scaleX(1);\n    }\n    div {\n        transform: scale(1);\n    }\n}\n\n.transition {\n    // transition-property: all !important;\n    // transition-duration: 3s !important;\n    // transition-timing-function: cubic-bezier(0.17, 0.67, 0.27, 1) !important;\n}\n\n// Hamburger Animation: Active 'x'\n@mixin cssUiAssetCross($theme-color: $black) {\n    &:before,\n    &:after,\n    div {\n        background-color: $theme-color;\n        border-radius: 3px;\n        display: block;\n        height: 2px;\n        content: \"\";\n        margin: 6px 0;\n        transition: all 0.4s ease-in-out;\n    }\n    &:before {\n        transform: translateY(8px) rotate(135deg) scaleX(0.875);\n    }\n    &:after {\n        transform: translateY(-8px) rotate(-135deg) scaleX(0.875);\n    }\n    div {\n        transform: scale(0);\n    }\n}\n\n// .site-header__mobile-toggle {\n//     background-image: none;\n//     background-color: transparent;\n//     padding: 8px 5px;\n//     align-self: center;\n\n.nav-icon {\n    margin: 0;\n    width: 32px;\n    cursor: pointer;\n    @include cssUiAssetCross();\n}\n\n.collapsed {\n    .nav-icon {\n        @include cssUiAssetHamburger();\n    }\n}\n// }\nul {\n    list-style-type: none;\n    padding: 0;\n    margin: 0;\n}\n\nnav {\n    background-color: #fff;\n}\n\n[x-cloak] {\n    display: none;\n}\n\n.container-custom {\n    width: 100%;\n\n    @media (min-width: 576px) {\n        margin-left: auto;\n        margin-right: auto;\n        max-width: 540px;\n    }\n\n    @media (min-width: 768px) {\n        max-width: 720px;\n    }\n\n    @media (min-width: 992px) {\n        max-width: 960px;\n    }\n\n    @media (min-width: 1200px) {\n        max-width: 1320px;\n    }\n\n    @media (min-width: 1400px) {\n        max-width: 1320px;\n    }\n}\n\n* {\n    font-family: sans-serif;\n}\n\n.navigation {\n    &__wrapper {\n        // min-height: 100vh;\n    }\n\n    &__header {\n        background-color: #fff;\n        width: 100%;\n        padding-top: 1rem;\n        padding-bottom: 1rem;\n        box-shadow: 0px 4px 8px 0px rgba(50, 123, 163, 0.25);\n    }\n\n    &__header-inner {\n        display: flex;\n        justify-content: flex-end;\n        align-items: center;\n        flex-direction: row-reverse;\n        justify-content: space-between;\n        width: 100%;\n        padding: 0 1rem;\n    }\n\n    &__mobile-underlay {\n        position: fixed;\n        background-color: rgba(0, 0, 0, 0.25);\n        inset: 0px;\n        top: 80px;\n    }\n\n    &__mobile-menu-wrapper {\n        position: fixed;\n        right: 0;\n        top: 80px;\n        height: calc(100vh - 80px);\n        background-color: #fff;\n        width: 100%;\n        max-width: 20rem;\n        // padding: 0;\n        overflow: hidden;\n        transition-duration: 300ms;\n        transition-property: all;\n        transition-timing-function: cubic-bezier(0.17, 0.67, 0.27, 1);\n    }\n\n    .navigation__logo {\n        display: none;\n    }\n\n    &__desktop-menu-wrapper {\n        display: flex;\n        align-items: center;\n        gap: 32px;\n    }\n\n    &__login-cart-wrapper {\n        display: flex;\n        align-items: center;\n        gap: 1rem;\n    }\n\n    &__login,\n    &__cart {\n        button {\n            display: flex;\n            align-items: center;\n        }\n    }\n\n    &__layer-1 {\n        display: none;\n    }\n\n    &__primary-btn {\n        background-color: red;\n    }\n\n    .active {\n        font-weight: bold !important;\n    }\n\n    @media (min-width: 1024px) {\n        display: block;\n\n        &__hamburger {\n            display: none;\n        }\n\n        .navigation__logo {\n            display: block;\n        }\n\n        &__layer-1 {\n            display: block;\n        }\n\n        &__desktop-menu-wrapper {\n            display: flex;\n\n            .navigation__logo {\n                display: none;\n            }\n\n            .navigation__logo {\n                display: block;\n            }\n\n            ul {\n                display: flex;\n                align-items: center;\n                transform: translateY(-5px);\n\n                li {\n                    position: relative;\n\n                    &.navigation__login,\n                    &.navigation__cart {\n                        .navigation__desktop-menu-dropdown {\n                            --tw-translate-x: 0%;\n                            left: 100%;\n                            transform: translateX(-100%);\n                        }\n                    }\n\n                    &.navigation__login {\n                        svg {\n                            display: none;\n                            top: 27px;\n                        }\n\n                        .navigation__desktop-menu-dropdown {\n                            margin-top: 21px;\n                        }\n\n                        .navigation__primary-btn {\n                            flex-direction: column;\n                            align-items: center;\n\n                            > div {\n                                display: flex;\n                                align-items: center;\n                            }\n\n                            img {\n                                margin-right: 0.25rem;\n                            }\n                        }\n\n                        &.status--logged-in {\n                            svg {\n                                display: block;\n                            }\n                        }\n                    }\n                }\n\n                > li > button {\n                    display: flex;\n                    flex-direction: column;\n                    width: 100%;\n                    align-items: center;\n                    font-size: 16px;\n                    font-weight: 325;\n                    line-height: 16px; /* 100% */\n\n                    svg {\n                        position: absolute;\n                        top: 15px;\n                        transform: rotate(0deg);\n                        transition: transform 0.3s ease-in-out;\n                    }\n\n                    &.open {\n                        svg {\n                            transform: rotate(180deg);\n                        }\n                    }\n                }\n\n                ul {\n                    flex-direction: column;\n                    width: 100%;\n\n                    li {\n                        width: 300px;\n                    }\n                }\n            }\n        }\n\n        &__desktop-menu-wrapper {\n            > ul {\n                gap: 32px;\n            }\n        }\n        &__desktop-menu-dropdown {\n            position: absolute;\n            width: 300px;\n            margin-top: 33px;\n            --tw-translate-x: -50%;\n            left: 50%;\n            transform: translateX(-50%);\n            border-radius: 0 0 0.5rem 0.5rem;\n            box-shadow: 0px 4px 8px 0px rgba(50, 123, 163, 0.25);\n\n            &.ease-in,\n            &.ease-out {\n                transition-timing-function: cubic-bezier(\n                    0.17,\n                    0.67,\n                    0.27,\n                    1\n                ) !important;\n                transition-duration: 0.3s !important;\n                // left: -50%;\n            }\n        }\n    }\n\n    &__mobile-close-button {\n        position: relative;\n        // margin-top: 0px;\n        // z-index: 50;\n        // right: 1rem;\n    }\n\n    &__mobile-ul {\n        button,\n        a {\n            padding: 1rem 2rem;\n            width: 100%;\n            text-align: left;\n            display: block;\n            border-top: 1px solid #eaeaea;\n            border-bottom: 1px solid #eaeaea;\n        }\n\n        a {\n        }\n    }\n\n    &__mobile-close-li {\n        display: flex;\n        justify-content: flex-end;\n        width: 100%;\n\n        button {\n            display: inline-block;\n            width: auto;\n        }\n    }\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/style.css":
/*!****************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/style.css ***!
  \****************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./apercu-condensed-regular-pro.woff2 */ "./src/apercu-condensed-regular-pro.woff2"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(/*! ./apercu-condensed-regular-pro.woff */ "./src/apercu-condensed-regular-pro.woff"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
var ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, `@font-face {
  font-family: "apercu-reg";
  src: url(${___CSS_LOADER_URL_REPLACEMENT_0___}) format("woff2"), url(${___CSS_LOADER_URL_REPLACEMENT_1___}) format("woff");
  font-weight: 400;
  font-style: normal;
}
.hello {
  font-family: "apercu-reg", sans-serif;
  /* color: red; */
}`, "",{"version":3,"sources":["webpack://./src/style.css"],"names":[],"mappings":"AAAA;EACI,yBAAA;EACA,oHAAA;EAEA,gBAAA;EACA,kBAAA;AAAJ;AAGA;EACI,qCAAA;EACA,gBAAA;AADJ","sourcesContent":["@font-face {\n    font-family: \"apercu-reg\";\n    src: url(\"./apercu-condensed-regular-pro.woff2\") format(\"woff2\"),\n        url(\"./apercu-condensed-regular-pro.woff\") format(\"woff\");\n    font-weight: 400;\n    font-style: normal;\n}\n\n.hello {\n    font-family: \"apercu-reg\", sans-serif;\n    /* color: red; */\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/style.scss":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/style.scss ***!
  \*****************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `body {
  background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
  background-size: 400% 400%;
  animation: gradient 15s ease infinite;
  height: 100vh;
}

.image {
  max-width: 100px;
  transition: all 0.3s ease-in-out;
}
.image:hover {
  filter: invert(80%) sepia(37%) saturate(556%) hue-rotate(66deg) brightness(97%) contrast(88%);
  cursor: pointer;
}

@keyframes gradient {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}`, "",{"version":3,"sources":["webpack://./src/style.scss"],"names":[],"mappings":"AAAA;EACI,uEAAA;EACA,0BAAA;EACA,qCAAA;EACA,aAAA;AACJ;;AAEA;EACI,gBAAA;EACA,gCAAA;AACJ;AACI;EACI,6FAAA;EAEA,eAAA;AAAR;;AAIA;EACI;IACI,2BAAA;EADN;EAGE;IACI,6BAAA;EADN;EAGE;IACI,2BAAA;EADN;AACF","sourcesContent":["body {\n    background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);\n    background-size: 400% 400%;\n    animation: gradient 15s ease infinite;\n    height: 100vh;\n}\n\n.image {\n    max-width: 100px;\n    transition: all 0.3s ease-in-out;\n\n    &:hover {\n        filter: invert(80%) sepia(37%) saturate(556%) hue-rotate(66deg)\n            brightness(97%) contrast(88%);\n        cursor: pointer;\n    }\n}\n\n@keyframes gradient {\n    0% {\n        background-position: 0% 50%;\n    }\n    50% {\n        background-position: 100% 50%;\n    }\n    100% {\n        background-position: 0% 50%;\n    }\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/subscribe-now-panel.scss":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/subscribe-now-panel.scss ***!
  \*******************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.subscribe-now-panel {
  margin-top: 1rem;
  margin-bottom: 2rem;
  margin-left: auto;
  margin-right: auto;
  position: relative;
}
.subscribe-now-panel__inner-wrapper {
  background-color: purple;
  color: #fff;
  padding: 1rem;
}
.subscribe-now-panel__anchor-wrapper {
  color: white;
  text-decoration: none;
}
.subscribe-now-panel__anchor-wrapper:hover {
  cursor: pointer;
  text-decoration: underline;
}
.subscribe-now-panel__anchor-wrapper:hover .subscribe-now-panel__visual-link img {
  transform: translateX(10px);
}
.subscribe-now-panel__anchor-wrapper:hover .subscribe-now-panel__tcs a {
  text-decoration: none;
}
.subscribe-now-panel__anchor-wrapper:hover .subscribe-now-panel__tcs a:hover {
  text-decoration: underline;
}
.subscribe-now-panel__anchor-wrapper:hover .subscribe-now-panel__tcs a:hover .subscribe-now-panel__visual-link img {
  transform: translateX(0px);
}
.subscribe-now-panel__tcs, .subscribe-now-panel__anchor-inner {
  display: flex;
  color: white;
  display: flex;
  flex-direction: column;
  align-content: center;
  text-align: center;
}
.subscribe-now-panel__column-right {
  padding-bottom: 2rem;
}
.subscribe-now-panel__column-right > * {
  display: inline-block;
}
.subscribe-now-panel__image-container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
.subscribe-now-panel h3 {
  margin-top: 0;
  margin-bottom: 0;
  line-height: 125%;
}
@media (min-width: 768px) {
  .subscribe-now-panel h3 {
    font-size: 49px;
    margin-bottom: 0;
  }
}
.subscribe-now-panel__visual-link {
  font-weight: 325;
  font-size: 16px;
  line-height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
}
.subscribe-now-panel__visual-link > * {
  display: inline-block;
}
.subscribe-now-panel__visual-link img {
  margin-left: 12px;
  transition: transform 0.3s ease-in-out;
}
.subscribe-now-panel__tcs {
  position: absolute;
}
.subscribe-now-panel__tcs a {
  color: #fff;
  bottom: 0;
  display: inline-block;
  text-decoration: none;
  width: auto;
}
.subscribe-now-panel__tcs a:hover {
  text-decoration: underline;
}
@media (min-width: 460px) {
  .subscribe-now-panel__inner-wrapper {
    padding-top: 2rem;
    padding-bottom: 2rem;
  }
  .subscribe-now-panel__tcs, .subscribe-now-panel__anchor-inner {
    column-gap: 12px;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    align-content: center;
    text-align: left;
  }
  .subscribe-now-panel__visual-link {
    font-weight: 325;
    font-size: 16px;
    line-height: 24px;
    display: flex;
    align-items: center;
    justify-content: flex-start;
  }
}
@media (min-width: 768px) {
  .subscribe-now-panel__tcs, .subscribe-now-panel__anchor-inner {
    column-gap: 64px;
  }
}`, "",{"version":3,"sources":["webpack://./src/subscribe-now-panel.scss"],"names":[],"mappings":"AAGA;EACI,gBAAA;EACA,mBAAA;EACA,iBAAA;EACA,kBAAA;EACA,kBAAA;AAFJ;AAII;EACI,wBAVU;EAWV,WAZI;EAaJ,aAAA;AAFR;AAKI;EACI,YAAA;EACA,qBAAA;AAHR;AAKQ;EACI,eAAA;EACA,0BAAA;AAHZ;AAMgB;EACI,2BAAA;AAJpB;AAQY;EACI,qBAAA;AANhB;AAQgB;EACI,0BAAA;AANpB;AASwB;EACI,0BAAA;AAP5B;AAkBI;EAEI,aAAA;EACA,YAAA;EACA,aAAA;EACA,sBAAA;EACA,qBAAA;EACA,kBAAA;AAjBR;AAsCI;EAUI,oBAAA;AA7CR;AA+CQ;EACI,qBAAA;AA7CZ;AAiDI;EACI,aAAA;EACA,sBAAA;EACA,uBAAA;EACA,mBAAA;AA/CR;AAkDI;EACI,aAAA;EACA,gBAAA;EACA,iBAAA;AAhDR;AAkDQ;EALJ;IAMQ,eAAA;IACA,gBAAA;EA/CV;AACF;AAkDI;EACI,gBAAA;EACA,eAAA;EACA,iBAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;AAhDR;AAkDQ;EACI,qBAAA;AAhDZ;AAmDQ;EACI,iBAAA;EACA,sCAAA;AAjDZ;AAgEI;EACI,kBAAA;AA9DR;AAgFQ;EACI,WAjKA;EAkKA,SAAA;EAGA,qBAAA;EACA,qBAAA;EACA,WAAA;AAhFZ;AAuFY;EACI,0BAAA;AArFhB;AA0FI;EACI;IACI,iBAAA;IACA,oBAAA;EAxFV;EA2FM;IAEI,gBAAA;IACA,mBAAA;IACA,uBAAA;IACA,mBAAA;IACA,qBAAA;IACA,gBAAA;EA1FV;EA6FM;IACI,gBAAA;IACA,eAAA;IACA,iBAAA;IACA,aAAA;IACA,mBAAA;IACA,2BAAA;EA3FV;AACF;AA8FI;EACI;IAGI,gBAAA;EA9FV;AACF","sourcesContent":["$col_white: #fff;\n$col_base_purple: purple;\n\n.subscribe-now-panel {\n    margin-top: 1rem;\n    margin-bottom: 2rem;\n    margin-left: auto;\n    margin-right: auto;\n    position: relative;\n\n    &__inner-wrapper {\n        background-color: $col_base_purple;\n        color: $col_white;\n        padding: 1rem;\n    }\n\n    &__anchor-wrapper {\n        color: white;\n        text-decoration: none;\n\n        &:hover {\n            cursor: pointer;\n            text-decoration: underline;\n\n            .subscribe-now-panel__visual-link {\n                img {\n                    transform: translateX(10px);\n                }\n            }\n\n            .subscribe-now-panel__tcs a {\n                text-decoration: none;\n\n                &:hover {\n                    text-decoration: underline;\n\n                    .subscribe-now-panel__visual-link {\n                        img {\n                            transform: translateX(0px);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    &__anchor-inner {\n    }\n\n    &__tcs,\n    &__anchor-inner {\n        display: flex;\n        color: white;\n        display: flex;\n        flex-direction: column;\n        align-content: center;\n        text-align: center;\n        // row-gap: 12px;\n    }\n\n    // &__column-left,\n    // &__column-right {\n    //   display: flex;\n    //   flex-direction: column;\n    //   justify-content: center;\n    //   align-items: center;\n    //   text-align: center;\n    // }\n\n    // &__column-left {\n    //   margin-bottom: 0;\n\n    //   @media( min-width: sm2) {\n    //     align-items: end;\n    //   }\n    // }\n\n    &__column-right {\n        // h3, span, a {\n        //   display: inline-block;\n        //   width: 100%;\n        // }\n        //   @media( min-width: sm2) {\n        //     align-items: start;\n        //     text-align: left;\n        //   }\n\n        padding-bottom: 2rem;\n\n        > * {\n            display: inline-block;\n        }\n    }\n\n    &__image-container {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n    }\n\n    h3 {\n        margin-top: 0;\n        margin-bottom: 0;\n        line-height: 125%;\n\n        @media (min-width: 768px) {\n            font-size: 49px;\n            margin-bottom: 0;\n        }\n    }\n\n    &__visual-link {\n        font-weight: 325;\n        font-size: 16px;\n        line-height: 24px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n\n        > * {\n            display: inline-block;\n        }\n\n        img {\n            margin-left: 12px;\n            transition: transform 0.3s ease-in-out;\n        }\n    }\n\n    a {\n        // color: $col_white;\n        //   color: $col_french_lilac;\n        //   text-decoration: none;\n\n        //   &:hover {\n        //     color: darken($col_french_lilac, 10%);\n        //     text-decoration: underline;\n        //   }\n    }\n\n    &__tcs {\n        position: absolute;\n        // display: inline-block;\n        // display: flex;\n        // justify-content: flex-start;\n\n        // display: inline-block;\n        // width: 100%;\n        // text-align: left;\n        // flex-direction: column;\n        // align-content: center;\n        // text-align: center;\n\n        // div:first-of-type {\n        //   width: 184px;\n        // }\n\n        // position: relative;\n\n        a {\n            color: $col_white;\n            bottom: 0;\n            // transform: translateY(-1.5rem);\n\n            display: inline-block;\n            text-decoration: none;\n            width: auto;\n            // position: absolute;\n            @media (min-width: sm2) {\n                // position: relative;\n                // transform: translateY(-2.5rem);\n            }\n\n            &:hover {\n                text-decoration: underline;\n            }\n        }\n    }\n\n    @media (min-width: 460px) {\n        &__inner-wrapper {\n            padding-top: 2rem;\n            padding-bottom: 2rem;\n        }\n\n        &__tcs,\n        &__anchor-inner {\n            column-gap: 12px;\n            flex-direction: row;\n            justify-content: center;\n            align-items: center;\n            align-content: center;\n            text-align: left;\n        }\n\n        &__visual-link {\n            font-weight: 325;\n            font-size: 16px;\n            line-height: 24px;\n            display: flex;\n            align-items: center;\n            justify-content: flex-start;\n        }\n    }\n\n    @media (min-width: 768px) {\n        &__tcs,\n        &__anchor-inner {\n            // justify-content: space-around;\n            column-gap: 64px;\n        }\n    }\n    // @media( min-width: md2) {\n    // }\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/tables.scss":
/*!******************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/tables.scss ***!
  \******************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.table-wrapper {
  margin: 1rem 0;
}
.table-wrapper table.rsllott {
  border-radius: 4px;
  border-collapse: separate;
  border: 1px solid #9caac5;
  overflow: hidden;
}
.table-wrapper table.rsllott tr:first-child th,
.table-wrapper table.rsllott tr:first-child td {
  border-top: none;
}
.table-wrapper table.rsllott tr:first-child th:first-child {
  border-radius: 4px 0 0 0;
}
.table-wrapper table.rsllott tr:first-child td {
  border-radius: 0 4px 0;
}
.table-wrapper table.rsllott tr:first-child th,
.table-wrapper table.rsllott tr:first-child td {
  border-top: none;
}
.table-wrapper table.rsllott tr:first-child th:last-child,
.table-wrapper table.rsllott tr:first-child td:last-child {
  border-right: none;
}
.table-wrapper table.rsllott tr th,
.table-wrapper table.rsllott tr td {
  border-bottom: none;
}
.table-wrapper table.rsllott tr th {
  border-left: none;
}
.table-wrapper table.rsllott tr td {
  border-left: none;
}
.table-wrapper table.rsllott tr td:last-child {
  border-right: none;
}
.table-wrapper table.rsllott tr td:first-child {
  border-left: none;
}
.table-wrapper table.rsllott tr:last-child th,
.table-wrapper table.rsllott tr:last-child td {
  border-bottom: none;
}
.table-wrapper table.rsllott.theme--blue {
  border-color: #95b9cd;
}
.table-wrapper table.rsllott.theme--purple {
  border-color: #a757c2;
}
.table-wrapper.connected table.rsllott {
  border-radius: 0;
}
.table-wrapper.connected table.rsllott:first-child {
  border-radius: 4px 4px 0 0;
}
.table-wrapper.connected table.rsllott:first-child tr:first-child td {
  border-right: none;
}
.table-wrapper.connected table.rsllott tr {
  border-radius: 0;
}
.table-wrapper.connected table.rsllott tr:first-child th {
  border-radius: 0;
}
.table-wrapper.connected table.rsllott tr:first-child td {
  border-radius: 0;
}
.table-wrapper.connected table.rsllott tr:last-child th {
  border-radius: 0;
}
.table-wrapper.connected table.rsllott tr:last-child td {
  border-radius: 0;
}
.table-wrapper.connected table.rsllott:last-child {
  border-radius: 0 0 4px 4px;
}
.table-wrapper.connected table.rsllott:last-child tr:first-child th, .table-wrapper.connected table.rsllott:last-child tr:last-child th {
  border-radius: 0;
}
.table-wrapper.connected table.rsllott:last-child tr:first-child td, .table-wrapper.connected table.rsllott:last-child tr:last-child td {
  border-radius: 0;
}

table.rsllott {
  border-spacing: 0;
  margin-top: 0.5rem;
  margin-bottom: 0.5rem;
  width: 100%;
  max-width: 100%;
  border-collapse: collapse;
  table-layout: fixed;
}
table.rsllott tbody {
  border-collapse: collapse;
}
table.rsllott th,
table.rsllott td {
  padding: 0.5rem 0.5rem 0.5rem 0.5rem;
  border: 1px solid #9caac5;
}
table.rsllott th,
table.rsllott td,
table.rsllott th p,
table.rsllott th strong,
table.rsllott th a,
table.rsllott td p,
table.rsllott td strong,
table.rsllott td a {
  font-size: 13px;
  line-height: 19.5px;
  vertical-align: top;
}
table.rsllott tr,
table.rsllott th {
  border-collapse: collapse;
}
table.rsllott th {
  background-color: #d0d7e5;
  font-family: sans-serif;
  text-align: left;
}
table.rsllott tr {
  background-color: #fff;
}
table.rsllott.align--vertical.alt-rows tr:nth-child(even) {
  background-color: #fff;
}
table.rsllott.align--vertical.alt-rows tr:nth-child(odd) {
  background-color: #f0f3f8;
}
table.rsllott.alt-rows tr:nth-child(even) {
  background-color: #f0f3f8;
}
table.theme--blue th,
table.theme--blue td {
  border-color: #95b9cd;
}
table.theme--blue th {
  background-color: #c6d8e2;
}
table.theme--blue.align--vertical.alt-rows tr:nth-child(even) {
  background-color: #fff;
}
table.theme--blue.align--vertical.alt-rows tr:nth-child(odd) {
  background-color: #f2f7f9;
}
table.theme--blue.alt-rows tr:nth-child(even) {
  background-color: #f2f7f9;
}
table.theme--purple.align--vertical.alt-rows tr:nth-child(even) {
  background-color: #fff;
}
table.theme--purple.align--vertical.alt-rows tr:nth-child(odd) {
  background-color: #fcf2ff;
}
table.theme--purple.alt-rows tr:nth-child(even) {
  background-color: #fcf2ff;
}
table.theme--purple th,
table.theme--purple td {
  border-color: #a757c2;
}
table.theme--purple th {
  background-color: #e0beeb;
}
table.col-1-small th,
table.col-1-small td {
  width: auto;
}
table.col-1-small th:first-child,
table.col-1-small td:first-child {
  width: 120px;
}
table.col-1-medium th:first-child,
table.col-1-medium td:first-child {
  width: 180px;
}
table.col-1-large th:first-child,
table.col-1-large td:first-child {
  width: 224px;
}
table.align--vertical tbody {
  width: 100%;
}
table.align--vertical th {
  border-right: none;
}
table.align--vertical td {
  border-left: none;
}
table.align--vertical tr:not(:first-child) {
  width: 100%;
}

.fe-demo-wrapper__separator {
  height: 5px;
  width: 100%;
  margin-top: 3rem;
  margin-bottom: 2rem;
  background-color: #a757c2;
}`, "",{"version":3,"sources":["webpack://./src/tables.scss"],"names":[],"mappings":"AA+IA;EACI,cAAA;AA9IJ;AAgJI;EACI,kBAAA;EACA,yBAAA;EACA,yBAAA;EACA,gBAAA;AA9IR;AAiJY;;EAEI,gBAAA;AA/IhB;AAkJY;EACI,wBAAA;AAhJhB;AAmJY;EACI,sBAAA;AAjJhB;AAuJgB;;EAEI,gBAAA;AArJpB;AA0JoB;;EACI,kBAAA;AAvJxB;AA4JY;;EAEI,mBAAA;AA1JhB;AA6JY;EACI,iBAAA;AA3JhB;AA8JY;EACI,iBAAA;AA5JhB;AA8JgB;EACI,kBAAA;AA5JpB;AAgKY;EACI,iBAAA;AA9JhB;AAkKgB;;EAEI,mBAAA;AAhKpB;AAsKY;EACI,qBAxHM;AA5CtB;AAuKY;EACI,qBA7GD;AAxDf;AA2KQ;EAWI,gBAAA;AAnLZ;AAyKY;EACI,0BAAA;AAvKhB;AA0KoB;EACI,kBAAA;AAxKxB;AA+KY;EAWI,gBAAA;AAvLhB;AA8KoB;EACI,gBAAA;AA5KxB;AA+KoB;EACI,gBAAA;AA7KxB;AAoLoB;EACI,gBAAA;AAlLxB;AAqLoB;EACI,gBAAA;AAnLxB;AAwLY;EACI,0BAAA;AAtLhB;AA2LwB;EACI,gBAAA;AAzL5B;AA4LwB;EACI,gBAAA;AA1L5B;;AAoMI;EACI,iBAAA;EACA,kBAAA;EACA,qBAAA;EACA,WAAA;EACA,eAAA;EACA,yBAAA;EACA,mBAAA;AAjMR;AAmMQ;EACI,yBAAA;AAjMZ;AAoMQ;;EAEI,oCAAA;EACA,yBAAA;AAlMZ;AAqMQ;;;;;;;;EAQI,eAAA;EACA,mBAAA;EACA,mBAAA;AAnMZ;AAsMQ;;EAEI,yBAAA;AApMZ;AAuMQ;EACI,yBAlLE;EAmLF,uBAAA;EACA,gBAAA;AArMZ;AAwMQ;EACI,sBAAA;AAtMZ;AA0MY;EACI,sBA/SJ;AAuGZ;AA2MY;EACI,yBA1OD;AAiCf;AA6MQ;EACI,yBA/OG;AAoCf;AAiNY;;EAEI,qBA9PM;AA+CtB;AAkNY;EACI,yBA1RgB;AA0EhC;AAoNgB;EACI,sBAzUR;AAuHZ;AAqNgB;EACI,yBArSH;AAkFjB;AAuNY;EACI,yBA1SC;AAqFjB;AA2NgB;EACI,sBAzVR;AAgIZ;AA4NgB;EACI,yBAjRJ;AAuDhB;AA8NY;EACI,yBAtRA;AA0DhB;AA+NY;;EAEI,qBAtRD;AAyDf;AAgOY;EACI,yBA7RG;AA+DnB;AAoOQ;;EAEI,WAAA;AAlOZ;AAoOY;;EACI,YAAA;AAjOhB;AAyOY;;EACI,YAAA;AAtOhB;AA8OY;;EACI,YAAA;AA3OhB;AAiPQ;EACI,WAAA;AA/OZ;AAkPQ;EACI,kBAAA;AAhPZ;AAmPQ;EACI,iBAAA;AAjPZ;AAoPQ;EACI,WAAA;AAlPZ;;AAuPA;EACI,WAAA;EACA,WAAA;EACA,gBAAA;EACA,mBAAA;EACA,yBApVW;AAgGf","sourcesContent":["$col_base: #606060;\n$col_black: #000;\n$col_grey_30: #edebe9;\n$col_faded_grey: #a19f9d;\n$col_prim_hover: #bc2130;\n$col_prim_navy: #002b60;\n$col_prim_red: #ca2535;\n$col_prim_yellow: #fdb924;\n$col_prim_blue: #006fba;\n$col_prim_teal: #009dca;\n$col_prim_green: #6b7b4a;\n$col_prim_purple: #4b3166;\n$col_prim_orange: #ff7e2f;\n$col_accent_teal: #009fb8;\n$col_accent_purple: #4b3166;\n$col_accent_orange: #ff7e2f;\n$col_accent_green: #0b703d;\n$col_accent_grey: #696969;\n$col_yellow: #faaf30;\n$col_yellow_vis_vis: #ffeea4;\n$col_yellow_milk_punch: #fff7d2;\n$col_yellow_my_sin: #ffb31c;\n$col_winwin_blue: #114168;\n$col_secondary_grey: #605e5c;\n$col_light_grey: #d2d0ce;\n$col_paragraph: #3b3a39;\n$col_modal_grey: #414042;\n$col_white: #fff;\n$col_grey: #eee;\n$col_dark_grey: #959595;\n$col_darker_grey: #9ea9b6;\n$col_grey_90: #605e5c;\n$col_grey_background: #f4f4f4;\n$col_grey_border: #d3d3d3;\n$col_footer_text: #fff;\n$col_footer_hover: #99aabf;\n$col_light_yellow: #fff2df;\n$col_prim_red_hover: #e52535;\n$light_lilac_background: #ddd4e3;\n$col_teal_overlay: rgba(25, 178, 202, 0.8);\n$col_red_overlay: rgba(202, 37, 53, 0.8);\n$col_grey_text: rgba(0, 0, 0, 0.85);\n$col_lite_grey_text: rgba(0, 0, 0, 0.6);\n$col_blue: #034e71;\n$col_grey_granite: #575757;\n$col_RSL_primary: #0c2748;\n$col_base_purple: #552873;\n$col_spanish_green: #179447;\n$col_gold: #d5a664;\n$col_lite_red: #ffebed;\n$col_alice_blue: #edf5ff;\n$col_orange: #f4881f;\n$col_lighter_rajah: #f5c173;\n$col_silver: #c4c4c4;\n$col_cloud: #c8c6c4;\n$col_whiskey_yellow: #d5a563;\n$col_dixie_yellow: #e99516;\n$col_affair_purple: #77538f;\n$col_willow_brook_green: #dbe8d9;\n$palm_leaf_green: #13390d;\n$col_Botticelli: #dae4ef;\n$col_dell_green: #256a19;\n$col_black_squeeze: #eaeff7;\n$col_pampas_grey: #faf9f8;\n$col_anakiwa_blue: #85ceff;\n$col_dodger_blue: #0c9dff;\n$fuchsia_blue: #8a3dbd;\n$catskill_white: #f2f7f9;\n$rajah_yellow: #ffd51c;\n$col_botticelli_secondary_blue: #c6d8e2;\n$col_botticelli_blue: #d0d7e5;\n$col_mercury: #e3e3e3;\n$col_my_sin: #ffb31c;\n$col_milk_punch: #fff7d2;\n\n// Form variables\n$border-col: #ddd;\n$bg-col: #fafafa;\n$label-col: #666;\n$placeholder-col: #767676; //lightest possible grey that passes accessibility\n$input-bg-col: #fff;\n$input-text-col: $col_prim_navy;\n$text-col: #212121;\n$col-anchor: #2162ae;\n$col-border-grey: #e1dfdd;\n$password_strength_green: #2b811d;\n$password_strength_red: #d50000;\n$password_strength_line_green: #64dd17;\n$password_strength_line_yellow: #ffc400;\n$password_strength_line_grey: #e0e0e0;\n$password_strength_line_red: #ff1744;\n$blue_rajah: #005b8d;\n$rock_blue: #9caac5;\n$rock_blue_variation: #95b9cd;\n$col_chestnut_rose: #cf5449;\n$col_vanilla_ice: #f3d4d2;\n$lynch_blue: #64708e;\n$col_deep_sea: #008666;\n$col_well_read: #ba2f3d;\n$col_red_ribbon: #f4273b;\n$yellow_rajah: #f0f3f8;\n$col_lochmara: #0081c8;\n$pacific_blue: #0098c8;\n$white-pointer: #fcf2ff;\n$col_light_wisteria: #c38bd7;\n$col_french_lilac: #e0beeb;\n$col_astral: #327ba3;\n$hippie_blue: #639ab8;\n$col_amethyst: #a757c2;\n$milk_punch: #fff7d2;\n$my_sin: #ffb31c;\n$aero_blue: #d2ffe4;\n\n// 2023 RSL Lottery\n$purple_seance: #8a23ae;\n$trans_white: #fff9;\n\n// Box shadows\n$red_box_shadow: 0 4px 8px rgba(202, 37, 53, 0.25);\n$dark_blue_box_shadow: 0 4px 8px rgba(0, 91, 141, 0.25);\n$purple_dark_box-shadow: 0 4px 8px rgba(138, 35, 174, 0.25);\n$yellow_box_shadow: 0 4px 8px rgba(255, 213, 28, 0.25);\n$green_box_shadow: 0 4px 8px rgba(0, 134, 102, 0.25);\n$mono_dark_box_shadow: 0 4px 8px rgba(65, 64, 66, 0.25);\n\n// Linear gradients\n$red_gradient: linear-gradient(45deg, $col_well_read 0%, $col_red_ribbon 100%);\n$blue_dark_gradient: linear-gradient(\n    49deg,\n    #005b8d 20.83%,\n    #0081c8 79.69%,\n    #0098c8 100%\n);\n$purple_dark_gradient: linear-gradient(\n    47deg,\n    #552873 19.79%,\n    $fuchsia_blue 100%\n);\n$yellow_gradient: linear-gradient(47deg, #ffd51c 19.79%, #ffb31c 100%);\n$green_gradient: linear-gradient(47deg, #008666 19.79%, #0ea781 100%);\n// My membership\n$card_border: #d0d7e5;\n\n.table-wrapper {\n    margin: 1rem 0;\n\n    table.rsllott {\n        border-radius: 4px;\n        border-collapse: separate;\n        border: 1px solid $rock_blue;\n        overflow: hidden;\n\n        tr:first-child {\n            th,\n            td {\n                border-top: none;\n            }\n\n            th:first-child {\n                border-radius: 4px 0 0 0;\n            }\n\n            td {\n                border-radius: 0 4px 0;\n            }\n        }\n\n        tr {\n            &:first-child {\n                th,\n                td {\n                    border-top: none;\n                }\n\n                th,\n                td {\n                    &:last-child {\n                        border-right: none;\n                    }\n                }\n            }\n\n            th,\n            td {\n                border-bottom: none;\n            }\n\n            th {\n                border-left: none;\n            }\n\n            td {\n                border-left: none;\n\n                &:last-child {\n                    border-right: none;\n                }\n            }\n\n            td:first-child {\n                border-left: none;\n            }\n\n            &:last-child {\n                th,\n                td {\n                    border-bottom: none;\n                }\n            }\n        }\n\n        &.theme {\n            &--blue {\n                border-color: $rock_blue_variation;\n            }\n\n            &--purple {\n                border-color: $col_amethyst;\n            }\n        }\n    }\n\n    &.connected {\n        table.rsllott {\n            &:first-child {\n                border-radius: 4px 4px 0 0;\n\n                tr:first-child {\n                    td {\n                        border-right: none;\n                    }\n                }\n            }\n\n            border-radius: 0;\n\n            tr {\n                &:first-child {\n                    th {\n                        border-radius: 0;\n                    }\n\n                    td {\n                        border-radius: 0;\n                    }\n                }\n\n                border-radius: 0;\n\n                &:last-child {\n                    th {\n                        border-radius: 0;\n                    }\n\n                    td {\n                        border-radius: 0;\n                    }\n                }\n            }\n\n            &:last-child {\n                border-radius: 0 0 4px 4px;\n\n                tr {\n                    &:first-child,\n                    &:last-child {\n                        th {\n                            border-radius: 0;\n                        }\n\n                        td {\n                            border-radius: 0;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\ntable {\n    &.rsllott {\n        border-spacing: 0;\n        margin-top: 0.5rem;\n        margin-bottom: 0.5rem;\n        width: 100%;\n        max-width: 100%;\n        border-collapse: collapse;\n        table-layout: fixed;\n\n        tbody {\n            border-collapse: collapse;\n        }\n\n        th,\n        td {\n            padding: 0.5rem 0.5rem 0.5rem 0.5rem;\n            border: 1px solid $rock_blue;\n        }\n\n        th,\n        td,\n        th p,\n        th strong,\n        th a,\n        td p,\n        td strong,\n        td a {\n            font-size: 13px;\n            line-height: 19.5px;\n            vertical-align: top;\n        }\n\n        tr,\n        th {\n            border-collapse: collapse;\n        }\n\n        th {\n            background-color: $card_border;\n            font-family: sans-serif;\n            text-align: left;\n        }\n\n        tr {\n            background-color: #fff;\n        }\n\n        &.align--vertical.alt-rows tr {\n            &:nth-child(even) {\n                background-color: $col_white;\n            }\n\n            &:nth-child(odd) {\n                background-color: $yellow_rajah;\n            }\n        }\n\n        &.alt-rows tr:nth-child(even) {\n            background-color: $yellow_rajah;\n        }\n    }\n\n    &.theme {\n        &--blue {\n            th,\n            td {\n                border-color: $rock_blue_variation;\n            }\n\n            th {\n                background-color: $col_botticelli_secondary_blue;\n            }\n\n            &.align--vertical.alt-rows tr {\n                &:nth-child(even) {\n                    background-color: $col_white;\n                }\n\n                &:nth-child(odd) {\n                    background-color: $catskill_white;\n                }\n            }\n\n            &.alt-rows tr:nth-child(even) {\n                background-color: $catskill_white;\n            }\n        }\n\n        &--purple {\n            &.align--vertical.alt-rows tr {\n                &:nth-child(even) {\n                    background-color: $col_white;\n                }\n\n                &:nth-child(odd) {\n                    background-color: $white-pointer;\n                }\n            }\n\n            &.alt-rows tr:nth-child(even) {\n                background-color: $white-pointer;\n            }\n\n            th,\n            td {\n                border-color: $col_amethyst;\n            }\n\n            th {\n                background-color: $col_french_lilac;\n            }\n        }\n    }\n\n    &.col-1-small {\n        th,\n        td {\n            width: auto;\n\n            &:first-child {\n                width: 120px;\n            }\n        }\n    }\n\n    &.col-1-medium {\n        th,\n        td {\n            &:first-child {\n                width: 180px;\n            }\n        }\n    }\n\n    &.col-1-large {\n        th,\n        td {\n            &:first-child {\n                width: 224px;\n            }\n        }\n    }\n\n    &.align--vertical {\n        tbody {\n            width: 100%;\n        }\n\n        th {\n            border-right: none;\n        }\n\n        td {\n            border-left: none;\n        }\n\n        tr:not(:first-child) {\n            width: 100%;\n        }\n    }\n}\n\n.fe-demo-wrapper__separator {\n    height: 5px;\n    width: 100%;\n    margin-top: 3rem;\n    margin-bottom: 2rem;\n    background-color: $col_amethyst;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = [];

  // return the list of modules as css string
  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";
      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }
      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }
      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }
      content += cssWithMappingToString(item);
      if (needLayer) {
        content += "}";
      }
      if (item[2]) {
        content += "}";
      }
      if (item[4]) {
        content += "}";
      }
      return content;
    }).join("");
  };

  // import a list of modules into the list
  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }
    var alreadyImportedModules = {};
    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];
        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }
    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);
      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }
      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }
      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }
      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }
      list.push(item);
    }
  };
  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/getUrl.js":
/*!********************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/getUrl.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (url, options) {
  if (!options) {
    options = {};
  }
  if (!url) {
    return url;
  }
  url = String(url.__esModule ? url.default : url);

  // If url is already wrapped in quotes, remove them
  if (/^['"].*['"]$/.test(url)) {
    url = url.slice(1, -1);
  }
  if (options.hash) {
    url += options.hash;
  }

  // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls
  if (/["'() \t\n]|(%20)/.test(url) || options.needQuotes) {
    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, "\\n"), "\"");
  }
  return url;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];
  if (!cssMapping) {
    return content;
  }
  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    return [content].concat([sourceMapping]).join("\n");
  }
  return [content].join("\n");
};

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.7.0
 * https://jquery.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2023-05-11T18:29Z
 */
( function( global, factory ) {

	"use strict";

	if (  true && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket trac-14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var flat = arr.flat ? function( array ) {
	return arr.flat.call( array );
} : function( array ) {
	return arr.concat.apply( [], array );
};


var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

		// Support: Chrome <=57, Firefox <=52
		// In some browsers, typeof returns "function" for HTML <object> elements
		// (i.e., `typeof document.createElement( "object" ) === "function"`).
		// We don't want to classify *any* DOM node as a function.
		// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
		// Plus for old WebKit, typeof returns "function" for HTML collections
		// (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
		return typeof obj === "function" && typeof obj.nodeType !== "number" &&
			typeof obj.item !== "function";
	};


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};


var document = window.document;



	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var version = "3.7.0",

	rhtmlSuffix = /HTML$/i,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	even: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return ( i + 1 ) % 2;
		} ) );
	},

	odd: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return i % 2;
		} ) );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a provided context; falls back to the global one
	// if not specified.
	globalEval: function( code, options, doc ) {
		DOMEval( code, { nonce: options && options.nonce }, doc );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},


	// Retrieve the text value of an array of DOM nodes
	text: function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {

			// If no nodeType, this is expected to be an array
			while ( ( node = elem[ i++ ] ) ) {

				// Do not traverse comment nodes
				ret += jQuery.text( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			return elem.textContent;
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}

		// Do not include comment or processing instruction nodes

		return ret;
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
						[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	isXMLDoc: function( elem ) {
		var namespace = elem && elem.namespaceURI,
			docElem = elem && ( elem.ownerDocument || elem ).documentElement;

		// Assume HTML when documentElement doesn't yet exist, such as inside
		// document fragments.
		return !rhtmlSuffix.test( namespace || docElem && docElem.nodeName || "HTML" );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return flat( ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( _i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}


function nodeName( elem, name ) {

	return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

}
var pop = arr.pop;


var sort = arr.sort;


var splice = arr.splice;


var whitespace = "[\\x20\\t\\r\\n\\f]";


var rtrimCSS = new RegExp(
	"^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$",
	"g"
);




// Note: an element does not contain itself
jQuery.contains = function( a, b ) {
	var bup = b && b.parentNode;

	return a === bup || !!( bup && bup.nodeType === 1 && (

		// Support: IE 9 - 11+
		// IE doesn't have `contains` on SVG.
		a.contains ?
			a.contains( bup ) :
			a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
	) );
};




// CSS string/identifier serialization
// https://drafts.csswg.org/cssom/#common-serializing-idioms
var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;

function fcssescape( ch, asCodePoint ) {
	if ( asCodePoint ) {

		// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
		if ( ch === "\0" ) {
			return "\uFFFD";
		}

		// Control characters and (dependent upon position) numbers get escaped as code points
		return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
	}

	// Other potentially-special ASCII characters get backslash-escaped
	return "\\" + ch;
}

jQuery.escapeSelector = function( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
};




var preferredDoc = document,
	pushNative = push;

( function() {

var i,
	Expr,
	outermostContext,
	sortInput,
	hasDuplicate,
	push = pushNative,

	// Local document vars
	document,
	documentElement,
	documentIsHTML,
	rbuggyQSA,
	matches,

	// Instance-specific data
	expando = jQuery.expando,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|" +
		"loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +

		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
		whitespace + "*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +

		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rleadingCombinator = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" +
		whitespace + "*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		ID: new RegExp( "^#(" + identifier + ")" ),
		CLASS: new RegExp( "^\\.(" + identifier + ")" ),
		TAG: new RegExp( "^(" + identifier + "|[*])" ),
		ATTR: new RegExp( "^" + attributes ),
		PSEUDO: new RegExp( "^" + pseudos ),
		CHILD: new RegExp(
			"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
				whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
				whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		bool: new RegExp( "^(?:" + booleans + ")$", "i" ),

		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		needsContext: new RegExp( "^" + whitespace +
			"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// https://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		if ( nonHex ) {

			// Strip the backslash prefix from a non-hex escape sequence
			return nonHex;
		}

		// Replace a hexadecimal escape sequence with the encoded Unicode code point
		// Support: IE <=11+
		// For values outside the Basic Multilingual Plane (BMP), manually construct a
		// surrogate pair
		return high < 0 ?
			String.fromCharCode( high + 0x10000 ) :
			String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes; see `setDocument`.
	// Support: IE 9 - 11+, Edge 12 - 18+
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE/Edge.
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && nodeName( elem, "fieldset" );
		},
		{ dir: "parentNode", next: "legend" }
	);

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		( arr = slice.call( preferredDoc.childNodes ) ),
		preferredDoc.childNodes
	);

	// Support: Android <=4.0
	// Detect silently failing push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = {
		apply: function( target, els ) {
			pushNative.apply( target, slice.call( els ) );
		},
		call: function( target ) {
			pushNative.apply( target, slice.call( arguments, 1 ) );
		}
	};
}

function find( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {
		setDocument( context );
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

				// ID selector
				if ( ( m = match[ 1 ] ) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( ( elem = context.getElementById( m ) ) ) {

							// Support: IE 9 only
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								push.call( results, elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE 9 only
						// getElementById can match elements by name instead of ID
						if ( newContext && ( elem = newContext.getElementById( m ) ) &&
							find.contains( context, elem ) &&
							elem.id === m ) {

							push.call( results, elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[ 2 ] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( ( m = match[ 3 ] ) && context.getElementsByClassName ) {
					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( !nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// The technique has to be used as well when a leading combinator is used
				// as such selectors are not recognized by querySelectorAll.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 &&
					( rdescend.test( selector ) || rleadingCombinator.test( selector ) ) ) {

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;

					// We can use :scope instead of the ID hack if the browser
					// supports it & if we're not changing the context.
					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when
					// strict-comparing two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( newContext != context || !support.scope ) {

						// Capture the context ID, setting it first if necessary
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = jQuery.escapeSelector( nid );
						} else {
							context.setAttribute( "id", ( nid = expando ) );
						}
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector( groups[ i ] );
					}
					newSelector = groups.join( "," );
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrimCSS, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {

		// Use (key + " ") to avoid collision with native prototype properties
		// (see https://github.com/jquery/sizzle/issues/157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {

			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return ( cache[ key + " " ] = value );
	}
	return cache;
}

/**
 * Mark a function for special use by jQuery selector module
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement( "fieldset" );

	try {
		return !!fn( el );
	} catch ( e ) {
		return false;
	} finally {

		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}

		// release memory in IE
		el = null;
	}
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		return nodeName( elem, "input" ) && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		return ( nodeName( elem, "input" ) || nodeName( elem, "button" ) ) &&
			elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11+
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					elem.isDisabled !== !disabled &&
						inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction( function( argument ) {
		argument = +argument;
		return markFunction( function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
					seed[ j ] = !( matches[ j ] = seed[ j ] );
				}
			}
		} );
	} );
}

/**
 * Checks a node for validity as a jQuery selector context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [node] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
function setDocument( node ) {
	var subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	documentElement = document.documentElement;
	documentIsHTML = !jQuery.isXMLDoc( document );

	// Support: iOS 7 only, IE 9 - 11+
	// Older browsers didn't support unprefixed `matches`.
	matches = documentElement.matches ||
		documentElement.webkitMatchesSelector ||
		documentElement.msMatchesSelector;

	// Support: IE 9 - 11+, Edge 12 - 18+
	// Accessing iframe documents after unload throws "permission denied" errors (see trac-13936)
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( preferredDoc != document &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Support: IE 9 - 11+, Edge 12 - 18+
		subWindow.addEventListener( "unload", unloadHandler );
	}

	// Support: IE <10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert( function( el ) {
		documentElement.appendChild( el ).id = jQuery.expando;
		return !document.getElementsByName ||
			!document.getElementsByName( jQuery.expando ).length;
	} );

	// Support: IE 9 only
	// Check to see if it's possible to do matchesSelector
	// on a disconnected node.
	support.disconnectedMatch = assert( function( el ) {
		return matches.call( el, "*" );
	} );

	// Support: IE 9 - 11+, Edge 12 - 18+
	// IE/Edge don't support the :scope pseudo-class.
	support.scope = assert( function() {
		return document.querySelectorAll( ":scope" );
	} );

	// Support: Chrome 105 - 111 only, Safari 15.4 - 16.3 only
	// Make sure the `:has()` argument is parsed unforgivingly.
	// We include `*` in the test to detect buggy implementations that are
	// _selectively_ forgiving (specifically when the list includes at least
	// one valid selector).
	// Note that we treat complete lack of support for `:has()` as if it were
	// spec-compliant support, which is fine because use of `:has()` in such
	// environments will fail in the qSA path and fall back to jQuery traversal
	// anyway.
	support.cssHas = assert( function() {
		try {
			document.querySelector( ":has(*,:jqfake)" );
			return false;
		} catch ( e ) {
			return true;
		}
	} );

	// ID filter and find
	if ( support.getById ) {
		Expr.filter.ID = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find.ID = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter.ID =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode( "id" );
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find.ID = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode( "id" );
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( ( elem = elems[ i++ ] ) ) {
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find.TAG = function( tag, context ) {
		if ( typeof context.getElementsByTagName !== "undefined" ) {
			return context.getElementsByTagName( tag );

		// DocumentFragment nodes don't have gEBTN
		} else {
			return context.querySelectorAll( tag );
		}
	};

	// Class
	Expr.find.CLASS = function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	rbuggyQSA = [];

	// Build QSA regex
	// Regex strategy adopted from Diego Perini
	assert( function( el ) {

		var input;

		documentElement.appendChild( el ).innerHTML =
			"<a id='" + expando + "' href='' disabled='disabled'></a>" +
			"<select id='" + expando + "-\r\\' disabled='disabled'>" +
			"<option selected=''></option></select>";

		// Support: iOS <=7 - 8 only
		// Boolean attributes and "value" are not treated correctly in some XML documents
		if ( !el.querySelectorAll( "[selected]" ).length ) {
			rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
		}

		// Support: iOS <=7 - 8 only
		if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
			rbuggyQSA.push( "~=" );
		}

		// Support: iOS 8 only
		// https://bugs.webkit.org/show_bug.cgi?id=136851
		// In-page `selector#id sibling-combinator selector` fails
		if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
			rbuggyQSA.push( ".#.+[+~]" );
		}

		// Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
		// In some of the document kinds, these selectors wouldn't work natively.
		// This is probably OK but for backwards compatibility we want to maintain
		// handling them through jQuery traversal in jQuery 3.x.
		if ( !el.querySelectorAll( ":checked" ).length ) {
			rbuggyQSA.push( ":checked" );
		}

		// Support: Windows 8 Native Apps
		// The type and name attributes are restricted during .innerHTML assignment
		input = document.createElement( "input" );
		input.setAttribute( "type", "hidden" );
		el.appendChild( input ).setAttribute( "name", "D" );

		// Support: IE 9 - 11+
		// IE's :disabled selector does not pick up the children of disabled fieldsets
		// Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
		// In some of the document kinds, these selectors wouldn't work natively.
		// This is probably OK but for backwards compatibility we want to maintain
		// handling them through jQuery traversal in jQuery 3.x.
		documentElement.appendChild( el ).disabled = true;
		if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
			rbuggyQSA.push( ":enabled", ":disabled" );
		}

		// Support: IE 11+, Edge 15 - 18+
		// IE 11/Edge don't find elements on a `[name='']` query in some cases.
		// Adding a temporary attribute to the document before the selection works
		// around the issue.
		// Interestingly, IE 10 & older don't seem to have the issue.
		input = document.createElement( "input" );
		input.setAttribute( "name", "" );
		el.appendChild( input );
		if ( !el.querySelectorAll( "[name='']" ).length ) {
			rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
				whitespace + "*(?:''|\"\")" );
		}
	} );

	if ( !support.cssHas ) {

		// Support: Chrome 105 - 110+, Safari 15.4 - 16.3+
		// Our regular `try-catch` mechanism fails to detect natively-unsupported
		// pseudo-classes inside `:has()` (such as `:has(:contains("Foo"))`)
		// in browsers that parse the `:has()` argument as a forgiving selector list.
		// https://drafts.csswg.org/selectors/#relational now requires the argument
		// to be parsed unforgivingly, but browsers have not yet fully adjusted.
		rbuggyQSA.push( ":has" );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

			// Choose the first element that is related to our preferred document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( a === document || a.ownerDocument == preferredDoc &&
				find.contains( preferredDoc, a ) ) {
				return -1;
			}

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( b === document || b.ownerDocument == preferredDoc &&
				find.contains( preferredDoc, b ) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	};

	return document;
}

find.matches = function( expr, elements ) {
	return find( expr, null, null, elements );
};

find.matchesSelector = function( elem, expr ) {
	setDocument( elem );

	if ( documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyQSA || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||

					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch ( e ) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return find( expr, document, null, [ elem ] ).length > 0;
};

find.contains = function( context, elem ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( context.ownerDocument || context ) != document ) {
		setDocument( context );
	}
	return jQuery.contains( context, elem );
};


find.attr = function( elem, name ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( elem.ownerDocument || elem ) != document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Don't get fooled by Object.prototype properties (see trac-13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	if ( val !== undefined ) {
		return val;
	}

	return elem.getAttribute( name );
};

find.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
jQuery.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	//
	// Support: Android <=4.0+
	// Testing for detecting duplicates is unpredictable so instead assume we can't
	// depend on duplicate detection in all browsers without a stable sort.
	hasDuplicate = !support.sortStable;
	sortInput = !support.sortStable && slice.call( results, 0 );
	sort.call( results, sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			splice.call( results, duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

jQuery.fn.uniqueSort = function() {
	return this.pushStack( jQuery.uniqueSort( slice.apply( this ) ) );
};

Expr = jQuery.expr = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		ATTR: function( match ) {
			match[ 1 ] = match[ 1 ].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[ 3 ] = ( match[ 3 ] || match[ 4 ] || match[ 5 ] || "" )
				.replace( runescape, funescape );

			if ( match[ 2 ] === "~=" ) {
				match[ 3 ] = " " + match[ 3 ] + " ";
			}

			return match.slice( 0, 4 );
		},

		CHILD: function( match ) {

			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[ 1 ] = match[ 1 ].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* requires argument
				if ( !match[ 3 ] ) {
					find.error( match[ 0 ] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[ 4 ] = +( match[ 4 ] ?
					match[ 5 ] + ( match[ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" )
				);
				match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

			// other types prohibit arguments
			} else if ( match[ 3 ] ) {
				find.error( match[ 0 ] );
			}

			return match;
		},

		PSEUDO: function( match ) {
			var excess,
				unquoted = !match[ 6 ] && match[ 2 ];

			if ( matchExpr.CHILD.test( match[ 0 ] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[ 3 ] ) {
				match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&

				// Get excess from tokenize (recursively)
				( excess = tokenize( unquoted, true ) ) &&

				// advance to the next closing parenthesis
				( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

				// excess is a negative index
				match[ 0 ] = match[ 0 ].slice( 0, excess );
				match[ 2 ] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		TAG: function( nodeNameSelector ) {
			var expectedNodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() {
					return true;
				} :
				function( elem ) {
					return nodeName( elem, expectedNodeName );
				};
		},

		CLASS: function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				( pattern = new RegExp( "(^|" + whitespace + ")" + className +
					"(" + whitespace + "|$)" ) ) &&
				classCache( className, function( elem ) {
					return pattern.test(
						typeof elem.className === "string" && elem.className ||
							typeof elem.getAttribute !== "undefined" &&
								elem.getAttribute( "class" ) ||
							""
					);
				} );
		},

		ATTR: function( name, operator, check ) {
			return function( elem ) {
				var result = find.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				if ( operator === "=" ) {
					return result === check;
				}
				if ( operator === "!=" ) {
					return result !== check;
				}
				if ( operator === "^=" ) {
					return check && result.indexOf( check ) === 0;
				}
				if ( operator === "*=" ) {
					return check && result.indexOf( check ) > -1;
				}
				if ( operator === "$=" ) {
					return check && result.slice( -check.length ) === check;
				}
				if ( operator === "~=" ) {
					return ( " " + result.replace( rwhitespace, " " ) + " " )
						.indexOf( check ) > -1;
				}
				if ( operator === "|=" ) {
					return result === check || result.slice( 0, check.length + 1 ) === check + "-";
				}

				return false;
			};
		},

		CHILD: function( type, what, _argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, _context, xml ) {
					var cache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( ( node = node[ dir ] ) ) {
									if ( ofType ?
										nodeName( node, name ) :
										node.nodeType === 1 ) {

										return false;
									}
								}

								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || ( parent[ expando ] = {} );
							cache = outerCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								( diff = nodeIndex = 0 ) || start.pop() ) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {

							// Use previously-cached element index if available
							if ( useCache ) {
								outerCache = elem[ expando ] || ( elem[ expando ] = {} );
								cache = outerCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {

								// Use the same loop as above to seek `elem` from the start
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									if ( ( ofType ?
										nodeName( node, name ) :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] ||
												( node[ expando ] = {} );
											outerCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		PSEUDO: function( pseudo, argument ) {

			// pseudo-class names are case-insensitive
			// https://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					find.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as jQuery does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction( function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[ i ] );
							seed[ idx ] = !( matches[ idx ] = matched[ i ] );
						}
					} ) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {

		// Potentially complex pseudos
		not: markFunction( function( selector ) {

			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrimCSS, "$1" ) );

			return matcher[ expando ] ?
				markFunction( function( seed, matches, _context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( ( elem = unmatched[ i ] ) ) {
							seed[ i ] = !( matches[ i ] = elem );
						}
					}
				} ) :
				function( elem, _context, xml ) {
					input[ 0 ] = elem;
					matcher( input, null, xml, results );

					// Don't keep the element
					// (see https://github.com/jquery/sizzle/issues/299)
					input[ 0 ] = null;
					return !results.pop();
				};
		} ),

		has: markFunction( function( selector ) {
			return function( elem ) {
				return find( selector, elem ).length > 0;
			};
		} ),

		contains: markFunction( function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || jQuery.text( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// https://www.w3.org/TR/selectors/#lang-pseudo
		lang: markFunction( function( lang ) {

			// lang value must be a valid identifier
			if ( !ridentifier.test( lang || "" ) ) {
				find.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				return false;
			};
		} ),

		// Miscellaneous
		target: function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		root: function( elem ) {
			return elem === documentElement;
		},

		focus: function( elem ) {
			return elem === safeActiveElement() &&
				document.hasFocus() &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Boolean properties
		enabled: createDisabledPseudo( false ),
		disabled: createDisabledPseudo( true ),

		checked: function( elem ) {

			// In CSS3, :checked should return both checked and selected elements
			// https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			return ( nodeName( elem, "input" ) && !!elem.checked ) ||
				( nodeName( elem, "option" ) && !!elem.selected );
		},

		selected: function( elem ) {

			// Support: IE <=11+
			// Accessing the selectedIndex property
			// forces the browser to treat the default option as
			// selected when in an optgroup.
			if ( elem.parentNode ) {
				// eslint-disable-next-line no-unused-expressions
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		empty: function( elem ) {

			// https://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		parent: function( elem ) {
			return !Expr.pseudos.empty( elem );
		},

		// Element/input types
		header: function( elem ) {
			return rheader.test( elem.nodeName );
		},

		input: function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		button: function( elem ) {
			return nodeName( elem, "input" ) && elem.type === "button" ||
				nodeName( elem, "button" );
		},

		text: function( elem ) {
			var attr;
			return nodeName( elem, "input" ) && elem.type === "text" &&

				// Support: IE <10 only
				// New HTML5 attribute values (e.g., "search") appear
				// with elem.type === "text"
				( ( attr = elem.getAttribute( "type" ) ) == null ||
					attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		first: createPositionalPseudo( function() {
			return [ 0 ];
		} ),

		last: createPositionalPseudo( function( _matchIndexes, length ) {
			return [ length - 1 ];
		} ),

		eq: createPositionalPseudo( function( _matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		} ),

		even: createPositionalPseudo( function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		odd: createPositionalPseudo( function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		lt: createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i;

			if ( argument < 0 ) {
				i = argument + length;
			} else if ( argument > length ) {
				i = length;
			} else {
				i = argument;
			}

			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		gt: createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} )
	}
};

Expr.pseudos.nth = Expr.pseudos.eq;

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
			if ( match ) {

				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[ 0 ].length ) || soFar;
			}
			groups.push( ( tokens = [] ) );
		}

		matched = false;

		// Combinators
		if ( ( match = rleadingCombinator.exec( soFar ) ) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,

				// Cast descendant combinators to space
				type: match[ 0 ].replace( rtrimCSS, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				( match = preFilters[ type ]( match ) ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	if ( parseOnly ) {
		return soFar.length;
	}

	return soFar ?
		find.error( selector ) :

		// Cache the tokens
		tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[ i ].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?

		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( ( elem = elem[ dir ] ) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || ( elem[ expando ] = {} );

						if ( skip && nodeName( elem, skip ) ) {
							elem = elem[ dir ] || elem;
						} else if ( ( oldCache = outerCache[ key ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return ( newCache[ 2 ] = oldCache[ 2 ] );
						} else {

							// Reuse newcache so results back-propagate to previous elements
							outerCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[ i ]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[ 0 ];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		find( selector, contexts[ i ], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( ( elem = unmatched[ i ] ) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( function( seed, results, context, xml ) {
		var temp, i, elem, matcherOut,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed ||
				multipleContexts( selector || "*",
					context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems;

		if ( matcher ) {

			// If we have a postFinder, or filtered seed, or non-seed postFilter
			// or preexisting results,
			matcherOut = postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

				// ...intermediate processing is necessary
				[] :

				// ...otherwise use results directly
				results;

			// Find primary matches
			matcher( matcherIn, matcherOut, context, xml );
		} else {
			matcherOut = matcherIn;
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( ( elem = temp[ i ] ) ) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {

					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) ) {

							// Restore matcherIn since elem is not yet a final match
							temp.push( ( matcherIn[ i ] = elem ) );
						}
					}
					postFinder( null, ( matcherOut = [] ), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( ( elem = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf.call( seed, elem ) : preMap[ i ] ) > -1 ) {

						seed[ temp ] = !( results[ temp ] = elem );
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	} );
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[ 0 ].type ],
		implicitRelative = leadingRelative || Expr.relative[ " " ],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			var ret = ( !leadingRelative && ( xml || context != outermostContext ) ) || (
				( checkContext = context ).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );

			// Avoid hanging onto element
			// (see https://github.com/jquery/sizzle/issues/299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {

				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(

						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 )
							.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrimCSS, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find.TAG( "*", outermost ),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.length;

			if ( outermost ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				outermostContext = context == document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: iOS <=7 - 9 only
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching
			// elements by id. (see trac-14142)
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( ( matcher = elementMatchers[ j++ ] ) ) {
						if ( matcher( elem, context || document, xml ) ) {
							push.call( results, elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {

					// They will have gone through all possible matchers
					if ( ( elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( ( matcher = setMatchers[ j++ ] ) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {

					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					jQuery.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

function compile( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {

		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[ i ] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector,
			matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
}

/**
 * A low-level selection function that works with jQuery's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with jQuery selector compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( ( selector = compiled.selector || selector ) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[ 0 ] = match[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			context = ( Expr.find.ID(
				token.matches[ 0 ].replace( runescape, funescape ),
				context
			) || [] )[ 0 ];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr.needsContext.test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[ i ];

			// Abort if we hit a combinator
			if ( Expr.relative[ ( type = token.type ) ] ) {
				break;
			}
			if ( ( find = Expr.find[ type ] ) ) {

				// Search, expanding context for leading sibling combinators
				if ( ( seed = find(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].type ) &&
						testContext( context.parentNode ) || context
				) ) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
}

// One-time assignments

// Support: Android <=4.0 - 4.1+
// Sort stability
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Initialize against the default document
setDocument();

// Support: Android <=4.0 - 4.1+
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert( function( el ) {

	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
} );

jQuery.find = find;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.unique = jQuery.uniqueSort;

// These have always been private, but they used to be documented
// as part of Sizzle so let's maintain them in the 3.x line
// for backwards compatibility purposes.
find.compile = compile;
find.select = select;
find.setDocument = setDocument;

find.escape = jQuery.escapeSelector;
find.getText = jQuery.text;
find.isXML = jQuery.isXMLDoc;
find.selectors = jQuery.expr;
find.support = jQuery.support;
find.uniqueSort = jQuery.uniqueSort;

	/* eslint-enable */

} )();


var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)
	// Strict HTML recognition (trac-11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to jQuery#find
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, _i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, _i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, _i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( elem.contentDocument != null &&

			// Support: IE 11+
			// <object> elements with no `data` attribute has an object
			// `contentDocument` with a `null` prototype.
			getProto( elem.contentDocument ) ) {

			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( _i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.error );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the error, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getErrorHook ) {
									process.error = jQuery.Deferred.getErrorHook();

								// The deprecated alias of the above. While the name suggests
								// returning the stack, not an error instance, jQuery just passes
								// it directly to `console.warn` so both will work; an instance
								// just better cooperates with source maps.
								} else if ( jQuery.Deferred.getStackHook ) {
									process.error = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the primary Deferred
			primary = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						primary.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( primary.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return primary.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );
		}

		return primary.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

// If `jQuery.Deferred.getErrorHook` is defined, `asyncError` is an error
// captured before the async barrier to get the original error cause
// which may otherwise be hidden.
jQuery.Deferred.exceptionHook = function( error, asyncError ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message,
			error.stack, asyncError );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See trac-6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, _key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( _all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (trac-9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see trac-8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (trac-14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (trac-11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (trac-14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Support: IE <=9 only
	// IE <=9 replaces <option> tags with their contents when inserted outside of
	// the select element.
	div.innerHTML = "<option></option>";
	support.option = !!div.lastChild;
} )();


// We have to close these tags to support XHTML (trac-13200)
var wrapMap = {

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: IE <=9 only
if ( !support.option ) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (trac-15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (trac-12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Only attach events to objects that accept data
		if ( !acceptData( elem ) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = Object.create( null );
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( nativeEvent ),

			handlers = (
				dataPriv.get( this, "events" ) || Object.create( null )
			)[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (trac-13208)
				// Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (trac-13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
						return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
						return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", true );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, isSetup ) {

	// Missing `isSetup` indicates a trigger call, which must force setup through jQuery.event.add
	if ( !isSetup ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				if ( !saved ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					this[ type ]();
					result = dataPriv.get( this, type );
					dataPriv.set( this, type, false );

					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();

						return result;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering
				// the native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved ) {

				// ...and capture the result
				dataPriv.set( this, type, jQuery.event.trigger(
					saved[ 0 ],
					saved.slice( 1 ),
					this
				) );

				// Abort handling of the native event by all jQuery handlers while allowing
				// native handlers on the same element to run. On target, this is achieved
				// by stopping immediate propagation just on the jQuery event. However,
				// the native event is re-wrapped by a jQuery one on each level of the
				// propagation so the only way to stop it for jQuery is to stop it for
				// everyone via native `stopPropagation()`. This is not a problem for
				// focus/blur which don't bubble, but it does also stop click on checkboxes
				// and radios. We accept this limitation.
				event.stopPropagation();
				event.isImmediatePropagationStopped = returnTrue;
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (trac-504, trac-13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,
	which: true
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {

	function focusMappedHandler( nativeEvent ) {
		if ( document.documentMode ) {

			// Support: IE 11+
			// Attach a single focusin/focusout handler on the document while someone wants
			// focus/blur. This is because the former are synchronous in IE while the latter
			// are async. In other browsers, all those handlers are invoked synchronously.

			// `handle` from private data would already wrap the event, but we need
			// to change the `type` here.
			var handle = dataPriv.get( this, "handle" ),
				event = jQuery.event.fix( nativeEvent );
			event.type = nativeEvent.type === "focusin" ? "focus" : "blur";
			event.isSimulated = true;

			// First, handle focusin/focusout
			handle( nativeEvent );

			// ...then, handle focus/blur
			//
			// focus/blur don't bubble while focusin/focusout do; simulate the former by only
			// invoking the handler at the lower level.
			if ( event.target === event.currentTarget ) {

				// The setup part calls `leverageNative`, which, in turn, calls
				// `jQuery.event.add`, so event handle will already have been set
				// by this point.
				handle( event );
			}
		} else {

			// For non-IE browsers, attach a single capturing handler on the document
			// while someone wants focusin/focusout.
			jQuery.event.simulate( delegateType, nativeEvent.target,
				jQuery.event.fix( nativeEvent ) );
		}
	}

	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			var attaches;

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, true );

			if ( document.documentMode ) {

				// Support: IE 9 - 11+
				// We use the same native handler for focusin & focus (and focusout & blur)
				// so we need to coordinate setup & teardown parts between those events.
				// Use `delegateType` as the key as `type` is already used by `leverageNative`.
				attaches = dataPriv.get( this, delegateType );
				if ( !attaches ) {
					this.addEventListener( delegateType, focusMappedHandler );
				}
				dataPriv.set( this, delegateType, ( attaches || 0 ) + 1 );
			} else {

				// Return false to allow normal processing in the caller
				return false;
			}
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		teardown: function() {
			var attaches;

			if ( document.documentMode ) {
				attaches = dataPriv.get( this, delegateType ) - 1;
				if ( !attaches ) {
					this.removeEventListener( delegateType, focusMappedHandler );
					dataPriv.remove( this, delegateType );
				} else {
					dataPriv.set( this, delegateType, attaches );
				}
			} else {

				// Return false to indicate standard teardown should be applied
				return false;
			}
		},

		// Suppress native focus or blur if we're currently inside
		// a leveraged native-event stack
		_default: function( event ) {
			return dataPriv.get( event.target, type );
		},

		delegateType: delegateType
	};

	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	//
	// Support: IE 9 - 11+
	// To preserve relative focusin/focus & focusout/blur event order guaranteed on the 3.x branch,
	// attach a single handler for both events in IE.
	jQuery.event.special[ delegateType ] = {
		setup: function() {

			// Handle: regular nodes (via `this.ownerDocument`), window
			// (via `this.document`) & document (via `this`).
			var doc = this.ownerDocument || this.document || this,
				dataHolder = document.documentMode ? this : doc,
				attaches = dataPriv.get( dataHolder, delegateType );

			// Support: IE 9 - 11+
			// We use the same native handler for focusin & focus (and focusout & blur)
			// so we need to coordinate setup & teardown parts between those events.
			// Use `delegateType` as the key as `type` is already used by `leverageNative`.
			if ( !attaches ) {
				if ( document.documentMode ) {
					this.addEventListener( delegateType, focusMappedHandler );
				} else {
					doc.addEventListener( type, focusMappedHandler, true );
				}
			}
			dataPriv.set( dataHolder, delegateType, ( attaches || 0 ) + 1 );
		},
		teardown: function() {
			var doc = this.ownerDocument || this.document || this,
				dataHolder = document.documentMode ? this : doc,
				attaches = dataPriv.get( dataHolder, delegateType ) - 1;

			if ( !attaches ) {
				if ( document.documentMode ) {
					this.removeEventListener( delegateType, focusMappedHandler );
				} else {
					doc.removeEventListener( type, focusMappedHandler, true );
				}
				dataPriv.remove( dataHolder, delegateType );
			} else {
				dataPriv.set( dataHolder, delegateType, attaches );
			}
		}
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,

	rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.get( src );
		events = pdataOld.events;

		if ( events ) {
			dataPriv.remove( dest, "handle events" );

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = flat( args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (trac-8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								}, doc );
							}
						} else {

							// Unwrap a CDATA section containing script contents. This shouldn't be
							// needed as in XML documents they're already not visible when
							// inspecting element contents and in HTML documents they have no
							// meaning but we're preserving that logic for backwards compatibility.
							// This will be removed completely in 4.0. See gh-4904.
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html;
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew jQuery#find here for performance reasons:
			// https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var rcustomProp = /^--/;


var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.call( elem );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableTrDimensionsVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (trac-8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		},

		// Support: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Behavior in IE 9 is more subtle than in newer versions & it passes
		// some versions of this test; make sure not to make it pass there!
		//
		// Support: Firefox 70+
		// Only Firefox includes border widths
		// in computed dimensions. (gh-4529)
		reliableTrDimensions: function() {
			var table, tr, trChild, trStyle;
			if ( reliableTrDimensionsVal == null ) {
				table = document.createElement( "table" );
				tr = document.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
				tr.style.cssText = "border:1px solid";

				// Support: Chrome 86+
				// Height set through cssText does not get applied.
				// Computed height then comes back as 0.
				tr.style.height = "1px";
				trChild.style.height = "9px";

				// Support: Android 8 Chrome 86+
				// In our bodyBackground.html iframe,
				// display for all div elements is set to "inline",
				// which causes a problem only in Android 8 Chrome 86.
				// Ensuring the div is display: block
				// gets around this issue.
				trChild.style.display = "block";

				documentElement
					.appendChild( table )
					.appendChild( tr )
					.appendChild( trChild );

				trStyle = window.getComputedStyle( tr );
				reliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +
					parseInt( trStyle.borderTopWidth, 10 ) +
					parseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;

				documentElement.removeChild( table );
			}
			return reliableTrDimensionsVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		isCustomProp = rcustomProp.test( name ),

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, trac-12537)
	//   .css('--customProperty) (gh-3144)
	if ( computed ) {

		// Support: IE <=9 - 11+
		// IE only supports `"float"` in `getPropertyValue`; in computed styles
		// it's only available as `"cssFloat"`. We no longer modify properties
		// sent to `.css()` apart from camelCasing, so we need to check both.
		// Normally, this would create difference in behavior: if
		// `getPropertyValue` returns an empty string, the value returned
		// by `.css()` would be `undefined`. This is usually the case for
		// disconnected elements. However, in IE even disconnected elements
		// with no styles return `"none"` for `getPropertyValue( "float" )`
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( isCustomProp && ret ) {

			// Support: Firefox 105+, Chrome <=105+
			// Spec requires trimming whitespace for custom properties (gh-4926).
			// Firefox only trims leading whitespace. Chrome just collapses
			// both leading & trailing whitespace to a single space.
			//
			// Fall back to `undefined` if empty string returned.
			// This collapses a missing definition with property defined
			// and set to an empty string but there's no standard API
			// allowing us to differentiate them without a performance penalty
			// and returning `undefined` aligns with older jQuery.
			//
			// rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED
			// as whitespace while CSS does not, but this is not a problem
			// because CSS preprocessing replaces them with U+000A LINE FEED
			// (which *is* CSS whitespace)
			// https://www.w3.org/TR/css-syntax-3/#input-preprocessing
			ret = ret.replace( rtrimCSS, "$1" ) || undefined;
		}

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( _elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0,
		marginDelta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		// Count margin delta separately to only add it after scroll gutter adjustment.
		// This is needed to make negative margins work with `outerHeight( true )` (gh-3982).
		if ( box === "margin" ) {
			marginDelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta + marginDelta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Support: IE 9 - 11 only
	// Use offsetWidth/offsetHeight for when box sizing is unreliable.
	// In those cases, the computed value can be trusted to be border-box.
	if ( ( !support.boxSizingReliable() && isBorderBox ||

		// Support: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Interestingly, in some cases IE 9 doesn't suffer from this issue.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		val === "auto" ||

		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

		// Make sure the element is visible & connected
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		animationIterationCount: true,
		aspectRatio: true,
		borderImageSlice: true,
		columnCount: true,
		flexGrow: true,
		flexShrink: true,
		fontWeight: true,
		gridArea: true,
		gridColumn: true,
		gridColumnEnd: true,
		gridColumnStart: true,
		gridRow: true,
		gridRowEnd: true,
		gridRowStart: true,
		lineHeight: true,
		opacity: true,
		order: true,
		orphans: true,
		scale: true,
		widows: true,
		zIndex: true,
		zoom: true,

		// SVG-related
		fillOpacity: true,
		floodOpacity: true,
		stopOpacity: true,
		strokeMiterlimit: true,
		strokeOpacity: true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (trac-7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug trac-9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (trac-7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( _i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
					swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, dimension, extra );
					} ) :
					getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
			) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
				jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

				/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
					animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};

		doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// Use proper attribute retrieval (trac-12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classNames, cur, curValue, className, i, finalValue;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classNames = classesToArray( value );

		if ( classNames.length ) {
			return this.each( function() {
				curValue = getClass( this );
				cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					for ( i = 0; i < classNames.length; i++ ) {
						className = classNames[ i ];
						if ( cur.indexOf( " " + className + " " ) < 0 ) {
							cur += className + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						this.setAttribute( "class", finalValue );
					}
				}
			} );
		}

		return this;
	},

	removeClass: function( value ) {
		var classNames, cur, curValue, className, i, finalValue;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classNames = classesToArray( value );

		if ( classNames.length ) {
			return this.each( function() {
				curValue = getClass( this );

				// This expression is here for better compressibility (see addClass)
				cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					for ( i = 0; i < classNames.length; i++ ) {
						className = classNames[ i ];

						// Remove *all* instances
						while ( cur.indexOf( " " + className + " " ) > -1 ) {
							cur = cur.replace( " " + className + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						this.setAttribute( "class", finalValue );
					}
				}
			} );
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var classNames, className, i, self,
			type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		classNames = classesToArray( value );

		return this.each( function() {
			if ( isValidValue ) {

				// Toggle individual class names
				self = jQuery( this );

				for ( i = 0; i < classNames.length; i++ ) {
					className = classNames[ i ];

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (trac-14686, trac-14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (trac-2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion
var location = window.location;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, parserErrorElem;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {}

	parserErrorElem = xml && xml.getElementsByTagName( "parsererror" )[ 0 ];
	if ( !xml || parserErrorElem ) {
		jQuery.error( "Invalid XML: " + (
			parserErrorElem ?
				jQuery.map( parserErrorElem.childNodes, function( el ) {
					return el.textContent;
				} ).join( "\n" ) :
				data
		) );
	}
	return xml;
};


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (trac-9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || Object.create( null ) )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (trac-6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} ).filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} ).map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// trac-7653, trac-8125, trac-8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );

originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes trac-9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (trac-10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket trac-12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// trac-9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script but not if jsonp
			if ( !isSuccess &&
				jQuery.inArray( "script", s.dataTypes ) > -1 &&
				jQuery.inArray( "json", s.dataTypes ) < 0 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );


jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (trac-11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// trac-1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see trac-8605, trac-14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// trac-14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( {
		padding: "inner" + name,
		content: type,
		"": "outer" + name
	}, function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );

jQuery.each(
	( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	}
);




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
// Require that the "whitespace run" starts from a non-whitespace
// to avoid O(N^2) behavior when the engine would try matching "\s+$" at each space position.
var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "$1" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (trac-13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),

/***/ "./node_modules/lodash/lodash.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.21';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function',
      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */
  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  true && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim(string) {
    return string
      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
      : string;
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/\s/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Throw an error if a forbidden character was found in `variable`, to prevent
      // potential command injection attacks.
      else if (reForbiddenIdentifierChars.test(variable)) {
        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
      }

      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return baseTrim(string);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.slice(0, trimmedEndIndex(string) + 1);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else {}
}.call(this));


/***/ }),

/***/ "./src/navigation.scss":
/*!*****************************!*\
  !*** ./src/navigation.scss ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_navigation_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!../node_modules/sass-loader/dist/cjs.js!./navigation.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/navigation.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_navigation_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_navigation_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_navigation_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_navigation_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/style.css":
/*!***********************!*\
  !*** ./src/style.css ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!../node_modules/sass-loader/dist/cjs.js!./style.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/style.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/style.scss":
/*!************************!*\
  !*** ./src/style.scss ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_style_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!../node_modules/sass-loader/dist/cjs.js!./style.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/style.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_style_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_style_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_style_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_style_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/subscribe-now-panel.scss":
/*!**************************************!*\
  !*** ./src/subscribe-now-panel.scss ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_subscribe_now_panel_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!../node_modules/sass-loader/dist/cjs.js!./subscribe-now-panel.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/subscribe-now-panel.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_subscribe_now_panel_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_subscribe_now_panel_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_subscribe_now_panel_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_subscribe_now_panel_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/tables.scss":
/*!*************************!*\
  !*** ./src/tables.scss ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_tables_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!../node_modules/sass-loader/dist/cjs.js!./tables.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/tables.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_tables_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_tables_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_tables_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_tables_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";


var stylesInDOM = [];
function getIndexByIdentifier(identifier) {
  var result = -1;
  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }
  return result;
}
function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];
  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };
    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }
    identifiers.push(identifier);
  }
  return identifiers;
}
function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);
  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }
      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };
  return updater;
}
module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];
    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }
    var newLastIdentifiers = modulesToDom(newList, options);
    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];
      var _index = getIndexByIdentifier(_identifier);
      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();
        stylesInDOM.splice(_index, 1);
      }
    }
    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";


var memo = {};

/* istanbul ignore next  */
function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target);

    // Special case to return head of iframe instead of iframe itself
    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }
    memo[target] = styleTarget;
  }
  return memo[target];
}

/* istanbul ignore next  */
function insertBySelector(insert, style) {
  var target = getTarget(insert);
  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }
  target.appendChild(style);
}
module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}
module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;
  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}
module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";
  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }
  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }
  var needLayer = typeof obj.layer !== "undefined";
  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }
  css += obj.css;
  if (needLayer) {
    css += "}";
  }
  if (obj.media) {
    css += "}";
  }
  if (obj.supports) {
    css += "}";
  }
  var sourceMap = obj.sourceMap;
  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  }

  // For old IE
  /* istanbul ignore if  */
  options.styleTagTransform(css, styleElement, options.options);
}
function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }
  styleElement.parentNode.removeChild(styleElement);
}

/* istanbul ignore next  */
function domAPI(options) {
  if (typeof document === "undefined") {
    return {
      update: function update() {},
      remove: function remove() {}
    };
  }
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}
module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }
    styleElement.appendChild(document.createTextNode(css));
  }
}
module.exports = styleTagTransform;

/***/ }),

/***/ "./src/alert.js":
/*!**********************!*\
  !*** ./src/alert.js ***!
  \**********************/
/***/ (() => {

window.alertTest = function () {
    console.log("hello??");
    return {
        open: false,
        usedKeyboard: false,
        init() {
            this.$watch("open", (value) => {
                value && this.$refs.closeButton.focus();
                this.toggleOverlay();
            });
            this.toggleOverlay();
        },
        toggleOverlay() {
            document.body.classList[this.open ? "add" : "remove"](
                "h-screen",
                "overflow-hidden"
            );
        },
    };
};


/***/ }),

/***/ "./src/my-promises.js":
/*!****************************!*\
  !*** ./src/my-promises.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
    $(document).ready(function () {
        console.log("hi");
        const subscribePanel = $(".subscribe-now-panel");
        if (subscribePanel.length < 1) return;

        /* 
            get dom element with a class .subscribe-now-panel__tcs within subscribePanel,
            absolutely position this element 1 rem below the last child div-element of .subscribe-now-panel__column-right,
            recalculate this position on window resize.
        */

        const subscribePanelWidth = $(subscribePanel).width();
        const subscribePanelTcs = subscribePanel.find(
            ".subscribe-now-panel__tcs"
        );
        const subscribePanelTcsAnchor = subscribePanelTcs.find("a");

        // if (subscribePanelTcsAnchor) {
    });
}


/***/ }),

/***/ "./src/navigation-mobile.js":
/*!**********************************!*\
  !*** ./src/navigation-mobile.js ***!
  \**********************************/
/***/ (() => {

window.slideout = function () {
    return {
        open: false,
        usedKeyboard: false,
        init() {
            this.$watch("open", (value) => {
                value && this.$refs.closeButton.focus();
                this.toggleOverlay();
            });
            this.toggleOverlay();
        },
        toggleOverlay() {
            document.body.classList[this.open ? "add" : "remove"](
                "h-screen",
                "overflow-hidden"
            );
        },
    };
};

window.navToggle = function () {
    console.log("test");
    return {
        selected: null,
        usedKeyboard: false,
        init() {
            this.$watch("selected", (value) => {
                console.log("selected", value);
                // value && this.$refs.closeButton.focus();
                // this.toggleOverlay();
            });
            // this.toggleOverlay();
        },
        // toggleOverlay() {
        //     document.body.classList[this.open ? "add" : "remove"](
        //         "h-screen",
        //         "overflow-hidden"
        //     );
        // },
    };
};

window.navToggleTest = function () {
    console.log("navToggleTest");
    return {
        open: null,
        usedKeyboard: false,
        toggle() {
            this.$watch("open", (value) => {
                console.log("open", value);
                // value && this.$refs.closeButton.focus();
                // this.toggleOverlay();
                this.open = value;
            });
            console.log("desktop-toggle", this.open);
            // if (this.open) {
            //     return this.close();
            // }

            // this.$refs.button.focus();

            // this.open = true;
        },
        close(focusAfter) {
            //     console.log("desktop-toggle: close", this.open);
            //     console.log("focusAfter", focusAfter);
            //     if (!this.open) return;

            this.open = null;

            //     focusAfter && focusAfter.focus();
        },
    };
};


/***/ }),

/***/ "./src/print.js":
/*!**********************!*\
  !*** ./src/print.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ printMe)
/* harmony export */ });
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
function printMe() {
    console.log("I get called from print.js!");

    $(document).ready(function () {
        console.log("i just jQuery'd this: ", $(".hello")[0]);
    });
}


/***/ }),

/***/ "./src/subscribe-now-panel.js":
/*!************************************!*\
  !*** ./src/subscribe-now-panel.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _throttle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./throttle */ "./src/throttle.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
    $(document).ready(function () {
        // console.log("hi");
        const subscribePanel = $(".subscribe-now-panel");
        if (subscribePanel.length < 1) return;

        const appendDrawTerms = (el) => {
            const drawTerms = $(el).find(".subscribe-now-panel__tcs");
            const drawTermsAnchor = $(drawTerms).find("a");

            if (drawTermsAnchor) {
                if (window.matchMedia("(max-width: 460px)").matches) {
                    // $(drawTerms).css("transform")
                    if ($(drawTerms).css("transform") === "translateX(-50%)")
                        return;
                    $(drawTerms).css({
                        left: "50%",
                        bottom: "1.5rem",
                        top: "auto",
                        transform: "translateX(-50%)",
                    });
                } else {
                    const rightCol = $(el).find(
                        ".subscribe-now-panel__column-right"
                    );

                    if (rightCol.length < 1) return;

                    // const innerWrap = subscribePanel
                    //     .find(".subscribe-now-panel__inner-wrapper")
                    //     .css("padding-left");

                    // console.log("innerWrap", innerWrap);

                    const rightColLeftPos =
                        Math.round($(rightCol).position().left) + "px";

                    const rightColHeight = Math.round(
                        $(rightCol).outerHeight()
                    );

                    const rightColTopPos = Math.round(
                        $(rightCol).position().top
                    );
                    // let rightColXPos = Math.round(rightCol.offset().left - 8);
                    // console.log("rightColXPos", rightColXPos);

                    // console.log("rightColLeftPos", rightColLeftPos);
                    // console.log("$positionLeft", $(rightCol).position().left);
                    // console.log("$positionBott", $(rightCol).position().top);
                    // console.log("rightColHeight", rightColHeight);

                    // console.log('',
                    //     subscribePanel
                    //         .find(".subscribe-now-panel__anchor-inner")
                    //         .offset().left
                    // );
                    // console.log("rightColXPos", rightColXPos);
                    // console.log("rightColXPos", rightColHeight);
                    // console.log("innerWrap", innerWrap);
                    // console.log("innerWrap", rightCol.offset());
                    // console.log((innerWrap - rightColHeight) / 2);
                    // console.log("debouncedResizeHandler");

                    // save into const, a calculation of padding-left of .subscribe-now-panel__inner-wrapper

                    // get padding left amount of .subscribe-now-panel__inner-wrapper
                    //

                    if ($(drawTerms).css("transform") != "none")
                        $(drawTerms).removeAttr("style");

                    // return;
                    // $(drawTerms).attr("style") &&
                    //     $(drawTerms).removeAttr("style");

                    $(drawTerms).css({
                        left: rightColLeftPos,
                        top: rightColTopPos + rightColHeight - 20 + "px",
                    });

                    /*
                    $(drawTerms).css({
                        left: Math.round($(rightCol).position().left) + "px",
                        top:
                            Math.round($(rightCol).position().top) +
                            rightColHeight -
                            20 +
                            "px",
                        // top:
                        //     Math.round(rightCol.offset().top) +
                        //     rightColHeight +
                        //     "px",
                        // bottom: "initial",
                        // bottom:
                        //     (innerWrap - rightColHeight) / 2 +
                        //     "px",
                        // transform: "translateX(0%)",
                    });
                    */
                }

                // console.log("rightColXPos", rightColXPos);

                $(drawTermsAnchor).attr("style") &&
                    $(drawTermsAnchor).removeAttr("style");
            }
        };

        setTimeout(() => {
            $(subscribePanel).each((undefined, el) => {
                $(el).find(".subscribe-now-panel__tcs").length > 0 &&
                    appendDrawTerms(el);
            });
        }, 50);

        // add debounce to below function
        // function debounce(func, wait, immediate) {
        //     var timeout;
        //     return function () {
        //         var context = this,
        //             args = arguments;
        //         var later = function () {
        //             timeout = null;
        //             if (!immediate) func.apply(context, args);
        //         };
        //         var callNow = immediate && !timeout;
        //         clearTimeout(timeout);
        //         timeout = setTimeout(later, wait);
        //         if (callNow) func.apply(context, args);
        //     };
        // }

        const debouncedResizeHandler = (0,_throttle__WEBPACK_IMPORTED_MODULE_0__["default"])(function () {
            $(subscribePanel).each((undefined, el) => {
                $(el).find(".subscribe-now-panel__tcs").length > 0 &&
                    appendDrawTerms(el);
            });
        }, 100);

        $(window).on("resize", debouncedResizeHandler);

        // $(window).resize(function() {
        //   // const subscribePanel = $('.subscribe-now-panel');
        //   console.log('subscribe panel', subscribePanel);
        //   // if (subscribePanel.length < 1) return;

        //   $(subscribePanel).each((undefined, el) => {
        //     $(el).find('.subscribe-now-panel__tcs').length > 0 && appendDrawTerms(el);
        //   });
        // });
    });
}


/***/ }),

/***/ "./src/table-duplication-reformat.js":
/*!*******************************************!*\
  !*** ./src/table-duplication-reformat.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
    $(document).ready(function () {
        $("table.rsllott.vertical-table").each((i, table) => {
            let row = "";
            const tableRows = $(table).find("tr");
            let tableHeadings = $(table).find("tr th");
            let tableRowsData = tableRows.filter((i, el) =>
                i > 0 ? el : null
            );

            let tableClasses = $(table).attr("class");
            let tableDefaultClasses = ["d-none", "d-md-table"];

            // remove tableDefaultClasses strings from tableClasses string, if exists
            tableDefaultClasses.forEach((el) => {
                if (tableClasses.includes(el)) {
                    tableClasses = tableClasses.replace(el, "");
                    tableClasses;
                }
            });

            const isTableWrapper = $(table).parent().hasClass("table-wrapper");
            const isTableWrapperConnected = $(table)
                .parent()
                .hasClass("connected");

            const tableWrapper = document.createElement("div");

            // -- if tables connected -- wrap many tables in 1 div (table-wrapper)
            if (isTableWrapper) {
                tableWrapper.classList.add("table-wrapper");

                if (isTableWrapperConnected) {
                    tableWrapper.classList.add("connected");
                }
            }

            $(tableRowsData).each(function (i, el) {
                // -- if tables not connected -- wrap each table in an isolated div (table-wrapper)
                if (!isTableWrapper) {
                    tableWrapper = document.createElement("div");
                    tableWrapper.classList.add("table-wrapper");
                }

                const tableRowLen = tableRowsData.length - 1;
                const verticalTable = document.createElement("table");
                tableClasses += " d-md-none";
                tableClasses.split(" ").forEach((el) => {
                    if (el !== "") {
                        verticalTable.classList.add(el.replace(" ", ""));
                    }
                });

                $(tableRowLen).each(function (i) {
                    const tds = $(el).find("td");
                    row = "";

                    $(tds).each((i, el) => {
                        const firstItem = $(el)[0];
                        row +=
                            "<tr>" +
                            "<th>" +
                            $(tableHeadings[i]).html() +
                            "</th>" +
                            "<td>" +
                            $(firstItem).html() +
                            "</td></tr>";
                    });
                });

                $(verticalTable).html(row);
                $(tableWrapper).append(verticalTable);
                $(table).after(tableWrapper);
            });
        });
    });
}


/***/ }),

/***/ "./src/tailwind.js":
/*!*************************!*\
  !*** ./src/tailwind.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

(() => {
    var Sb = Object.create;
    var li = Object.defineProperty;
    var Cb = Object.getOwnPropertyDescriptor;
    var Ab = Object.getOwnPropertyNames;
    var _b = Object.getPrototypeOf,
        Eb = Object.prototype.hasOwnProperty;
    var uu = (i) => li(i, "__esModule", { value: !0 });
    var fu = (i) => {
        if (true) return __webpack_require__("./src sync recursive")(i);
        throw new Error('Dynamic require of "' + i + '" is not supported');
    };
    var C = (i, e) => () => (i && (e = i((i = 0))), e);
    var v = (i, e) => () => (
            e || i((e = { exports: {} }).exports, e), e.exports
        ),
        Ae = (i, e) => {
            uu(i);
            for (var t in e) li(i, t, { get: e[t], enumerable: !0 });
        },
        Ob = (i, e, t) => {
            if ((e && typeof e == "object") || typeof e == "function")
                for (let r of Ab(e))
                    !Eb.call(i, r) &&
                        r !== "default" &&
                        li(i, r, {
                            get: () => e[r],
                            enumerable: !(t = Cb(e, r)) || t.enumerable,
                        });
            return i;
        },
        K = (i) =>
            Ob(
                uu(
                    li(
                        i != null ? Sb(_b(i)) : {},
                        "default",
                        i && i.__esModule && "default" in i
                            ? { get: () => i.default, enumerable: !0 }
                            : { value: i, enumerable: !0 }
                    )
                ),
                i
            );
    var m,
        l = C(() => {
            m = { platform: "", env: {}, versions: { node: "14.17.6" } };
        });
    var Tb,
        te,
        ze = C(() => {
            l();
            (Tb = 0),
                (te = {
                    readFileSync: (i) => self[i] || "",
                    statSync: () => ({ mtimeMs: Tb++ }),
                    promises: {
                        readFile: (i) => Promise.resolve(self[i] || ""),
                    },
                });
        });
    var Xn = v((X5, pu) => {
        l();
        ("use strict");
        var cu = class {
            constructor(e = {}) {
                if (!(e.maxSize && e.maxSize > 0))
                    throw new TypeError(
                        "`maxSize` must be a number greater than 0"
                    );
                if (typeof e.maxAge == "number" && e.maxAge === 0)
                    throw new TypeError(
                        "`maxAge` must be a number greater than 0"
                    );
                (this.maxSize = e.maxSize),
                    (this.maxAge = e.maxAge || 1 / 0),
                    (this.onEviction = e.onEviction),
                    (this.cache = new Map()),
                    (this.oldCache = new Map()),
                    (this._size = 0);
            }
            _emitEvictions(e) {
                if (typeof this.onEviction == "function")
                    for (let [t, r] of e) this.onEviction(t, r.value);
            }
            _deleteIfExpired(e, t) {
                return typeof t.expiry == "number" && t.expiry <= Date.now()
                    ? (typeof this.onEviction == "function" &&
                          this.onEviction(e, t.value),
                      this.delete(e))
                    : !1;
            }
            _getOrDeleteIfExpired(e, t) {
                if (this._deleteIfExpired(e, t) === !1) return t.value;
            }
            _getItemValue(e, t) {
                return t.expiry ? this._getOrDeleteIfExpired(e, t) : t.value;
            }
            _peek(e, t) {
                let r = t.get(e);
                return this._getItemValue(e, r);
            }
            _set(e, t) {
                this.cache.set(e, t),
                    this._size++,
                    this._size >= this.maxSize &&
                        ((this._size = 0),
                        this._emitEvictions(this.oldCache),
                        (this.oldCache = this.cache),
                        (this.cache = new Map()));
            }
            _moveToRecent(e, t) {
                this.oldCache.delete(e), this._set(e, t);
            }
            *_entriesAscending() {
                for (let e of this.oldCache) {
                    let [t, r] = e;
                    this.cache.has(t) ||
                        (this._deleteIfExpired(t, r) === !1 && (yield e));
                }
                for (let e of this.cache) {
                    let [t, r] = e;
                    this._deleteIfExpired(t, r) === !1 && (yield e);
                }
            }
            get(e) {
                if (this.cache.has(e)) {
                    let t = this.cache.get(e);
                    return this._getItemValue(e, t);
                }
                if (this.oldCache.has(e)) {
                    let t = this.oldCache.get(e);
                    if (this._deleteIfExpired(e, t) === !1)
                        return this._moveToRecent(e, t), t.value;
                }
            }
            set(
                e,
                t,
                {
                    maxAge: r = this.maxAge === 1 / 0
                        ? void 0
                        : Date.now() + this.maxAge,
                } = {}
            ) {
                this.cache.has(e)
                    ? this.cache.set(e, { value: t, maxAge: r })
                    : this._set(e, { value: t, expiry: r });
            }
            has(e) {
                return this.cache.has(e)
                    ? !this._deleteIfExpired(e, this.cache.get(e))
                    : this.oldCache.has(e)
                    ? !this._deleteIfExpired(e, this.oldCache.get(e))
                    : !1;
            }
            peek(e) {
                if (this.cache.has(e)) return this._peek(e, this.cache);
                if (this.oldCache.has(e)) return this._peek(e, this.oldCache);
            }
            delete(e) {
                let t = this.cache.delete(e);
                return t && this._size--, this.oldCache.delete(e) || t;
            }
            clear() {
                this.cache.clear(), this.oldCache.clear(), (this._size = 0);
            }
            resize(e) {
                if (!(e && e > 0))
                    throw new TypeError(
                        "`maxSize` must be a number greater than 0"
                    );
                let t = [...this._entriesAscending()],
                    r = t.length - e;
                r < 0
                    ? ((this.cache = new Map(t)),
                      (this.oldCache = new Map()),
                      (this._size = t.length))
                    : (r > 0 && this._emitEvictions(t.slice(0, r)),
                      (this.oldCache = new Map(t.slice(r))),
                      (this.cache = new Map()),
                      (this._size = 0)),
                    (this.maxSize = e);
            }
            *keys() {
                for (let [e] of this) yield e;
            }
            *values() {
                for (let [, e] of this) yield e;
            }
            *[Symbol.iterator]() {
                for (let e of this.cache) {
                    let [t, r] = e;
                    this._deleteIfExpired(t, r) === !1 && (yield [t, r.value]);
                }
                for (let e of this.oldCache) {
                    let [t, r] = e;
                    this.cache.has(t) ||
                        (this._deleteIfExpired(t, r) === !1 &&
                            (yield [t, r.value]));
                }
            }
            *entriesDescending() {
                let e = [...this.cache];
                for (let t = e.length - 1; t >= 0; --t) {
                    let r = e[t],
                        [n, a] = r;
                    this._deleteIfExpired(n, a) === !1 && (yield [n, a.value]);
                }
                e = [...this.oldCache];
                for (let t = e.length - 1; t >= 0; --t) {
                    let r = e[t],
                        [n, a] = r;
                    this.cache.has(n) ||
                        (this._deleteIfExpired(n, a) === !1 &&
                            (yield [n, a.value]));
                }
            }
            *entriesAscending() {
                for (let [e, t] of this._entriesAscending()) yield [e, t.value];
            }
            get size() {
                if (!this._size) return this.oldCache.size;
                let e = 0;
                for (let t of this.oldCache.keys()) this.cache.has(t) || e++;
                return Math.min(this._size + e, this.maxSize);
            }
        };
        pu.exports = cu;
    });
    var du,
        hu = C(() => {
            l();
            du = (i) => i && i._hash;
        });
    function ui(i) {
        return du(i, { ignoreUnknown: !0 });
    }
    var mu = C(() => {
        l();
        hu();
    });
    function Xe(i) {
        if (((i = `${i}`), i === "0")) return "0";
        if (/^[+-]?(\d+|\d*\.\d+)(e[+-]?\d+)?(%|\w+)?$/.test(i))
            return i.replace(/^[+-]?/, (t) => (t === "-" ? "" : "-"));
        let e = ["var", "calc", "min", "max", "clamp"];
        for (let t of e) if (i.includes(`${t}(`)) return `calc(${i} * -1)`;
    }
    var fi = C(() => {
        l();
    });
    var gu,
        yu = C(() => {
            l();
            gu = [
                "preflight",
                "container",
                "accessibility",
                "pointerEvents",
                "visibility",
                "position",
                "inset",
                "isolation",
                "zIndex",
                "order",
                "gridColumn",
                "gridColumnStart",
                "gridColumnEnd",
                "gridRow",
                "gridRowStart",
                "gridRowEnd",
                "float",
                "clear",
                "margin",
                "boxSizing",
                "lineClamp",
                "display",
                "aspectRatio",
                "height",
                "maxHeight",
                "minHeight",
                "width",
                "minWidth",
                "maxWidth",
                "flex",
                "flexShrink",
                "flexGrow",
                "flexBasis",
                "tableLayout",
                "captionSide",
                "borderCollapse",
                "borderSpacing",
                "transformOrigin",
                "translate",
                "rotate",
                "skew",
                "scale",
                "transform",
                "animation",
                "cursor",
                "touchAction",
                "userSelect",
                "resize",
                "scrollSnapType",
                "scrollSnapAlign",
                "scrollSnapStop",
                "scrollMargin",
                "scrollPadding",
                "listStylePosition",
                "listStyleType",
                "listStyleImage",
                "appearance",
                "columns",
                "breakBefore",
                "breakInside",
                "breakAfter",
                "gridAutoColumns",
                "gridAutoFlow",
                "gridAutoRows",
                "gridTemplateColumns",
                "gridTemplateRows",
                "flexDirection",
                "flexWrap",
                "placeContent",
                "placeItems",
                "alignContent",
                "alignItems",
                "justifyContent",
                "justifyItems",
                "gap",
                "space",
                "divideWidth",
                "divideStyle",
                "divideColor",
                "divideOpacity",
                "placeSelf",
                "alignSelf",
                "justifySelf",
                "overflow",
                "overscrollBehavior",
                "scrollBehavior",
                "textOverflow",
                "hyphens",
                "whitespace",
                "wordBreak",
                "borderRadius",
                "borderWidth",
                "borderStyle",
                "borderColor",
                "borderOpacity",
                "backgroundColor",
                "backgroundOpacity",
                "backgroundImage",
                "gradientColorStops",
                "boxDecorationBreak",
                "backgroundSize",
                "backgroundAttachment",
                "backgroundClip",
                "backgroundPosition",
                "backgroundRepeat",
                "backgroundOrigin",
                "fill",
                "stroke",
                "strokeWidth",
                "objectFit",
                "objectPosition",
                "padding",
                "textAlign",
                "textIndent",
                "verticalAlign",
                "fontFamily",
                "fontSize",
                "fontWeight",
                "textTransform",
                "fontStyle",
                "fontVariantNumeric",
                "lineHeight",
                "letterSpacing",
                "textColor",
                "textOpacity",
                "textDecoration",
                "textDecorationColor",
                "textDecorationStyle",
                "textDecorationThickness",
                "textUnderlineOffset",
                "fontSmoothing",
                "placeholderColor",
                "placeholderOpacity",
                "caretColor",
                "accentColor",
                "opacity",
                "backgroundBlendMode",
                "mixBlendMode",
                "boxShadow",
                "boxShadowColor",
                "outlineStyle",
                "outlineWidth",
                "outlineOffset",
                "outlineColor",
                "ringWidth",
                "ringColor",
                "ringOpacity",
                "ringOffsetWidth",
                "ringOffsetColor",
                "blur",
                "brightness",
                "contrast",
                "dropShadow",
                "grayscale",
                "hueRotate",
                "invert",
                "saturate",
                "sepia",
                "filter",
                "backdropBlur",
                "backdropBrightness",
                "backdropContrast",
                "backdropGrayscale",
                "backdropHueRotate",
                "backdropInvert",
                "backdropOpacity",
                "backdropSaturate",
                "backdropSepia",
                "backdropFilter",
                "transitionProperty",
                "transitionDelay",
                "transitionDuration",
                "transitionTimingFunction",
                "willChange",
                "content",
            ];
        });
    function wu(i, e) {
        return i === void 0
            ? e
            : Array.isArray(i)
            ? i
            : [
                  ...new Set(
                      e
                          .filter((r) => i !== !1 && i[r] !== !1)
                          .concat(Object.keys(i).filter((r) => i[r] !== !1))
                  ),
              ];
    }
    var bu = C(() => {
        l();
    });
    var vu = {};
    Ae(vu, { default: () => _e });
    var _e,
        ci = C(() => {
            l();
            _e = new Proxy({}, { get: () => String });
        });
    function Kn(i, e, t) {
        (typeof m != "undefined" && m.env.JEST_WORKER_ID) ||
            (t && xu.has(t)) ||
            (t && xu.add(t),
            console.warn(""),
            e.forEach((r) => console.warn(i, "-", r)));
    }
    function Zn(i) {
        return _e.dim(i);
    }
    var xu,
        F,
        Ee = C(() => {
            l();
            ci();
            xu = new Set();
            F = {
                info(i, e) {
                    Kn(
                        _e.bold(_e.cyan("info")),
                        ...(Array.isArray(i) ? [i] : [e, i])
                    );
                },
                warn(i, e) {
                    ["content-problems"].includes(i) ||
                        Kn(
                            _e.bold(_e.yellow("warn")),
                            ...(Array.isArray(i) ? [i] : [e, i])
                        );
                },
                risk(i, e) {
                    Kn(
                        _e.bold(_e.magenta("risk")),
                        ...(Array.isArray(i) ? [i] : [e, i])
                    );
                },
            };
        });
    var ku = {};
    Ae(ku, { default: () => es });
    function nr({ version: i, from: e, to: t }) {
        F.warn(`${e}-color-renamed`, [
            `As of Tailwind CSS ${i}, \`${e}\` has been renamed to \`${t}\`.`,
            "Update your configuration file to silence this warning.",
        ]);
    }
    var es,
        ts = C(() => {
            l();
            Ee();
            es = {
                inherit: "inherit",
                current: "currentColor",
                transparent: "transparent",
                black: "#000",
                white: "#fff",
                slate: {
                    50: "#f8fafc",
                    100: "#f1f5f9",
                    200: "#e2e8f0",
                    300: "#cbd5e1",
                    400: "#94a3b8",
                    500: "#64748b",
                    600: "#475569",
                    700: "#334155",
                    800: "#1e293b",
                    900: "#0f172a",
                    950: "#020617",
                },
                gray: {
                    50: "#f9fafb",
                    100: "#f3f4f6",
                    200: "#e5e7eb",
                    300: "#d1d5db",
                    400: "#9ca3af",
                    500: "#6b7280",
                    600: "#4b5563",
                    700: "#374151",
                    800: "#1f2937",
                    900: "#111827",
                    950: "#030712",
                },
                zinc: {
                    50: "#fafafa",
                    100: "#f4f4f5",
                    200: "#e4e4e7",
                    300: "#d4d4d8",
                    400: "#a1a1aa",
                    500: "#71717a",
                    600: "#52525b",
                    700: "#3f3f46",
                    800: "#27272a",
                    900: "#18181b",
                    950: "#09090b",
                },
                neutral: {
                    50: "#fafafa",
                    100: "#f5f5f5",
                    200: "#e5e5e5",
                    300: "#d4d4d4",
                    400: "#a3a3a3",
                    500: "#737373",
                    600: "#525252",
                    700: "#404040",
                    800: "#262626",
                    900: "#171717",
                    950: "#0a0a0a",
                },
                stone: {
                    50: "#fafaf9",
                    100: "#f5f5f4",
                    200: "#e7e5e4",
                    300: "#d6d3d1",
                    400: "#a8a29e",
                    500: "#78716c",
                    600: "#57534e",
                    700: "#44403c",
                    800: "#292524",
                    900: "#1c1917",
                    950: "#0c0a09",
                },
                red: {
                    50: "#fef2f2",
                    100: "#fee2e2",
                    200: "#fecaca",
                    300: "#fca5a5",
                    400: "#f87171",
                    500: "#ef4444",
                    600: "#dc2626",
                    700: "#b91c1c",
                    800: "#991b1b",
                    900: "#7f1d1d",
                    950: "#450a0a",
                },
                orange: {
                    50: "#fff7ed",
                    100: "#ffedd5",
                    200: "#fed7aa",
                    300: "#fdba74",
                    400: "#fb923c",
                    500: "#f97316",
                    600: "#ea580c",
                    700: "#c2410c",
                    800: "#9a3412",
                    900: "#7c2d12",
                    950: "#431407",
                },
                amber: {
                    50: "#fffbeb",
                    100: "#fef3c7",
                    200: "#fde68a",
                    300: "#fcd34d",
                    400: "#fbbf24",
                    500: "#f59e0b",
                    600: "#d97706",
                    700: "#b45309",
                    800: "#92400e",
                    900: "#78350f",
                    950: "#451a03",
                },
                yellow: {
                    50: "#fefce8",
                    100: "#fef9c3",
                    200: "#fef08a",
                    300: "#fde047",
                    400: "#facc15",
                    500: "#eab308",
                    600: "#ca8a04",
                    700: "#a16207",
                    800: "#854d0e",
                    900: "#713f12",
                    950: "#422006",
                },
                lime: {
                    50: "#f7fee7",
                    100: "#ecfccb",
                    200: "#d9f99d",
                    300: "#bef264",
                    400: "#a3e635",
                    500: "#84cc16",
                    600: "#65a30d",
                    700: "#4d7c0f",
                    800: "#3f6212",
                    900: "#365314",
                    950: "#1a2e05",
                },
                green: {
                    50: "#f0fdf4",
                    100: "#dcfce7",
                    200: "#bbf7d0",
                    300: "#86efac",
                    400: "#4ade80",
                    500: "#22c55e",
                    600: "#16a34a",
                    700: "#15803d",
                    800: "#166534",
                    900: "#14532d",
                    950: "#052e16",
                },
                emerald: {
                    50: "#ecfdf5",
                    100: "#d1fae5",
                    200: "#a7f3d0",
                    300: "#6ee7b7",
                    400: "#34d399",
                    500: "#10b981",
                    600: "#059669",
                    700: "#047857",
                    800: "#065f46",
                    900: "#064e3b",
                    950: "#022c22",
                },
                teal: {
                    50: "#f0fdfa",
                    100: "#ccfbf1",
                    200: "#99f6e4",
                    300: "#5eead4",
                    400: "#2dd4bf",
                    500: "#14b8a6",
                    600: "#0d9488",
                    700: "#0f766e",
                    800: "#115e59",
                    900: "#134e4a",
                    950: "#042f2e",
                },
                cyan: {
                    50: "#ecfeff",
                    100: "#cffafe",
                    200: "#a5f3fc",
                    300: "#67e8f9",
                    400: "#22d3ee",
                    500: "#06b6d4",
                    600: "#0891b2",
                    700: "#0e7490",
                    800: "#155e75",
                    900: "#164e63",
                    950: "#083344",
                },
                sky: {
                    50: "#f0f9ff",
                    100: "#e0f2fe",
                    200: "#bae6fd",
                    300: "#7dd3fc",
                    400: "#38bdf8",
                    500: "#0ea5e9",
                    600: "#0284c7",
                    700: "#0369a1",
                    800: "#075985",
                    900: "#0c4a6e",
                    950: "#082f49",
                },
                blue: {
                    50: "#eff6ff",
                    100: "#dbeafe",
                    200: "#bfdbfe",
                    300: "#93c5fd",
                    400: "#60a5fa",
                    500: "#3b82f6",
                    600: "#2563eb",
                    700: "#1d4ed8",
                    800: "#1e40af",
                    900: "#1e3a8a",
                    950: "#172554",
                },
                indigo: {
                    50: "#eef2ff",
                    100: "#e0e7ff",
                    200: "#c7d2fe",
                    300: "#a5b4fc",
                    400: "#818cf8",
                    500: "#6366f1",
                    600: "#4f46e5",
                    700: "#4338ca",
                    800: "#3730a3",
                    900: "#312e81",
                    950: "#1e1b4b",
                },
                violet: {
                    50: "#f5f3ff",
                    100: "#ede9fe",
                    200: "#ddd6fe",
                    300: "#c4b5fd",
                    400: "#a78bfa",
                    500: "#8b5cf6",
                    600: "#7c3aed",
                    700: "#6d28d9",
                    800: "#5b21b6",
                    900: "#4c1d95",
                    950: "#2e1065",
                },
                purple: {
                    50: "#faf5ff",
                    100: "#f3e8ff",
                    200: "#e9d5ff",
                    300: "#d8b4fe",
                    400: "#c084fc",
                    500: "#a855f7",
                    600: "#9333ea",
                    700: "#7e22ce",
                    800: "#6b21a8",
                    900: "#581c87",
                    950: "#3b0764",
                },
                fuchsia: {
                    50: "#fdf4ff",
                    100: "#fae8ff",
                    200: "#f5d0fe",
                    300: "#f0abfc",
                    400: "#e879f9",
                    500: "#d946ef",
                    600: "#c026d3",
                    700: "#a21caf",
                    800: "#86198f",
                    900: "#701a75",
                    950: "#4a044e",
                },
                pink: {
                    50: "#fdf2f8",
                    100: "#fce7f3",
                    200: "#fbcfe8",
                    300: "#f9a8d4",
                    400: "#f472b6",
                    500: "#ec4899",
                    600: "#db2777",
                    700: "#be185d",
                    800: "#9d174d",
                    900: "#831843",
                    950: "#500724",
                },
                rose: {
                    50: "#fff1f2",
                    100: "#ffe4e6",
                    200: "#fecdd3",
                    300: "#fda4af",
                    400: "#fb7185",
                    500: "#f43f5e",
                    600: "#e11d48",
                    700: "#be123c",
                    800: "#9f1239",
                    900: "#881337",
                    950: "#4c0519",
                },
                get lightBlue() {
                    return (
                        nr({ version: "v2.2", from: "lightBlue", to: "sky" }),
                        this.sky
                    );
                },
                get warmGray() {
                    return (
                        nr({ version: "v3.0", from: "warmGray", to: "stone" }),
                        this.stone
                    );
                },
                get trueGray() {
                    return (
                        nr({
                            version: "v3.0",
                            from: "trueGray",
                            to: "neutral",
                        }),
                        this.neutral
                    );
                },
                get coolGray() {
                    return (
                        nr({ version: "v3.0", from: "coolGray", to: "gray" }),
                        this.gray
                    );
                },
                get blueGray() {
                    return (
                        nr({ version: "v3.0", from: "blueGray", to: "slate" }),
                        this.slate
                    );
                },
            };
        });
    function rs(i, ...e) {
        for (let t of e) {
            for (let r in t) i?.hasOwnProperty?.(r) || (i[r] = t[r]);
            for (let r of Object.getOwnPropertySymbols(t))
                i?.hasOwnProperty?.(r) || (i[r] = t[r]);
        }
        return i;
    }
    var Su = C(() => {
        l();
    });
    function Ke(i) {
        if (Array.isArray(i)) return i;
        let e = i.split("[").length - 1,
            t = i.split("]").length - 1;
        if (e !== t)
            throw new Error(`Path is invalid. Has unbalanced brackets: ${i}`);
        return i.split(/\.(?![^\[]*\])|[\[\]]/g).filter(Boolean);
    }
    var pi = C(() => {
        l();
    });
    function J(i, e) {
        return di.future.includes(e)
            ? i.future === "all" || (i?.future?.[e] ?? Cu[e] ?? !1)
            : di.experimental.includes(e)
            ? i.experimental === "all" || (i?.experimental?.[e] ?? Cu[e] ?? !1)
            : !1;
    }
    function Au(i) {
        return i.experimental === "all"
            ? di.experimental
            : Object.keys(i?.experimental ?? {}).filter(
                  (e) => di.experimental.includes(e) && i.experimental[e]
              );
    }
    function _u(i) {
        if (m.env.JEST_WORKER_ID === void 0 && Au(i).length > 0) {
            let e = Au(i)
                .map((t) => _e.yellow(t))
                .join(", ");
            F.warn("experimental-flags-enabled", [
                `You have enabled experimental features: ${e}`,
                "Experimental features in Tailwind CSS are not covered by semver, may introduce breaking changes, and can change at any time.",
            ]);
        }
    }
    var Cu,
        di,
        De = C(() => {
            l();
            ci();
            Ee();
            (Cu = {
                optimizeUniversalDefaults: !1,
                generalizedModifiers: !0,
                get disableColorOpacityUtilitiesByDefault() {
                    return !1;
                },
                get relativeContentPathsByDefault() {
                    return !1;
                },
            }),
                (di = {
                    future: [
                        "hoverOnlyWhenSupported",
                        "respectDefaultRingColorOpacity",
                        "disableColorOpacityUtilitiesByDefault",
                        "relativeContentPathsByDefault",
                    ],
                    experimental: [
                        "optimizeUniversalDefaults",
                        "generalizedModifiers",
                    ],
                });
        });
    function Eu(i) {
        (() => {
            if (
                i.purge ||
                !i.content ||
                (!Array.isArray(i.content) &&
                    !(typeof i.content == "object" && i.content !== null))
            )
                return !1;
            if (Array.isArray(i.content))
                return i.content.every((t) =>
                    typeof t == "string"
                        ? !0
                        : !(
                              typeof t?.raw != "string" ||
                              (t?.extension && typeof t?.extension != "string")
                          )
                );
            if (typeof i.content == "object" && i.content !== null) {
                if (
                    Object.keys(i.content).some(
                        (t) =>
                            ![
                                "files",
                                "relative",
                                "extract",
                                "transform",
                            ].includes(t)
                    )
                )
                    return !1;
                if (Array.isArray(i.content.files)) {
                    if (
                        !i.content.files.every((t) =>
                            typeof t == "string"
                                ? !0
                                : !(
                                      typeof t?.raw != "string" ||
                                      (t?.extension &&
                                          typeof t?.extension != "string")
                                  )
                        )
                    )
                        return !1;
                    if (typeof i.content.extract == "object") {
                        for (let t of Object.values(i.content.extract))
                            if (typeof t != "function") return !1;
                    } else if (
                        !(
                            i.content.extract === void 0 ||
                            typeof i.content.extract == "function"
                        )
                    )
                        return !1;
                    if (typeof i.content.transform == "object") {
                        for (let t of Object.values(i.content.transform))
                            if (typeof t != "function") return !1;
                    } else if (
                        !(
                            i.content.transform === void 0 ||
                            typeof i.content.transform == "function"
                        )
                    )
                        return !1;
                    if (
                        typeof i.content.relative != "boolean" &&
                        typeof i.content.relative != "undefined"
                    )
                        return !1;
                }
                return !0;
            }
            return !1;
        })() ||
            F.warn("purge-deprecation", [
                "The `purge`/`content` options have changed in Tailwind CSS v3.0.",
                "Update your configuration file to eliminate this warning.",
                "https://tailwindcss.com/docs/upgrade-guide#configure-content-sources",
            ]),
            (i.safelist = (() => {
                let { content: t, purge: r, safelist: n } = i;
                return Array.isArray(n)
                    ? n
                    : Array.isArray(t?.safelist)
                    ? t.safelist
                    : Array.isArray(r?.safelist)
                    ? r.safelist
                    : Array.isArray(r?.options?.safelist)
                    ? r.options.safelist
                    : [];
            })()),
            (i.blocklist = (() => {
                let { blocklist: t } = i;
                if (Array.isArray(t)) {
                    if (t.every((r) => typeof r == "string")) return t;
                    F.warn("blocklist-invalid", [
                        "The `blocklist` option must be an array of strings.",
                        "https://tailwindcss.com/docs/content-configuration#discarding-classes",
                    ]);
                }
                return [];
            })()),
            typeof i.prefix == "function"
                ? (F.warn("prefix-function", [
                      "As of Tailwind CSS v3.0, `prefix` cannot be a function.",
                      "Update `prefix` in your configuration to be a string to eliminate this warning.",
                      "https://tailwindcss.com/docs/upgrade-guide#prefix-cannot-be-a-function",
                  ]),
                  (i.prefix = ""))
                : (i.prefix = i.prefix ?? ""),
            (i.content = {
                relative: (() => {
                    let { content: t } = i;
                    return t?.relative
                        ? t.relative
                        : J(i, "relativeContentPathsByDefault");
                })(),
                files: (() => {
                    let { content: t, purge: r } = i;
                    return Array.isArray(r)
                        ? r
                        : Array.isArray(r?.content)
                        ? r.content
                        : Array.isArray(t)
                        ? t
                        : Array.isArray(t?.content)
                        ? t.content
                        : Array.isArray(t?.files)
                        ? t.files
                        : [];
                })(),
                extract: (() => {
                    let t = (() =>
                            i.purge?.extract
                                ? i.purge.extract
                                : i.content?.extract
                                ? i.content.extract
                                : i.purge?.extract?.DEFAULT
                                ? i.purge.extract.DEFAULT
                                : i.content?.extract?.DEFAULT
                                ? i.content.extract.DEFAULT
                                : i.purge?.options?.extractors
                                ? i.purge.options.extractors
                                : i.content?.options?.extractors
                                ? i.content.options.extractors
                                : {})(),
                        r = {},
                        n = (() => {
                            if (i.purge?.options?.defaultExtractor)
                                return i.purge.options.defaultExtractor;
                            if (i.content?.options?.defaultExtractor)
                                return i.content.options.defaultExtractor;
                        })();
                    if (
                        (n !== void 0 && (r.DEFAULT = n),
                        typeof t == "function")
                    )
                        r.DEFAULT = t;
                    else if (Array.isArray(t))
                        for (let { extensions: a, extractor: s } of t ?? [])
                            for (let o of a) r[o] = s;
                    else
                        typeof t == "object" &&
                            t !== null &&
                            Object.assign(r, t);
                    return r;
                })(),
                transform: (() => {
                    let t = (() =>
                            i.purge?.transform
                                ? i.purge.transform
                                : i.content?.transform
                                ? i.content.transform
                                : i.purge?.transform?.DEFAULT
                                ? i.purge.transform.DEFAULT
                                : i.content?.transform?.DEFAULT
                                ? i.content.transform.DEFAULT
                                : {})(),
                        r = {};
                    return (
                        typeof t == "function" && (r.DEFAULT = t),
                        typeof t == "object" &&
                            t !== null &&
                            Object.assign(r, t),
                        r
                    );
                })(),
            });
        for (let t of i.content.files)
            if (typeof t == "string" && /{([^,]*?)}/g.test(t)) {
                F.warn("invalid-glob-braces", [
                    `The glob pattern ${Zn(
                        t
                    )} in your Tailwind CSS configuration is invalid.`,
                    `Update it to ${Zn(
                        t.replace(/{([^,]*?)}/g, "$1")
                    )} to silence this warning.`,
                ]);
                break;
            }
        return i;
    }
    var Ou = C(() => {
        l();
        De();
        Ee();
    });
    function ie(i) {
        if (Object.prototype.toString.call(i) !== "[object Object]") return !1;
        let e = Object.getPrototypeOf(i);
        return e === null || e === Object.prototype;
    }
    var xt = C(() => {
        l();
    });
    function Ze(i) {
        return Array.isArray(i)
            ? i.map((e) => Ze(e))
            : typeof i == "object" && i !== null
            ? Object.fromEntries(Object.entries(i).map(([e, t]) => [e, Ze(t)]))
            : i;
    }
    var hi = C(() => {
        l();
    });
    function ht(i) {
        return i.replace(/\\,/g, "\\2c ");
    }
    var mi = C(() => {
        l();
    });
    var is,
        Tu = C(() => {
            l();
            is = {
                aliceblue: [240, 248, 255],
                antiquewhite: [250, 235, 215],
                aqua: [0, 255, 255],
                aquamarine: [127, 255, 212],
                azure: [240, 255, 255],
                beige: [245, 245, 220],
                bisque: [255, 228, 196],
                black: [0, 0, 0],
                blanchedalmond: [255, 235, 205],
                blue: [0, 0, 255],
                blueviolet: [138, 43, 226],
                brown: [165, 42, 42],
                burlywood: [222, 184, 135],
                cadetblue: [95, 158, 160],
                chartreuse: [127, 255, 0],
                chocolate: [210, 105, 30],
                coral: [255, 127, 80],
                cornflowerblue: [100, 149, 237],
                cornsilk: [255, 248, 220],
                crimson: [220, 20, 60],
                cyan: [0, 255, 255],
                darkblue: [0, 0, 139],
                darkcyan: [0, 139, 139],
                darkgoldenrod: [184, 134, 11],
                darkgray: [169, 169, 169],
                darkgreen: [0, 100, 0],
                darkgrey: [169, 169, 169],
                darkkhaki: [189, 183, 107],
                darkmagenta: [139, 0, 139],
                darkolivegreen: [85, 107, 47],
                darkorange: [255, 140, 0],
                darkorchid: [153, 50, 204],
                darkred: [139, 0, 0],
                darksalmon: [233, 150, 122],
                darkseagreen: [143, 188, 143],
                darkslateblue: [72, 61, 139],
                darkslategray: [47, 79, 79],
                darkslategrey: [47, 79, 79],
                darkturquoise: [0, 206, 209],
                darkviolet: [148, 0, 211],
                deeppink: [255, 20, 147],
                deepskyblue: [0, 191, 255],
                dimgray: [105, 105, 105],
                dimgrey: [105, 105, 105],
                dodgerblue: [30, 144, 255],
                firebrick: [178, 34, 34],
                floralwhite: [255, 250, 240],
                forestgreen: [34, 139, 34],
                fuchsia: [255, 0, 255],
                gainsboro: [220, 220, 220],
                ghostwhite: [248, 248, 255],
                gold: [255, 215, 0],
                goldenrod: [218, 165, 32],
                gray: [128, 128, 128],
                green: [0, 128, 0],
                greenyellow: [173, 255, 47],
                grey: [128, 128, 128],
                honeydew: [240, 255, 240],
                hotpink: [255, 105, 180],
                indianred: [205, 92, 92],
                indigo: [75, 0, 130],
                ivory: [255, 255, 240],
                khaki: [240, 230, 140],
                lavender: [230, 230, 250],
                lavenderblush: [255, 240, 245],
                lawngreen: [124, 252, 0],
                lemonchiffon: [255, 250, 205],
                lightblue: [173, 216, 230],
                lightcoral: [240, 128, 128],
                lightcyan: [224, 255, 255],
                lightgoldenrodyellow: [250, 250, 210],
                lightgray: [211, 211, 211],
                lightgreen: [144, 238, 144],
                lightgrey: [211, 211, 211],
                lightpink: [255, 182, 193],
                lightsalmon: [255, 160, 122],
                lightseagreen: [32, 178, 170],
                lightskyblue: [135, 206, 250],
                lightslategray: [119, 136, 153],
                lightslategrey: [119, 136, 153],
                lightsteelblue: [176, 196, 222],
                lightyellow: [255, 255, 224],
                lime: [0, 255, 0],
                limegreen: [50, 205, 50],
                linen: [250, 240, 230],
                magenta: [255, 0, 255],
                maroon: [128, 0, 0],
                mediumaquamarine: [102, 205, 170],
                mediumblue: [0, 0, 205],
                mediumorchid: [186, 85, 211],
                mediumpurple: [147, 112, 219],
                mediumseagreen: [60, 179, 113],
                mediumslateblue: [123, 104, 238],
                mediumspringgreen: [0, 250, 154],
                mediumturquoise: [72, 209, 204],
                mediumvioletred: [199, 21, 133],
                midnightblue: [25, 25, 112],
                mintcream: [245, 255, 250],
                mistyrose: [255, 228, 225],
                moccasin: [255, 228, 181],
                navajowhite: [255, 222, 173],
                navy: [0, 0, 128],
                oldlace: [253, 245, 230],
                olive: [128, 128, 0],
                olivedrab: [107, 142, 35],
                orange: [255, 165, 0],
                orangered: [255, 69, 0],
                orchid: [218, 112, 214],
                palegoldenrod: [238, 232, 170],
                palegreen: [152, 251, 152],
                paleturquoise: [175, 238, 238],
                palevioletred: [219, 112, 147],
                papayawhip: [255, 239, 213],
                peachpuff: [255, 218, 185],
                peru: [205, 133, 63],
                pink: [255, 192, 203],
                plum: [221, 160, 221],
                powderblue: [176, 224, 230],
                purple: [128, 0, 128],
                rebeccapurple: [102, 51, 153],
                red: [255, 0, 0],
                rosybrown: [188, 143, 143],
                royalblue: [65, 105, 225],
                saddlebrown: [139, 69, 19],
                salmon: [250, 128, 114],
                sandybrown: [244, 164, 96],
                seagreen: [46, 139, 87],
                seashell: [255, 245, 238],
                sienna: [160, 82, 45],
                silver: [192, 192, 192],
                skyblue: [135, 206, 235],
                slateblue: [106, 90, 205],
                slategray: [112, 128, 144],
                slategrey: [112, 128, 144],
                snow: [255, 250, 250],
                springgreen: [0, 255, 127],
                steelblue: [70, 130, 180],
                tan: [210, 180, 140],
                teal: [0, 128, 128],
                thistle: [216, 191, 216],
                tomato: [255, 99, 71],
                turquoise: [64, 224, 208],
                violet: [238, 130, 238],
                wheat: [245, 222, 179],
                white: [255, 255, 255],
                whitesmoke: [245, 245, 245],
                yellow: [255, 255, 0],
                yellowgreen: [154, 205, 50],
            };
        });
    function sr(i, { loose: e = !1 } = {}) {
        if (typeof i != "string") return null;
        if (((i = i.trim()), i === "transparent"))
            return { mode: "rgb", color: ["0", "0", "0"], alpha: "0" };
        if (i in is)
            return { mode: "rgb", color: is[i].map((a) => a.toString()) };
        let t = i
            .replace(Db, (a, s, o, u, c) =>
                ["#", s, s, o, o, u, u, c ? c + c : ""].join("")
            )
            .match(Pb);
        if (t !== null)
            return {
                mode: "rgb",
                color: [
                    parseInt(t[1], 16),
                    parseInt(t[2], 16),
                    parseInt(t[3], 16),
                ].map((a) => a.toString()),
                alpha: t[4] ? (parseInt(t[4], 16) / 255).toString() : void 0,
            };
        let r = i.match(Ib) ?? i.match(qb);
        if (r === null) return null;
        let n = [r[2], r[3], r[4]].filter(Boolean).map((a) => a.toString());
        return n.length === 2 && n[0].startsWith("var(")
            ? { mode: r[1], color: [n[0]], alpha: n[1] }
            : (!e && n.length !== 3) ||
              (n.length < 3 && !n.some((a) => /^var\(.*?\)$/.test(a)))
            ? null
            : { mode: r[1], color: n, alpha: r[5]?.toString?.() };
    }
    function ns({ mode: i, color: e, alpha: t }) {
        let r = t !== void 0;
        return i === "rgba" || i === "hsla"
            ? `${i}(${e.join(", ")}${r ? `, ${t}` : ""})`
            : `${i}(${e.join(" ")}${r ? ` / ${t}` : ""})`;
    }
    var Pb,
        Db,
        et,
        gi,
        Pu,
        tt,
        Ib,
        qb,
        ss = C(() => {
            l();
            Tu();
            (Pb = /^#([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i),
                (Db = /^#([a-f\d])([a-f\d])([a-f\d])([a-f\d])?$/i),
                (et = /(?:\d+|\d*\.\d+)%?/),
                (gi = /(?:\s*,\s*|\s+)/),
                (Pu = /\s*[,/]\s*/),
                (tt = /var\(--(?:[^ )]*?)\)/),
                (Ib = new RegExp(
                    `^(rgba?)\\(\\s*(${et.source}|${tt.source})(?:${gi.source}(${et.source}|${tt.source}))?(?:${gi.source}(${et.source}|${tt.source}))?(?:${Pu.source}(${et.source}|${tt.source}))?\\s*\\)$`
                )),
                (qb = new RegExp(
                    `^(hsla?)\\(\\s*((?:${et.source})(?:deg|rad|grad|turn)?|${tt.source})(?:${gi.source}(${et.source}|${tt.source}))?(?:${gi.source}(${et.source}|${tt.source}))?(?:${Pu.source}(${et.source}|${tt.source}))?\\s*\\)$`
                ));
        });
    function Ie(i, e, t) {
        if (typeof i == "function") return i({ opacityValue: e });
        let r = sr(i, { loose: !0 });
        return r === null ? t : ns({ ...r, alpha: e });
    }
    function se({ color: i, property: e, variable: t }) {
        let r = [].concat(e);
        if (typeof i == "function")
            return {
                [t]: "1",
                ...Object.fromEntries(
                    r.map((a) => [
                        a,
                        i({ opacityVariable: t, opacityValue: `var(${t})` }),
                    ])
                ),
            };
        let n = sr(i);
        return n === null
            ? Object.fromEntries(r.map((a) => [a, i]))
            : n.alpha !== void 0
            ? Object.fromEntries(r.map((a) => [a, i]))
            : {
                  [t]: "1",
                  ...Object.fromEntries(
                      r.map((a) => [a, ns({ ...n, alpha: `var(${t})` })])
                  ),
              };
    }
    var ar = C(() => {
        l();
        ss();
    });
    function le(i, e) {
        let t = [],
            r = [],
            n = 0,
            a = !1;
        for (let s = 0; s < i.length; s++) {
            let o = i[s];
            t.length === 0 &&
                o === e[0] &&
                !a &&
                (e.length === 1 || i.slice(s, s + e.length) === e) &&
                (r.push(i.slice(n, s)), (n = s + e.length)),
                a ? (a = !1) : o === "\\" && (a = !0),
                o === "(" || o === "[" || o === "{"
                    ? t.push(o)
                    : ((o === ")" && t[t.length - 1] === "(") ||
                          (o === "]" && t[t.length - 1] === "[") ||
                          (o === "}" && t[t.length - 1] === "{")) &&
                      t.pop();
        }
        return r.push(i.slice(n)), r;
    }
    var or = C(() => {
        l();
    });
    function yi(i) {
        return le(i, ",").map((t) => {
            let r = t.trim(),
                n = { raw: r },
                a = r.split(Mb),
                s = new Set();
            for (let o of a)
                (Du.lastIndex = 0),
                    !s.has("KEYWORD") && Rb.has(o)
                        ? ((n.keyword = o), s.add("KEYWORD"))
                        : Du.test(o)
                        ? s.has("X")
                            ? s.has("Y")
                                ? s.has("BLUR")
                                    ? s.has("SPREAD") ||
                                      ((n.spread = o), s.add("SPREAD"))
                                    : ((n.blur = o), s.add("BLUR"))
                                : ((n.y = o), s.add("Y"))
                            : ((n.x = o), s.add("X"))
                        : n.color
                        ? (n.unknown || (n.unknown = []), n.unknown.push(o))
                        : (n.color = o);
            return (n.valid = n.x !== void 0 && n.y !== void 0), n;
        });
    }
    function Iu(i) {
        return i
            .map((e) =>
                e.valid
                    ? [e.keyword, e.x, e.y, e.blur, e.spread, e.color]
                          .filter(Boolean)
                          .join(" ")
                    : e.raw
            )
            .join(", ");
    }
    var Rb,
        Mb,
        Du,
        as = C(() => {
            l();
            or();
            (Rb = new Set(["inset", "inherit", "initial", "revert", "unset"])),
                (Mb = /\ +(?![^(]*\))/g),
                (Du = /^-?(\d+|\.\d+)(.*?)$/g);
        });
    function os(i) {
        return Bb.some((e) => new RegExp(`^${e}\\(.*\\)`).test(i));
    }
    function U(i, e = !0) {
        return i.startsWith("--")
            ? `var(${i})`
            : i.includes("url(")
            ? i
                  .split(/(url\(.*?\))/g)
                  .filter(Boolean)
                  .map((t) => (/^url\(.*?\)$/.test(t) ? t : U(t, !1)))
                  .join("")
            : ((i = i
                  .replace(/([^\\])_+/g, (t, r) => r + " ".repeat(t.length - 1))
                  .replace(/^_/g, " ")
                  .replace(/\\_/g, "_")),
              e && (i = i.trim()),
              (i = Nb(i)),
              i);
    }
    function Nb(i) {
        return i.replace(/(calc|min|max|clamp)\(.+\)/g, (e) => {
            let t = [];
            return e
                .replace(
                    /var\((--.+?)[,)]/g,
                    (r, n) => (t.push(n), r.replace(n, qu))
                )
                .replace(
                    /(-?\d*\.?\d(?!\b-\d.+[,)](?![^+\-/*])\D)(?:%|[a-z]+)?|\))([+\-/*])/g,
                    "$1 $2 "
                )
                .replace(Fb, () => t.shift());
        });
    }
    function ls(i) {
        return i.startsWith("url(");
    }
    function us(i) {
        return !isNaN(Number(i)) || os(i);
    }
    function lr(i) {
        return (i.endsWith("%") && us(i.slice(0, -1))) || os(i);
    }
    function ur(i) {
        return (
            i === "0" ||
            new RegExp(`^[+-]?[0-9]*.?[0-9]+(?:[eE][+-]?[0-9]+)?${$b}$`).test(
                i
            ) ||
            os(i)
        );
    }
    function Ru(i) {
        return jb.has(i);
    }
    function Mu(i) {
        let e = yi(U(i));
        for (let t of e) if (!t.valid) return !1;
        return !0;
    }
    function Bu(i) {
        let e = 0;
        return le(i, "_").every(
            (r) => (
                (r = U(r)),
                r.startsWith("var(")
                    ? !0
                    : sr(r, { loose: !0 }) !== null
                    ? (e++, !0)
                    : !1
            )
        )
            ? e > 0
            : !1;
    }
    function Fu(i) {
        let e = 0;
        return le(i, ",").every(
            (r) => (
                (r = U(r)),
                r.startsWith("var(")
                    ? !0
                    : ls(r) ||
                      Vb(r) ||
                      ["element(", "image(", "cross-fade(", "image-set("].some(
                          (n) => r.startsWith(n)
                      )
                    ? (e++, !0)
                    : !1
            )
        )
            ? e > 0
            : !1;
    }
    function Vb(i) {
        i = U(i);
        for (let e of zb) if (i.startsWith(`${e}(`)) return !0;
        return !1;
    }
    function Nu(i) {
        let e = 0;
        return le(i, "_").every(
            (r) => (
                (r = U(r)),
                r.startsWith("var(")
                    ? !0
                    : Ub.has(r) || ur(r) || lr(r)
                    ? (e++, !0)
                    : !1
            )
        )
            ? e > 0
            : !1;
    }
    function Lu(i) {
        let e = 0;
        return le(i, ",").every(
            (r) => (
                (r = U(r)),
                r.startsWith("var(")
                    ? !0
                    : (r.includes(" ") && !/(['"])([^"']+)\1/g.test(r)) ||
                      /^\d/g.test(r)
                    ? !1
                    : (e++, !0)
            )
        )
            ? e > 0
            : !1;
    }
    function $u(i) {
        return Wb.has(i);
    }
    function ju(i) {
        return Gb.has(i);
    }
    function zu(i) {
        return Hb.has(i);
    }
    var Bb,
        qu,
        Fb,
        Lb,
        $b,
        jb,
        zb,
        Ub,
        Wb,
        Gb,
        Hb,
        fr = C(() => {
            l();
            ss();
            as();
            or();
            Bb = ["min", "max", "clamp", "calc"];
            (qu = "--tw-placeholder"), (Fb = new RegExp(qu, "g"));
            (Lb = [
                "cm",
                "mm",
                "Q",
                "in",
                "pc",
                "pt",
                "px",
                "em",
                "ex",
                "ch",
                "rem",
                "lh",
                "rlh",
                "vw",
                "vh",
                "vmin",
                "vmax",
                "vb",
                "vi",
                "svw",
                "svh",
                "lvw",
                "lvh",
                "dvw",
                "dvh",
                "cqw",
                "cqh",
                "cqi",
                "cqb",
                "cqmin",
                "cqmax",
            ]),
                ($b = `(?:${Lb.join("|")})`);
            jb = new Set(["thin", "medium", "thick"]);
            zb = new Set([
                "conic-gradient",
                "linear-gradient",
                "radial-gradient",
                "repeating-conic-gradient",
                "repeating-linear-gradient",
                "repeating-radial-gradient",
            ]);
            Ub = new Set(["center", "top", "right", "bottom", "left"]);
            Wb = new Set([
                "serif",
                "sans-serif",
                "monospace",
                "cursive",
                "fantasy",
                "system-ui",
                "ui-serif",
                "ui-sans-serif",
                "ui-monospace",
                "ui-rounded",
                "math",
                "emoji",
                "fangsong",
            ]);
            Gb = new Set([
                "xx-small",
                "x-small",
                "small",
                "medium",
                "large",
                "x-large",
                "x-large",
                "xxx-large",
            ]);
            Hb = new Set(["larger", "smaller"]);
        });
    function Vu(i) {
        let e = ["cover", "contain"];
        return le(i, ",").every((t) => {
            let r = le(t, "_").filter(Boolean);
            return r.length === 1 && e.includes(r[0])
                ? !0
                : r.length !== 1 && r.length !== 2
                ? !1
                : r.every((n) => ur(n) || lr(n) || n === "auto");
        });
    }
    var Uu = C(() => {
        l();
        fr();
        or();
    });
    function Wu(i, e) {
        i.walkClasses((t) => {
            (t.value = e(t.value)),
                t.raws && t.raws.value && (t.raws.value = ht(t.raws.value));
        });
    }
    function Gu(i, e) {
        if (!rt(i)) return;
        let t = i.slice(1, -1);
        if (!!e(t)) return U(t);
    }
    function Yb(i, e = {}, t) {
        let r = e[i];
        if (r !== void 0) return Xe(r);
        if (rt(i)) {
            let n = Gu(i, t);
            return n === void 0 ? void 0 : Xe(n);
        }
    }
    function wi(i, e = {}, { validate: t = () => !0 } = {}) {
        let r = e.values?.[i];
        return r !== void 0
            ? r
            : e.supportsNegativeValues && i.startsWith("-")
            ? Yb(i.slice(1), e.values, t)
            : Gu(i, t);
    }
    function rt(i) {
        return i.startsWith("[") && i.endsWith("]");
    }
    function Hu(i) {
        let e = i.lastIndexOf("/");
        return e === -1 || e === i.length - 1
            ? [i, void 0]
            : rt(i) && !i.includes("]/[")
            ? [i, void 0]
            : [i.slice(0, e), i.slice(e + 1)];
    }
    function kt(i) {
        if (typeof i == "string" && i.includes("<alpha-value>")) {
            let e = i;
            return ({ opacityValue: t = 1 }) => e.replace("<alpha-value>", t);
        }
        return i;
    }
    function Yu(i) {
        return U(i.slice(1, -1));
    }
    function Qb(i, e = {}, { tailwindConfig: t = {} } = {}) {
        if (e.values?.[i] !== void 0) return kt(e.values?.[i]);
        let [r, n] = Hu(i);
        if (n !== void 0) {
            let a = e.values?.[r] ?? (rt(r) ? r.slice(1, -1) : void 0);
            return a === void 0
                ? void 0
                : ((a = kt(a)),
                  rt(n)
                      ? Ie(a, Yu(n))
                      : t.theme?.opacity?.[n] === void 0
                      ? void 0
                      : Ie(a, t.theme.opacity[n]));
        }
        return wi(i, e, { validate: Bu });
    }
    function Jb(i, e = {}) {
        return e.values?.[i];
    }
    function he(i) {
        return (e, t) => wi(e, t, { validate: i });
    }
    function Xb(i, e) {
        let t = i.indexOf(e);
        return t === -1 ? [void 0, i] : [i.slice(0, t), i.slice(t + 1)];
    }
    function cs(i, e, t, r) {
        if (t.values && e in t.values)
            for (let { type: a } of i ?? []) {
                let s = fs[a](e, t, { tailwindConfig: r });
                if (s !== void 0) return [s, a, null];
            }
        if (rt(e)) {
            let a = e.slice(1, -1),
                [s, o] = Xb(a, ":");
            if (!/^[\w-_]+$/g.test(s)) o = a;
            else if (s !== void 0 && !Qu.includes(s)) return [];
            if (o.length > 0 && Qu.includes(s))
                return [wi(`[${o}]`, t), s, null];
        }
        let n = ps(i, e, t, r);
        for (let a of n) return a;
        return [];
    }
    function* ps(i, e, t, r) {
        let n = J(r, "generalizedModifiers"),
            [a, s] = Hu(e);
        if (
            ((n &&
                t.modifiers != null &&
                (t.modifiers === "any" ||
                    (typeof t.modifiers == "object" &&
                        ((s && rt(s)) || s in t.modifiers)))) ||
                ((a = e), (s = void 0)),
            s !== void 0 && a === "" && (a = "DEFAULT"),
            s !== void 0 && typeof t.modifiers == "object")
        ) {
            let u = t.modifiers?.[s] ?? null;
            u !== null ? (s = u) : rt(s) && (s = Yu(s));
        }
        for (let { type: u } of i ?? []) {
            let c = fs[u](a, t, { tailwindConfig: r });
            c !== void 0 && (yield [c, u, s ?? null]);
        }
    }
    var fs,
        Qu,
        cr = C(() => {
            l();
            mi();
            ar();
            fr();
            fi();
            Uu();
            De();
            (fs = {
                any: wi,
                color: Qb,
                url: he(ls),
                image: he(Fu),
                length: he(ur),
                percentage: he(lr),
                position: he(Nu),
                lookup: Jb,
                "generic-name": he($u),
                "family-name": he(Lu),
                number: he(us),
                "line-width": he(Ru),
                "absolute-size": he(ju),
                "relative-size": he(zu),
                shadow: he(Mu),
                size: he(Vu),
            }),
                (Qu = Object.keys(fs));
        });
    function N(i) {
        return typeof i == "function" ? i({}) : i;
    }
    var ds = C(() => {
        l();
    });
    function St(i) {
        return typeof i == "function";
    }
    function pr(i, ...e) {
        let t = e.pop();
        for (let r of e)
            for (let n in r) {
                let a = t(i[n], r[n]);
                a === void 0
                    ? ie(i[n]) && ie(r[n])
                        ? (i[n] = pr({}, i[n], r[n], t))
                        : (i[n] = r[n])
                    : (i[n] = a);
            }
        return i;
    }
    function Kb(i, ...e) {
        return St(i) ? i(...e) : i;
    }
    function Zb(i) {
        return i.reduce(
            (e, { extend: t }) =>
                pr(e, t, (r, n) =>
                    r === void 0 ? [n] : Array.isArray(r) ? [n, ...r] : [n, r]
                ),
            {}
        );
    }
    function e0(i) {
        return { ...i.reduce((e, t) => rs(e, t), {}), extend: Zb(i) };
    }
    function Ju(i, e) {
        if (Array.isArray(i) && ie(i[0])) return i.concat(e);
        if (Array.isArray(e) && ie(e[0]) && ie(i)) return [i, ...e];
        if (Array.isArray(e)) return e;
    }
    function t0({ extend: i, ...e }) {
        return pr(e, i, (t, r) =>
            !St(t) && !r.some(St)
                ? pr({}, t, ...r, Ju)
                : (n, a) => pr({}, ...[t, ...r].map((s) => Kb(s, n, a)), Ju)
        );
    }
    function* r0(i) {
        let e = Ke(i);
        if (e.length === 0 || (yield e, Array.isArray(i))) return;
        let t = /^(.*?)\s*\/\s*([^/]+)$/,
            r = i.match(t);
        if (r !== null) {
            let [, n, a] = r,
                s = Ke(n);
            (s.alpha = a), yield s;
        }
    }
    function i0(i) {
        let e = (t, r) => {
            for (let n of r0(t)) {
                let a = 0,
                    s = i;
                for (; s != null && a < n.length; )
                    (s = s[n[a++]]),
                        (s =
                            St(s) && (n.alpha === void 0 || a <= n.length - 1)
                                ? s(e, hs)
                                : s);
                if (s !== void 0) {
                    if (n.alpha !== void 0) {
                        let o = kt(s);
                        return Ie(o, n.alpha, N(o));
                    }
                    return ie(s) ? Ze(s) : s;
                }
            }
            return r;
        };
        return (
            Object.assign(e, { theme: e, ...hs }),
            Object.keys(i).reduce(
                (t, r) => ((t[r] = St(i[r]) ? i[r](e, hs) : i[r]), t),
                {}
            )
        );
    }
    function Xu(i) {
        let e = [];
        return (
            i.forEach((t) => {
                e = [...e, t];
                let r = t?.plugins ?? [];
                r.length !== 0 &&
                    r.forEach((n) => {
                        n.__isOptionsFunction && (n = n()),
                            (e = [...e, ...Xu([n?.config ?? {}])]);
                    });
            }),
            e
        );
    }
    function n0(i) {
        return [...i].reduceRight(
            (t, r) => (St(r) ? r({ corePlugins: t }) : wu(r, t)),
            gu
        );
    }
    function s0(i) {
        return [...i].reduceRight((t, r) => [...t, ...r], []);
    }
    function ms(i) {
        let e = [...Xu(i), { prefix: "", important: !1, separator: ":" }];
        return Eu(
            rs(
                {
                    theme: i0(t0(e0(e.map((t) => t?.theme ?? {})))),
                    corePlugins: n0(e.map((t) => t.corePlugins)),
                    plugins: s0(i.map((t) => t?.plugins ?? [])),
                },
                ...e
            )
        );
    }
    var hs,
        Ku = C(() => {
            l();
            fi();
            yu();
            bu();
            ts();
            Su();
            pi();
            Ou();
            xt();
            hi();
            cr();
            ar();
            ds();
            hs = {
                colors: es,
                negative(i) {
                    return Object.keys(i)
                        .filter((e) => i[e] !== "0")
                        .reduce((e, t) => {
                            let r = Xe(i[t]);
                            return r !== void 0 && (e[`-${t}`] = r), e;
                        }, {});
                },
                breakpoints(i) {
                    return Object.keys(i)
                        .filter((e) => typeof i[e] == "string")
                        .reduce(
                            (e, t) => ({ ...e, [`screen-${t}`]: i[t] }),
                            {}
                        );
                },
            };
        });
    var bi = v((eT, Zu) => {
        l();
        Zu.exports = {
            content: [],
            presets: [],
            darkMode: "media",
            theme: {
                accentColor: ({ theme: i }) => ({
                    ...i("colors"),
                    auto: "auto",
                }),
                animation: {
                    none: "none",
                    spin: "spin 1s linear infinite",
                    ping: "ping 1s cubic-bezier(0, 0, 0.2, 1) infinite",
                    pulse: "pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite",
                    bounce: "bounce 1s infinite",
                },
                aria: {
                    busy: 'busy="true"',
                    checked: 'checked="true"',
                    disabled: 'disabled="true"',
                    expanded: 'expanded="true"',
                    hidden: 'hidden="true"',
                    pressed: 'pressed="true"',
                    readonly: 'readonly="true"',
                    required: 'required="true"',
                    selected: 'selected="true"',
                },
                aspectRatio: { auto: "auto", square: "1 / 1", video: "16 / 9" },
                backdropBlur: ({ theme: i }) => i("blur"),
                backdropBrightness: ({ theme: i }) => i("brightness"),
                backdropContrast: ({ theme: i }) => i("contrast"),
                backdropGrayscale: ({ theme: i }) => i("grayscale"),
                backdropHueRotate: ({ theme: i }) => i("hueRotate"),
                backdropInvert: ({ theme: i }) => i("invert"),
                backdropOpacity: ({ theme: i }) => i("opacity"),
                backdropSaturate: ({ theme: i }) => i("saturate"),
                backdropSepia: ({ theme: i }) => i("sepia"),
                backgroundColor: ({ theme: i }) => i("colors"),
                backgroundImage: {
                    none: "none",
                    "gradient-to-t":
                        "linear-gradient(to top, var(--tw-gradient-stops))",
                    "gradient-to-tr":
                        "linear-gradient(to top right, var(--tw-gradient-stops))",
                    "gradient-to-r":
                        "linear-gradient(to right, var(--tw-gradient-stops))",
                    "gradient-to-br":
                        "linear-gradient(to bottom right, var(--tw-gradient-stops))",
                    "gradient-to-b":
                        "linear-gradient(to bottom, var(--tw-gradient-stops))",
                    "gradient-to-bl":
                        "linear-gradient(to bottom left, var(--tw-gradient-stops))",
                    "gradient-to-l":
                        "linear-gradient(to left, var(--tw-gradient-stops))",
                    "gradient-to-tl":
                        "linear-gradient(to top left, var(--tw-gradient-stops))",
                },
                backgroundOpacity: ({ theme: i }) => i("opacity"),
                backgroundPosition: {
                    bottom: "bottom",
                    center: "center",
                    left: "left",
                    "left-bottom": "left bottom",
                    "left-top": "left top",
                    right: "right",
                    "right-bottom": "right bottom",
                    "right-top": "right top",
                    top: "top",
                },
                backgroundSize: {
                    auto: "auto",
                    cover: "cover",
                    contain: "contain",
                },
                blur: {
                    0: "0",
                    none: "0",
                    sm: "4px",
                    DEFAULT: "8px",
                    md: "12px",
                    lg: "16px",
                    xl: "24px",
                    "2xl": "40px",
                    "3xl": "64px",
                },
                borderColor: ({ theme: i }) => ({
                    ...i("colors"),
                    DEFAULT: i("colors.gray.200", "currentColor"),
                }),
                borderOpacity: ({ theme: i }) => i("opacity"),
                borderRadius: {
                    none: "0px",
                    sm: "0.125rem",
                    DEFAULT: "0.25rem",
                    md: "0.375rem",
                    lg: "0.5rem",
                    xl: "0.75rem",
                    "2xl": "1rem",
                    "3xl": "1.5rem",
                    full: "9999px",
                },
                borderSpacing: ({ theme: i }) => ({ ...i("spacing") }),
                borderWidth: {
                    DEFAULT: "1px",
                    0: "0px",
                    2: "2px",
                    4: "4px",
                    8: "8px",
                },
                boxShadow: {
                    sm: "0 1px 2px 0 rgb(0 0 0 / 0.05)",
                    DEFAULT:
                        "0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)",
                    md: "0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)",
                    lg: "0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)",
                    xl: "0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)",
                    "2xl": "0 25px 50px -12px rgb(0 0 0 / 0.25)",
                    inner: "inset 0 2px 4px 0 rgb(0 0 0 / 0.05)",
                    none: "none",
                },
                boxShadowColor: ({ theme: i }) => i("colors"),
                brightness: {
                    0: "0",
                    50: ".5",
                    75: ".75",
                    90: ".9",
                    95: ".95",
                    100: "1",
                    105: "1.05",
                    110: "1.1",
                    125: "1.25",
                    150: "1.5",
                    200: "2",
                },
                caretColor: ({ theme: i }) => i("colors"),
                colors: ({ colors: i }) => ({
                    inherit: i.inherit,
                    current: i.current,
                    transparent: i.transparent,
                    black: i.black,
                    white: i.white,
                    slate: i.slate,
                    gray: i.gray,
                    zinc: i.zinc,
                    neutral: i.neutral,
                    stone: i.stone,
                    red: i.red,
                    orange: i.orange,
                    amber: i.amber,
                    yellow: i.yellow,
                    lime: i.lime,
                    green: i.green,
                    emerald: i.emerald,
                    teal: i.teal,
                    cyan: i.cyan,
                    sky: i.sky,
                    blue: i.blue,
                    indigo: i.indigo,
                    violet: i.violet,
                    purple: i.purple,
                    fuchsia: i.fuchsia,
                    pink: i.pink,
                    rose: i.rose,
                }),
                columns: {
                    auto: "auto",
                    1: "1",
                    2: "2",
                    3: "3",
                    4: "4",
                    5: "5",
                    6: "6",
                    7: "7",
                    8: "8",
                    9: "9",
                    10: "10",
                    11: "11",
                    12: "12",
                    "3xs": "16rem",
                    "2xs": "18rem",
                    xs: "20rem",
                    sm: "24rem",
                    md: "28rem",
                    lg: "32rem",
                    xl: "36rem",
                    "2xl": "42rem",
                    "3xl": "48rem",
                    "4xl": "56rem",
                    "5xl": "64rem",
                    "6xl": "72rem",
                    "7xl": "80rem",
                },
                container: {},
                content: { none: "none" },
                contrast: {
                    0: "0",
                    50: ".5",
                    75: ".75",
                    100: "1",
                    125: "1.25",
                    150: "1.5",
                    200: "2",
                },
                cursor: {
                    auto: "auto",
                    default: "default",
                    pointer: "pointer",
                    wait: "wait",
                    text: "text",
                    move: "move",
                    help: "help",
                    "not-allowed": "not-allowed",
                    none: "none",
                    "context-menu": "context-menu",
                    progress: "progress",
                    cell: "cell",
                    crosshair: "crosshair",
                    "vertical-text": "vertical-text",
                    alias: "alias",
                    copy: "copy",
                    "no-drop": "no-drop",
                    grab: "grab",
                    grabbing: "grabbing",
                    "all-scroll": "all-scroll",
                    "col-resize": "col-resize",
                    "row-resize": "row-resize",
                    "n-resize": "n-resize",
                    "e-resize": "e-resize",
                    "s-resize": "s-resize",
                    "w-resize": "w-resize",
                    "ne-resize": "ne-resize",
                    "nw-resize": "nw-resize",
                    "se-resize": "se-resize",
                    "sw-resize": "sw-resize",
                    "ew-resize": "ew-resize",
                    "ns-resize": "ns-resize",
                    "nesw-resize": "nesw-resize",
                    "nwse-resize": "nwse-resize",
                    "zoom-in": "zoom-in",
                    "zoom-out": "zoom-out",
                },
                divideColor: ({ theme: i }) => i("borderColor"),
                divideOpacity: ({ theme: i }) => i("borderOpacity"),
                divideWidth: ({ theme: i }) => i("borderWidth"),
                dropShadow: {
                    sm: "0 1px 1px rgb(0 0 0 / 0.05)",
                    DEFAULT: [
                        "0 1px 2px rgb(0 0 0 / 0.1)",
                        "0 1px 1px rgb(0 0 0 / 0.06)",
                    ],
                    md: [
                        "0 4px 3px rgb(0 0 0 / 0.07)",
                        "0 2px 2px rgb(0 0 0 / 0.06)",
                    ],
                    lg: [
                        "0 10px 8px rgb(0 0 0 / 0.04)",
                        "0 4px 3px rgb(0 0 0 / 0.1)",
                    ],
                    xl: [
                        "0 20px 13px rgb(0 0 0 / 0.03)",
                        "0 8px 5px rgb(0 0 0 / 0.08)",
                    ],
                    "2xl": "0 25px 25px rgb(0 0 0 / 0.15)",
                    none: "0 0 #0000",
                },
                fill: ({ theme: i }) => ({ none: "none", ...i("colors") }),
                flex: {
                    1: "1 1 0%",
                    auto: "1 1 auto",
                    initial: "0 1 auto",
                    none: "none",
                },
                flexBasis: ({ theme: i }) => ({
                    auto: "auto",
                    ...i("spacing"),
                    "1/2": "50%",
                    "1/3": "33.333333%",
                    "2/3": "66.666667%",
                    "1/4": "25%",
                    "2/4": "50%",
                    "3/4": "75%",
                    "1/5": "20%",
                    "2/5": "40%",
                    "3/5": "60%",
                    "4/5": "80%",
                    "1/6": "16.666667%",
                    "2/6": "33.333333%",
                    "3/6": "50%",
                    "4/6": "66.666667%",
                    "5/6": "83.333333%",
                    "1/12": "8.333333%",
                    "2/12": "16.666667%",
                    "3/12": "25%",
                    "4/12": "33.333333%",
                    "5/12": "41.666667%",
                    "6/12": "50%",
                    "7/12": "58.333333%",
                    "8/12": "66.666667%",
                    "9/12": "75%",
                    "10/12": "83.333333%",
                    "11/12": "91.666667%",
                    full: "100%",
                }),
                flexGrow: { 0: "0", DEFAULT: "1" },
                flexShrink: { 0: "0", DEFAULT: "1" },
                fontFamily: {
                    sans: [
                        "ui-sans-serif",
                        "system-ui",
                        "-apple-system",
                        "BlinkMacSystemFont",
                        '"Segoe UI"',
                        "Roboto",
                        '"Helvetica Neue"',
                        "Arial",
                        '"Noto Sans"',
                        "sans-serif",
                        '"Apple Color Emoji"',
                        '"Segoe UI Emoji"',
                        '"Segoe UI Symbol"',
                        '"Noto Color Emoji"',
                    ],
                    serif: [
                        "ui-serif",
                        "Georgia",
                        "Cambria",
                        '"Times New Roman"',
                        "Times",
                        "serif",
                    ],
                    mono: [
                        "ui-monospace",
                        "SFMono-Regular",
                        "Menlo",
                        "Monaco",
                        "Consolas",
                        '"Liberation Mono"',
                        '"Courier New"',
                        "monospace",
                    ],
                },
                fontSize: {
                    xs: ["0.75rem", { lineHeight: "1rem" }],
                    sm: ["0.875rem", { lineHeight: "1.25rem" }],
                    base: ["1rem", { lineHeight: "1.5rem" }],
                    lg: ["1.125rem", { lineHeight: "1.75rem" }],
                    xl: ["1.25rem", { lineHeight: "1.75rem" }],
                    "2xl": ["1.5rem", { lineHeight: "2rem" }],
                    "3xl": ["1.875rem", { lineHeight: "2.25rem" }],
                    "4xl": ["2.25rem", { lineHeight: "2.5rem" }],
                    "5xl": ["3rem", { lineHeight: "1" }],
                    "6xl": ["3.75rem", { lineHeight: "1" }],
                    "7xl": ["4.5rem", { lineHeight: "1" }],
                    "8xl": ["6rem", { lineHeight: "1" }],
                    "9xl": ["8rem", { lineHeight: "1" }],
                },
                fontWeight: {
                    thin: "100",
                    extralight: "200",
                    light: "300",
                    normal: "400",
                    medium: "500",
                    semibold: "600",
                    bold: "700",
                    extrabold: "800",
                    black: "900",
                },
                gap: ({ theme: i }) => i("spacing"),
                gradientColorStops: ({ theme: i }) => i("colors"),
                gradientColorStopPositions: {
                    "0%": "0%",
                    "5%": "5%",
                    "10%": "10%",
                    "15%": "15%",
                    "20%": "20%",
                    "25%": "25%",
                    "30%": "30%",
                    "35%": "35%",
                    "40%": "40%",
                    "45%": "45%",
                    "50%": "50%",
                    "55%": "55%",
                    "60%": "60%",
                    "65%": "65%",
                    "70%": "70%",
                    "75%": "75%",
                    "80%": "80%",
                    "85%": "85%",
                    "90%": "90%",
                    "95%": "95%",
                    "100%": "100%",
                },
                grayscale: { 0: "0", DEFAULT: "100%" },
                gridAutoColumns: {
                    auto: "auto",
                    min: "min-content",
                    max: "max-content",
                    fr: "minmax(0, 1fr)",
                },
                gridAutoRows: {
                    auto: "auto",
                    min: "min-content",
                    max: "max-content",
                    fr: "minmax(0, 1fr)",
                },
                gridColumn: {
                    auto: "auto",
                    "span-1": "span 1 / span 1",
                    "span-2": "span 2 / span 2",
                    "span-3": "span 3 / span 3",
                    "span-4": "span 4 / span 4",
                    "span-5": "span 5 / span 5",
                    "span-6": "span 6 / span 6",
                    "span-7": "span 7 / span 7",
                    "span-8": "span 8 / span 8",
                    "span-9": "span 9 / span 9",
                    "span-10": "span 10 / span 10",
                    "span-11": "span 11 / span 11",
                    "span-12": "span 12 / span 12",
                    "span-full": "1 / -1",
                },
                gridColumnEnd: {
                    auto: "auto",
                    1: "1",
                    2: "2",
                    3: "3",
                    4: "4",
                    5: "5",
                    6: "6",
                    7: "7",
                    8: "8",
                    9: "9",
                    10: "10",
                    11: "11",
                    12: "12",
                    13: "13",
                },
                gridColumnStart: {
                    auto: "auto",
                    1: "1",
                    2: "2",
                    3: "3",
                    4: "4",
                    5: "5",
                    6: "6",
                    7: "7",
                    8: "8",
                    9: "9",
                    10: "10",
                    11: "11",
                    12: "12",
                    13: "13",
                },
                gridRow: {
                    auto: "auto",
                    "span-1": "span 1 / span 1",
                    "span-2": "span 2 / span 2",
                    "span-3": "span 3 / span 3",
                    "span-4": "span 4 / span 4",
                    "span-5": "span 5 / span 5",
                    "span-6": "span 6 / span 6",
                    "span-full": "1 / -1",
                },
                gridRowEnd: {
                    auto: "auto",
                    1: "1",
                    2: "2",
                    3: "3",
                    4: "4",
                    5: "5",
                    6: "6",
                    7: "7",
                },
                gridRowStart: {
                    auto: "auto",
                    1: "1",
                    2: "2",
                    3: "3",
                    4: "4",
                    5: "5",
                    6: "6",
                    7: "7",
                },
                gridTemplateColumns: {
                    none: "none",
                    1: "repeat(1, minmax(0, 1fr))",
                    2: "repeat(2, minmax(0, 1fr))",
                    3: "repeat(3, minmax(0, 1fr))",
                    4: "repeat(4, minmax(0, 1fr))",
                    5: "repeat(5, minmax(0, 1fr))",
                    6: "repeat(6, minmax(0, 1fr))",
                    7: "repeat(7, minmax(0, 1fr))",
                    8: "repeat(8, minmax(0, 1fr))",
                    9: "repeat(9, minmax(0, 1fr))",
                    10: "repeat(10, minmax(0, 1fr))",
                    11: "repeat(11, minmax(0, 1fr))",
                    12: "repeat(12, minmax(0, 1fr))",
                },
                gridTemplateRows: {
                    none: "none",
                    1: "repeat(1, minmax(0, 1fr))",
                    2: "repeat(2, minmax(0, 1fr))",
                    3: "repeat(3, minmax(0, 1fr))",
                    4: "repeat(4, minmax(0, 1fr))",
                    5: "repeat(5, minmax(0, 1fr))",
                    6: "repeat(6, minmax(0, 1fr))",
                },
                height: ({ theme: i }) => ({
                    auto: "auto",
                    ...i("spacing"),
                    "1/2": "50%",
                    "1/3": "33.333333%",
                    "2/3": "66.666667%",
                    "1/4": "25%",
                    "2/4": "50%",
                    "3/4": "75%",
                    "1/5": "20%",
                    "2/5": "40%",
                    "3/5": "60%",
                    "4/5": "80%",
                    "1/6": "16.666667%",
                    "2/6": "33.333333%",
                    "3/6": "50%",
                    "4/6": "66.666667%",
                    "5/6": "83.333333%",
                    full: "100%",
                    screen: "100vh",
                    min: "min-content",
                    max: "max-content",
                    fit: "fit-content",
                }),
                hueRotate: {
                    0: "0deg",
                    15: "15deg",
                    30: "30deg",
                    60: "60deg",
                    90: "90deg",
                    180: "180deg",
                },
                inset: ({ theme: i }) => ({
                    auto: "auto",
                    ...i("spacing"),
                    "1/2": "50%",
                    "1/3": "33.333333%",
                    "2/3": "66.666667%",
                    "1/4": "25%",
                    "2/4": "50%",
                    "3/4": "75%",
                    full: "100%",
                }),
                invert: { 0: "0", DEFAULT: "100%" },
                keyframes: {
                    spin: { to: { transform: "rotate(360deg)" } },
                    ping: {
                        "75%, 100%": { transform: "scale(2)", opacity: "0" },
                    },
                    pulse: { "50%": { opacity: ".5" } },
                    bounce: {
                        "0%, 100%": {
                            transform: "translateY(-25%)",
                            animationTimingFunction: "cubic-bezier(0.8,0,1,1)",
                        },
                        "50%": {
                            transform: "none",
                            animationTimingFunction: "cubic-bezier(0,0,0.2,1)",
                        },
                    },
                },
                letterSpacing: {
                    tighter: "-0.05em",
                    tight: "-0.025em",
                    normal: "0em",
                    wide: "0.025em",
                    wider: "0.05em",
                    widest: "0.1em",
                },
                lineHeight: {
                    none: "1",
                    tight: "1.25",
                    snug: "1.375",
                    normal: "1.5",
                    relaxed: "1.625",
                    loose: "2",
                    3: ".75rem",
                    4: "1rem",
                    5: "1.25rem",
                    6: "1.5rem",
                    7: "1.75rem",
                    8: "2rem",
                    9: "2.25rem",
                    10: "2.5rem",
                },
                listStyleType: {
                    none: "none",
                    disc: "disc",
                    decimal: "decimal",
                },
                listStyleImage: { none: "none" },
                margin: ({ theme: i }) => ({ auto: "auto", ...i("spacing") }),
                lineClamp: { 1: "1", 2: "2", 3: "3", 4: "4", 5: "5", 6: "6" },
                maxHeight: ({ theme: i }) => ({
                    ...i("spacing"),
                    none: "none",
                    full: "100%",
                    screen: "100vh",
                    min: "min-content",
                    max: "max-content",
                    fit: "fit-content",
                }),
                maxWidth: ({ theme: i, breakpoints: e }) => ({
                    none: "none",
                    0: "0rem",
                    xs: "20rem",
                    sm: "24rem",
                    md: "28rem",
                    lg: "32rem",
                    xl: "36rem",
                    "2xl": "42rem",
                    "3xl": "48rem",
                    "4xl": "56rem",
                    "5xl": "64rem",
                    "6xl": "72rem",
                    "7xl": "80rem",
                    full: "100%",
                    min: "min-content",
                    max: "max-content",
                    fit: "fit-content",
                    prose: "65ch",
                    ...e(i("screens")),
                }),
                minHeight: {
                    0: "0px",
                    full: "100%",
                    screen: "100vh",
                    min: "min-content",
                    max: "max-content",
                    fit: "fit-content",
                },
                minWidth: {
                    0: "0px",
                    full: "100%",
                    min: "min-content",
                    max: "max-content",
                    fit: "fit-content",
                },
                objectPosition: {
                    bottom: "bottom",
                    center: "center",
                    left: "left",
                    "left-bottom": "left bottom",
                    "left-top": "left top",
                    right: "right",
                    "right-bottom": "right bottom",
                    "right-top": "right top",
                    top: "top",
                },
                opacity: {
                    0: "0",
                    5: "0.05",
                    10: "0.1",
                    20: "0.2",
                    25: "0.25",
                    30: "0.3",
                    40: "0.4",
                    50: "0.5",
                    60: "0.6",
                    70: "0.7",
                    75: "0.75",
                    80: "0.8",
                    90: "0.9",
                    95: "0.95",
                    100: "1",
                },
                order: {
                    first: "-9999",
                    last: "9999",
                    none: "0",
                    1: "1",
                    2: "2",
                    3: "3",
                    4: "4",
                    5: "5",
                    6: "6",
                    7: "7",
                    8: "8",
                    9: "9",
                    10: "10",
                    11: "11",
                    12: "12",
                },
                outlineColor: ({ theme: i }) => i("colors"),
                outlineOffset: {
                    0: "0px",
                    1: "1px",
                    2: "2px",
                    4: "4px",
                    8: "8px",
                },
                outlineWidth: {
                    0: "0px",
                    1: "1px",
                    2: "2px",
                    4: "4px",
                    8: "8px",
                },
                padding: ({ theme: i }) => i("spacing"),
                placeholderColor: ({ theme: i }) => i("colors"),
                placeholderOpacity: ({ theme: i }) => i("opacity"),
                ringColor: ({ theme: i }) => ({
                    DEFAULT: i("colors.blue.500", "#3b82f6"),
                    ...i("colors"),
                }),
                ringOffsetColor: ({ theme: i }) => i("colors"),
                ringOffsetWidth: {
                    0: "0px",
                    1: "1px",
                    2: "2px",
                    4: "4px",
                    8: "8px",
                },
                ringOpacity: ({ theme: i }) => ({
                    DEFAULT: "0.5",
                    ...i("opacity"),
                }),
                ringWidth: {
                    DEFAULT: "3px",
                    0: "0px",
                    1: "1px",
                    2: "2px",
                    4: "4px",
                    8: "8px",
                },
                rotate: {
                    0: "0deg",
                    1: "1deg",
                    2: "2deg",
                    3: "3deg",
                    6: "6deg",
                    12: "12deg",
                    45: "45deg",
                    90: "90deg",
                    180: "180deg",
                },
                saturate: { 0: "0", 50: ".5", 100: "1", 150: "1.5", 200: "2" },
                scale: {
                    0: "0",
                    50: ".5",
                    75: ".75",
                    90: ".9",
                    95: ".95",
                    100: "1",
                    105: "1.05",
                    110: "1.1",
                    125: "1.25",
                    150: "1.5",
                },
                screens: {
                    sm: "640px",
                    md: "768px",
                    lg: "1024px",
                    xl: "1280px",
                    "2xl": "1536px",
                },
                scrollMargin: ({ theme: i }) => ({ ...i("spacing") }),
                scrollPadding: ({ theme: i }) => i("spacing"),
                sepia: { 0: "0", DEFAULT: "100%" },
                skew: {
                    0: "0deg",
                    1: "1deg",
                    2: "2deg",
                    3: "3deg",
                    6: "6deg",
                    12: "12deg",
                },
                space: ({ theme: i }) => ({ ...i("spacing") }),
                spacing: {
                    px: "1px",
                    0: "0px",
                    0.5: "0.125rem",
                    1: "0.25rem",
                    1.5: "0.375rem",
                    2: "0.5rem",
                    2.5: "0.625rem",
                    3: "0.75rem",
                    3.5: "0.875rem",
                    4: "1rem",
                    5: "1.25rem",
                    6: "1.5rem",
                    7: "1.75rem",
                    8: "2rem",
                    9: "2.25rem",
                    10: "2.5rem",
                    11: "2.75rem",
                    12: "3rem",
                    14: "3.5rem",
                    16: "4rem",
                    20: "5rem",
                    24: "6rem",
                    28: "7rem",
                    32: "8rem",
                    36: "9rem",
                    40: "10rem",
                    44: "11rem",
                    48: "12rem",
                    52: "13rem",
                    56: "14rem",
                    60: "15rem",
                    64: "16rem",
                    72: "18rem",
                    80: "20rem",
                    96: "24rem",
                },
                stroke: ({ theme: i }) => ({ none: "none", ...i("colors") }),
                strokeWidth: { 0: "0", 1: "1", 2: "2" },
                supports: {},
                data: {},
                textColor: ({ theme: i }) => i("colors"),
                textDecorationColor: ({ theme: i }) => i("colors"),
                textDecorationThickness: {
                    auto: "auto",
                    "from-font": "from-font",
                    0: "0px",
                    1: "1px",
                    2: "2px",
                    4: "4px",
                    8: "8px",
                },
                textIndent: ({ theme: i }) => ({ ...i("spacing") }),
                textOpacity: ({ theme: i }) => i("opacity"),
                textUnderlineOffset: {
                    auto: "auto",
                    0: "0px",
                    1: "1px",
                    2: "2px",
                    4: "4px",
                    8: "8px",
                },
                transformOrigin: {
                    center: "center",
                    top: "top",
                    "top-right": "top right",
                    right: "right",
                    "bottom-right": "bottom right",
                    bottom: "bottom",
                    "bottom-left": "bottom left",
                    left: "left",
                    "top-left": "top left",
                },
                transitionDelay: {
                    0: "0s",
                    75: "75ms",
                    100: "100ms",
                    150: "150ms",
                    200: "200ms",
                    300: "300ms",
                    500: "500ms",
                    700: "700ms",
                    1e3: "1000ms",
                },
                transitionDuration: {
                    DEFAULT: "150ms",
                    0: "0s",
                    75: "75ms",
                    100: "100ms",
                    150: "150ms",
                    200: "200ms",
                    300: "300ms",
                    500: "500ms",
                    700: "700ms",
                    1e3: "1000ms",
                },
                transitionProperty: {
                    none: "none",
                    all: "all",
                    DEFAULT:
                        "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter",
                    colors: "color, background-color, border-color, text-decoration-color, fill, stroke",
                    opacity: "opacity",
                    shadow: "box-shadow",
                    transform: "transform",
                },
                transitionTimingFunction: {
                    DEFAULT: "cubic-bezier(0.4, 0, 0.2, 1)",
                    linear: "linear",
                    in: "cubic-bezier(0.4, 0, 1, 1)",
                    out: "cubic-bezier(0, 0, 0.2, 1)",
                    "in-out": "cubic-bezier(0.4, 0, 0.2, 1)",
                },
                translate: ({ theme: i }) => ({
                    ...i("spacing"),
                    "1/2": "50%",
                    "1/3": "33.333333%",
                    "2/3": "66.666667%",
                    "1/4": "25%",
                    "2/4": "50%",
                    "3/4": "75%",
                    full: "100%",
                }),
                width: ({ theme: i }) => ({
                    auto: "auto",
                    ...i("spacing"),
                    "1/2": "50%",
                    "1/3": "33.333333%",
                    "2/3": "66.666667%",
                    "1/4": "25%",
                    "2/4": "50%",
                    "3/4": "75%",
                    "1/5": "20%",
                    "2/5": "40%",
                    "3/5": "60%",
                    "4/5": "80%",
                    "1/6": "16.666667%",
                    "2/6": "33.333333%",
                    "3/6": "50%",
                    "4/6": "66.666667%",
                    "5/6": "83.333333%",
                    "1/12": "8.333333%",
                    "2/12": "16.666667%",
                    "3/12": "25%",
                    "4/12": "33.333333%",
                    "5/12": "41.666667%",
                    "6/12": "50%",
                    "7/12": "58.333333%",
                    "8/12": "66.666667%",
                    "9/12": "75%",
                    "10/12": "83.333333%",
                    "11/12": "91.666667%",
                    full: "100%",
                    screen: "100vw",
                    min: "min-content",
                    max: "max-content",
                    fit: "fit-content",
                }),
                willChange: {
                    auto: "auto",
                    scroll: "scroll-position",
                    contents: "contents",
                    transform: "transform",
                },
                zIndex: {
                    auto: "auto",
                    0: "0",
                    10: "10",
                    20: "20",
                    30: "30",
                    40: "40",
                    50: "50",
                },
            },
            plugins: [],
        };
    });
    function vi(i) {
        let e = (i?.presets ?? [ef.default])
                .slice()
                .reverse()
                .flatMap((n) => vi(n instanceof Function ? n() : n)),
            t = {
                respectDefaultRingColorOpacity: {
                    theme: {
                        ringColor: ({ theme: n }) => ({
                            DEFAULT: "#3b82f67f",
                            ...n("colors"),
                        }),
                    },
                },
                disableColorOpacityUtilitiesByDefault: {
                    corePlugins: {
                        backgroundOpacity: !1,
                        borderOpacity: !1,
                        divideOpacity: !1,
                        placeholderOpacity: !1,
                        ringOpacity: !1,
                        textOpacity: !1,
                    },
                },
            },
            r = Object.keys(t)
                .filter((n) => J(i, n))
                .map((n) => t[n]);
        return [i, ...r, ...e];
    }
    var ef,
        tf = C(() => {
            l();
            ef = K(bi());
            De();
        });
    var rf = {};
    Ae(rf, { default: () => dr });
    function dr(...i) {
        let [, ...e] = vi(i[0]);
        return ms([...i, ...e]);
    }
    var gs = C(() => {
        l();
        Ku();
        tf();
    });
    var nf = {};
    Ae(nf, { default: () => Z });
    var Z,
        mt = C(() => {
            l();
            Z = { resolve: (i) => i, extname: (i) => "." + i.split(".").pop() };
        });
    function xi(i) {
        return typeof i == "object" && i !== null;
    }
    function o0(i) {
        return Object.keys(i).length === 0;
    }
    function sf(i) {
        return typeof i == "string" || i instanceof String;
    }
    function ys(i) {
        return xi(i) && i.config === void 0 && !o0(i)
            ? null
            : xi(i) && i.config !== void 0 && sf(i.config)
            ? Z.resolve(i.config)
            : xi(i) && i.config !== void 0 && xi(i.config)
            ? null
            : sf(i)
            ? Z.resolve(i)
            : l0();
    }
    function l0() {
        for (let i of a0)
            try {
                let e = Z.resolve(i);
                return te.accessSync(e), e;
            } catch (e) {}
        return null;
    }
    var a0,
        af = C(() => {
            l();
            ze();
            mt();
            a0 = [
                "./tailwind.config.js",
                "./tailwind.config.cjs",
                "./tailwind.config.mjs",
                "./tailwind.config.ts",
            ];
        });
    var of = {};
    Ae(of, { default: () => ws });
    var ws,
        bs = C(() => {
            l();
            ws = { parse: (i) => ({ href: i }) };
        });
    var vs = v(() => {
        l();
    });
    var ki = v((fT, ff) => {
        l();
        ("use strict");
        var lf = (ci(), vu),
            uf = vs(),
            Ct = class extends Error {
                constructor(e, t, r, n, a, s) {
                    super(e);
                    (this.name = "CssSyntaxError"),
                        (this.reason = e),
                        a && (this.file = a),
                        n && (this.source = n),
                        s && (this.plugin = s),
                        typeof t != "undefined" &&
                            typeof r != "undefined" &&
                            (typeof t == "number"
                                ? ((this.line = t), (this.column = r))
                                : ((this.line = t.line),
                                  (this.column = t.column),
                                  (this.endLine = r.line),
                                  (this.endColumn = r.column))),
                        this.setMessage(),
                        Error.captureStackTrace &&
                            Error.captureStackTrace(this, Ct);
                }
                setMessage() {
                    (this.message = this.plugin ? this.plugin + ": " : ""),
                        (this.message += this.file ? this.file : "<css input>"),
                        typeof this.line != "undefined" &&
                            (this.message +=
                                ":" + this.line + ":" + this.column),
                        (this.message += ": " + this.reason);
                }
                showSourceCode(e) {
                    if (!this.source) return "";
                    let t = this.source;
                    e == null && (e = lf.isColorSupported),
                        uf && e && (t = uf(t));
                    let r = t.split(/\r?\n/),
                        n = Math.max(this.line - 3, 0),
                        a = Math.min(this.line + 2, r.length),
                        s = String(a).length,
                        o,
                        u;
                    if (e) {
                        let { bold: c, red: f, gray: p } = lf.createColors(!0);
                        (o = (d) => c(f(d))), (u = (d) => p(d));
                    } else o = u = (c) => c;
                    return r.slice(n, a).map((c, f) => {
                        let p = n + 1 + f,
                            d = " " + (" " + p).slice(-s) + " | ";
                        if (p === this.line) {
                            let h =
                                u(d.replace(/\d/g, " ")) +
                                c
                                    .slice(0, this.column - 1)
                                    .replace(/[^\t]/g, " ");
                            return (
                                o(">") +
                                u(d) +
                                c +
                                `
 ` +
                                h +
                                o("^")
                            );
                        }
                        return " " + u(d) + c;
                    }).join(`
`);
                }
                toString() {
                    let e = this.showSourceCode();
                    return (
                        e &&
                            (e =
                                `

` +
                                e +
                                `
`),
                        this.name + ": " + this.message + e
                    );
                }
            };
        ff.exports = Ct;
        Ct.default = Ct;
    });
    var Si = v((cT, xs) => {
        l();
        ("use strict");
        xs.exports.isClean = Symbol("isClean");
        xs.exports.my = Symbol("my");
    });
    var ks = v((pT, pf) => {
        l();
        ("use strict");
        var cf = {
            colon: ": ",
            indent: "    ",
            beforeDecl: `
`,
            beforeRule: `
`,
            beforeOpen: " ",
            beforeClose: `
`,
            beforeComment: `
`,
            after: `
`,
            emptyBody: "",
            commentLeft: " ",
            commentRight: " ",
            semicolon: !1,
        };
        function u0(i) {
            return i[0].toUpperCase() + i.slice(1);
        }
        var Ci = class {
            constructor(e) {
                this.builder = e;
            }
            stringify(e, t) {
                if (!this[e.type])
                    throw new Error(
                        "Unknown AST node type " +
                            e.type +
                            ". Maybe you need to change PostCSS stringifier."
                    );
                this[e.type](e, t);
            }
            document(e) {
                this.body(e);
            }
            root(e) {
                this.body(e), e.raws.after && this.builder(e.raws.after);
            }
            comment(e) {
                let t = this.raw(e, "left", "commentLeft"),
                    r = this.raw(e, "right", "commentRight");
                this.builder("/*" + t + e.text + r + "*/", e);
            }
            decl(e, t) {
                let r = this.raw(e, "between", "colon"),
                    n = e.prop + r + this.rawValue(e, "value");
                e.important && (n += e.raws.important || " !important"),
                    t && (n += ";"),
                    this.builder(n, e);
            }
            rule(e) {
                this.block(e, this.rawValue(e, "selector")),
                    e.raws.ownSemicolon &&
                        this.builder(e.raws.ownSemicolon, e, "end");
            }
            atrule(e, t) {
                let r = "@" + e.name,
                    n = e.params ? this.rawValue(e, "params") : "";
                if (
                    (typeof e.raws.afterName != "undefined"
                        ? (r += e.raws.afterName)
                        : n && (r += " "),
                    e.nodes)
                )
                    this.block(e, r + n);
                else {
                    let a = (e.raws.between || "") + (t ? ";" : "");
                    this.builder(r + n + a, e);
                }
            }
            body(e) {
                let t = e.nodes.length - 1;
                for (; t > 0 && e.nodes[t].type === "comment"; ) t -= 1;
                let r = this.raw(e, "semicolon");
                for (let n = 0; n < e.nodes.length; n++) {
                    let a = e.nodes[n],
                        s = this.raw(a, "before");
                    s && this.builder(s), this.stringify(a, t !== n || r);
                }
            }
            block(e, t) {
                let r = this.raw(e, "between", "beforeOpen");
                this.builder(t + r + "{", e, "start");
                let n;
                e.nodes && e.nodes.length
                    ? (this.body(e), (n = this.raw(e, "after")))
                    : (n = this.raw(e, "after", "emptyBody")),
                    n && this.builder(n),
                    this.builder("}", e, "end");
            }
            raw(e, t, r) {
                let n;
                if (
                    (r || (r = t),
                    t && ((n = e.raws[t]), typeof n != "undefined"))
                )
                    return n;
                let a = e.parent;
                if (
                    r === "before" &&
                    (!a ||
                        (a.type === "root" && a.first === e) ||
                        (a && a.type === "document"))
                )
                    return "";
                if (!a) return cf[r];
                let s = e.root();
                if (
                    (s.rawCache || (s.rawCache = {}),
                    typeof s.rawCache[r] != "undefined")
                )
                    return s.rawCache[r];
                if (r === "before" || r === "after")
                    return this.beforeAfter(e, r);
                {
                    let o = "raw" + u0(r);
                    this[o]
                        ? (n = this[o](s, e))
                        : s.walk((u) => {
                              if (((n = u.raws[t]), typeof n != "undefined"))
                                  return !1;
                          });
                }
                return (
                    typeof n == "undefined" && (n = cf[r]),
                    (s.rawCache[r] = n),
                    n
                );
            }
            rawSemicolon(e) {
                let t;
                return (
                    e.walk((r) => {
                        if (
                            r.nodes &&
                            r.nodes.length &&
                            r.last.type === "decl" &&
                            ((t = r.raws.semicolon), typeof t != "undefined")
                        )
                            return !1;
                    }),
                    t
                );
            }
            rawEmptyBody(e) {
                let t;
                return (
                    e.walk((r) => {
                        if (
                            r.nodes &&
                            r.nodes.length === 0 &&
                            ((t = r.raws.after), typeof t != "undefined")
                        )
                            return !1;
                    }),
                    t
                );
            }
            rawIndent(e) {
                if (e.raws.indent) return e.raws.indent;
                let t;
                return (
                    e.walk((r) => {
                        let n = r.parent;
                        if (
                            n &&
                            n !== e &&
                            n.parent &&
                            n.parent === e &&
                            typeof r.raws.before != "undefined"
                        ) {
                            let a = r.raws.before.split(`
`);
                            return (
                                (t = a[a.length - 1]),
                                (t = t.replace(/\S/g, "")),
                                !1
                            );
                        }
                    }),
                    t
                );
            }
            rawBeforeComment(e, t) {
                let r;
                return (
                    e.walkComments((n) => {
                        if (typeof n.raws.before != "undefined")
                            return (
                                (r = n.raws.before),
                                r.includes(`
`) && (r = r.replace(/[^\n]+$/, "")),
                                !1
                            );
                    }),
                    typeof r == "undefined"
                        ? (r = this.raw(t, null, "beforeDecl"))
                        : r && (r = r.replace(/\S/g, "")),
                    r
                );
            }
            rawBeforeDecl(e, t) {
                let r;
                return (
                    e.walkDecls((n) => {
                        if (typeof n.raws.before != "undefined")
                            return (
                                (r = n.raws.before),
                                r.includes(`
`) && (r = r.replace(/[^\n]+$/, "")),
                                !1
                            );
                    }),
                    typeof r == "undefined"
                        ? (r = this.raw(t, null, "beforeRule"))
                        : r && (r = r.replace(/\S/g, "")),
                    r
                );
            }
            rawBeforeRule(e) {
                let t;
                return (
                    e.walk((r) => {
                        if (
                            r.nodes &&
                            (r.parent !== e || e.first !== r) &&
                            typeof r.raws.before != "undefined"
                        )
                            return (
                                (t = r.raws.before),
                                t.includes(`
`) && (t = t.replace(/[^\n]+$/, "")),
                                !1
                            );
                    }),
                    t && (t = t.replace(/\S/g, "")),
                    t
                );
            }
            rawBeforeClose(e) {
                let t;
                return (
                    e.walk((r) => {
                        if (
                            r.nodes &&
                            r.nodes.length > 0 &&
                            typeof r.raws.after != "undefined"
                        )
                            return (
                                (t = r.raws.after),
                                t.includes(`
`) && (t = t.replace(/[^\n]+$/, "")),
                                !1
                            );
                    }),
                    t && (t = t.replace(/\S/g, "")),
                    t
                );
            }
            rawBeforeOpen(e) {
                let t;
                return (
                    e.walk((r) => {
                        if (
                            r.type !== "decl" &&
                            ((t = r.raws.between), typeof t != "undefined")
                        )
                            return !1;
                    }),
                    t
                );
            }
            rawColon(e) {
                let t;
                return (
                    e.walkDecls((r) => {
                        if (typeof r.raws.between != "undefined")
                            return (
                                (t = r.raws.between.replace(/[^\s:]/g, "")), !1
                            );
                    }),
                    t
                );
            }
            beforeAfter(e, t) {
                let r;
                e.type === "decl"
                    ? (r = this.raw(e, null, "beforeDecl"))
                    : e.type === "comment"
                    ? (r = this.raw(e, null, "beforeComment"))
                    : t === "before"
                    ? (r = this.raw(e, null, "beforeRule"))
                    : (r = this.raw(e, null, "beforeClose"));
                let n = e.parent,
                    a = 0;
                for (; n && n.type !== "root"; ) (a += 1), (n = n.parent);
                if (
                    r.includes(`
`)
                ) {
                    let s = this.raw(e, null, "indent");
                    if (s.length) for (let o = 0; o < a; o++) r += s;
                }
                return r;
            }
            rawValue(e, t) {
                let r = e[t],
                    n = e.raws[t];
                return n && n.value === r ? n.raw : r;
            }
        };
        pf.exports = Ci;
        Ci.default = Ci;
    });
    var hr = v((dT, df) => {
        l();
        ("use strict");
        var f0 = ks();
        function Ss(i, e) {
            new f0(e).stringify(i);
        }
        df.exports = Ss;
        Ss.default = Ss;
    });
    var mr = v((hT, hf) => {
        l();
        ("use strict");
        var { isClean: Ai, my: c0 } = Si(),
            p0 = ki(),
            d0 = ks(),
            h0 = hr();
        function Cs(i, e) {
            let t = new i.constructor();
            for (let r in i) {
                if (
                    !Object.prototype.hasOwnProperty.call(i, r) ||
                    r === "proxyCache"
                )
                    continue;
                let n = i[r],
                    a = typeof n;
                r === "parent" && a === "object"
                    ? e && (t[r] = e)
                    : r === "source"
                    ? (t[r] = n)
                    : Array.isArray(n)
                    ? (t[r] = n.map((s) => Cs(s, t)))
                    : (a === "object" && n !== null && (n = Cs(n)), (t[r] = n));
            }
            return t;
        }
        var _i = class {
            constructor(e = {}) {
                (this.raws = {}), (this[Ai] = !1), (this[c0] = !0);
                for (let t in e)
                    if (t === "nodes") {
                        this.nodes = [];
                        for (let r of e[t])
                            typeof r.clone == "function"
                                ? this.append(r.clone())
                                : this.append(r);
                    } else this[t] = e[t];
            }
            error(e, t = {}) {
                if (this.source) {
                    let { start: r, end: n } = this.rangeBy(t);
                    return this.source.input.error(
                        e,
                        { line: r.line, column: r.column },
                        { line: n.line, column: n.column },
                        t
                    );
                }
                return new p0(e);
            }
            warn(e, t, r) {
                let n = { node: this };
                for (let a in r) n[a] = r[a];
                return e.warn(t, n);
            }
            remove() {
                return (
                    this.parent && this.parent.removeChild(this),
                    (this.parent = void 0),
                    this
                );
            }
            toString(e = h0) {
                e.stringify && (e = e.stringify);
                let t = "";
                return (
                    e(this, (r) => {
                        t += r;
                    }),
                    t
                );
            }
            assign(e = {}) {
                for (let t in e) this[t] = e[t];
                return this;
            }
            clone(e = {}) {
                let t = Cs(this);
                for (let r in e) t[r] = e[r];
                return t;
            }
            cloneBefore(e = {}) {
                let t = this.clone(e);
                return this.parent.insertBefore(this, t), t;
            }
            cloneAfter(e = {}) {
                let t = this.clone(e);
                return this.parent.insertAfter(this, t), t;
            }
            replaceWith(...e) {
                if (this.parent) {
                    let t = this,
                        r = !1;
                    for (let n of e)
                        n === this
                            ? (r = !0)
                            : r
                            ? (this.parent.insertAfter(t, n), (t = n))
                            : this.parent.insertBefore(t, n);
                    r || this.remove();
                }
                return this;
            }
            next() {
                if (!this.parent) return;
                let e = this.parent.index(this);
                return this.parent.nodes[e + 1];
            }
            prev() {
                if (!this.parent) return;
                let e = this.parent.index(this);
                return this.parent.nodes[e - 1];
            }
            before(e) {
                return this.parent.insertBefore(this, e), this;
            }
            after(e) {
                return this.parent.insertAfter(this, e), this;
            }
            root() {
                let e = this;
                for (; e.parent && e.parent.type !== "document"; ) e = e.parent;
                return e;
            }
            raw(e, t) {
                return new d0().raw(this, e, t);
            }
            cleanRaws(e) {
                delete this.raws.before,
                    delete this.raws.after,
                    e || delete this.raws.between;
            }
            toJSON(e, t) {
                let r = {},
                    n = t == null;
                t = t || new Map();
                let a = 0;
                for (let s in this) {
                    if (
                        !Object.prototype.hasOwnProperty.call(this, s) ||
                        s === "parent" ||
                        s === "proxyCache"
                    )
                        continue;
                    let o = this[s];
                    if (Array.isArray(o))
                        r[s] = o.map((u) =>
                            typeof u == "object" && u.toJSON
                                ? u.toJSON(null, t)
                                : u
                        );
                    else if (typeof o == "object" && o.toJSON)
                        r[s] = o.toJSON(null, t);
                    else if (s === "source") {
                        let u = t.get(o.input);
                        u == null && ((u = a), t.set(o.input, a), a++),
                            (r[s] = { inputId: u, start: o.start, end: o.end });
                    } else r[s] = o;
                }
                return (
                    n && (r.inputs = [...t.keys()].map((s) => s.toJSON())), r
                );
            }
            positionInside(e) {
                let t = this.toString(),
                    r = this.source.start.column,
                    n = this.source.start.line;
                for (let a = 0; a < e; a++)
                    t[a] ===
                    `
`
                        ? ((r = 1), (n += 1))
                        : (r += 1);
                return { line: n, column: r };
            }
            positionBy(e) {
                let t = this.source.start;
                if (e.index) t = this.positionInside(e.index);
                else if (e.word) {
                    let r = this.toString().indexOf(e.word);
                    r !== -1 && (t = this.positionInside(r));
                }
                return t;
            }
            rangeBy(e) {
                let t = {
                        line: this.source.start.line,
                        column: this.source.start.column,
                    },
                    r = this.source.end
                        ? {
                              line: this.source.end.line,
                              column: this.source.end.column + 1,
                          }
                        : { line: t.line, column: t.column + 1 };
                if (e.word) {
                    let n = this.toString().indexOf(e.word);
                    n !== -1 &&
                        ((t = this.positionInside(n)),
                        (r = this.positionInside(n + e.word.length)));
                } else
                    e.start
                        ? (t = { line: e.start.line, column: e.start.column })
                        : e.index && (t = this.positionInside(e.index)),
                        e.end
                            ? (r = { line: e.end.line, column: e.end.column })
                            : e.endIndex
                            ? (r = this.positionInside(e.endIndex))
                            : e.index && (r = this.positionInside(e.index + 1));
                return (
                    (r.line < t.line ||
                        (r.line === t.line && r.column <= t.column)) &&
                        (r = { line: t.line, column: t.column + 1 }),
                    { start: t, end: r }
                );
            }
            getProxyProcessor() {
                return {
                    set(e, t, r) {
                        return (
                            e[t] === r ||
                                ((e[t] = r),
                                (t === "prop" ||
                                    t === "value" ||
                                    t === "name" ||
                                    t === "params" ||
                                    t === "important" ||
                                    t === "text") &&
                                    e.markDirty()),
                            !0
                        );
                    },
                    get(e, t) {
                        return t === "proxyOf"
                            ? e
                            : t === "root"
                            ? () => e.root().toProxy()
                            : e[t];
                    },
                };
            }
            toProxy() {
                return (
                    this.proxyCache ||
                        (this.proxyCache = new Proxy(
                            this,
                            this.getProxyProcessor()
                        )),
                    this.proxyCache
                );
            }
            addToError(e) {
                if (
                    ((e.postcssNode = this),
                    e.stack && this.source && /\n\s{4}at /.test(e.stack))
                ) {
                    let t = this.source;
                    e.stack = e.stack.replace(
                        /\n\s{4}at /,
                        `$&${t.input.from}:${t.start.line}:${t.start.column}$&`
                    );
                }
                return e;
            }
            markDirty() {
                if (this[Ai]) {
                    this[Ai] = !1;
                    let e = this;
                    for (; (e = e.parent); ) e[Ai] = !1;
                }
            }
            get proxyOf() {
                return this;
            }
        };
        hf.exports = _i;
        _i.default = _i;
    });
    var gr = v((mT, mf) => {
        l();
        ("use strict");
        var m0 = mr(),
            Ei = class extends m0 {
                constructor(e) {
                    e &&
                        typeof e.value != "undefined" &&
                        typeof e.value != "string" &&
                        (e = { ...e, value: String(e.value) });
                    super(e);
                    this.type = "decl";
                }
                get variable() {
                    return this.prop.startsWith("--") || this.prop[0] === "$";
                }
            };
        mf.exports = Ei;
        Ei.default = Ei;
    });
    var As = v((gT, gf) => {
        l();
        gf.exports = function (i, e) {
            return {
                generate: () => {
                    let t = "";
                    return (
                        i(e, (r) => {
                            t += r;
                        }),
                        [t]
                    );
                },
            };
        };
    });
    var yr = v((yT, yf) => {
        l();
        ("use strict");
        var g0 = mr(),
            Oi = class extends g0 {
                constructor(e) {
                    super(e);
                    this.type = "comment";
                }
            };
        yf.exports = Oi;
        Oi.default = Oi;
    });
    var it = v((wT, _f) => {
        l();
        ("use strict");
        var { isClean: wf, my: bf } = Si(),
            vf = gr(),
            xf = yr(),
            y0 = mr(),
            kf,
            _s,
            Es,
            Sf;
        function Cf(i) {
            return i.map(
                (e) => (e.nodes && (e.nodes = Cf(e.nodes)), delete e.source, e)
            );
        }
        function Af(i) {
            if (((i[wf] = !1), i.proxyOf.nodes))
                for (let e of i.proxyOf.nodes) Af(e);
        }
        var ye = class extends y0 {
            push(e) {
                return (e.parent = this), this.proxyOf.nodes.push(e), this;
            }
            each(e) {
                if (!this.proxyOf.nodes) return;
                let t = this.getIterator(),
                    r,
                    n;
                for (
                    ;
                    this.indexes[t] < this.proxyOf.nodes.length &&
                    ((r = this.indexes[t]),
                    (n = e(this.proxyOf.nodes[r], r)),
                    n !== !1);

                )
                    this.indexes[t] += 1;
                return delete this.indexes[t], n;
            }
            walk(e) {
                return this.each((t, r) => {
                    let n;
                    try {
                        n = e(t, r);
                    } catch (a) {
                        throw t.addToError(a);
                    }
                    return n !== !1 && t.walk && (n = t.walk(e)), n;
                });
            }
            walkDecls(e, t) {
                return t
                    ? e instanceof RegExp
                        ? this.walk((r, n) => {
                              if (r.type === "decl" && e.test(r.prop))
                                  return t(r, n);
                          })
                        : this.walk((r, n) => {
                              if (r.type === "decl" && r.prop === e)
                                  return t(r, n);
                          })
                    : ((t = e),
                      this.walk((r, n) => {
                          if (r.type === "decl") return t(r, n);
                      }));
            }
            walkRules(e, t) {
                return t
                    ? e instanceof RegExp
                        ? this.walk((r, n) => {
                              if (r.type === "rule" && e.test(r.selector))
                                  return t(r, n);
                          })
                        : this.walk((r, n) => {
                              if (r.type === "rule" && r.selector === e)
                                  return t(r, n);
                          })
                    : ((t = e),
                      this.walk((r, n) => {
                          if (r.type === "rule") return t(r, n);
                      }));
            }
            walkAtRules(e, t) {
                return t
                    ? e instanceof RegExp
                        ? this.walk((r, n) => {
                              if (r.type === "atrule" && e.test(r.name))
                                  return t(r, n);
                          })
                        : this.walk((r, n) => {
                              if (r.type === "atrule" && r.name === e)
                                  return t(r, n);
                          })
                    : ((t = e),
                      this.walk((r, n) => {
                          if (r.type === "atrule") return t(r, n);
                      }));
            }
            walkComments(e) {
                return this.walk((t, r) => {
                    if (t.type === "comment") return e(t, r);
                });
            }
            append(...e) {
                for (let t of e) {
                    let r = this.normalize(t, this.last);
                    for (let n of r) this.proxyOf.nodes.push(n);
                }
                return this.markDirty(), this;
            }
            prepend(...e) {
                e = e.reverse();
                for (let t of e) {
                    let r = this.normalize(t, this.first, "prepend").reverse();
                    for (let n of r) this.proxyOf.nodes.unshift(n);
                    for (let n in this.indexes)
                        this.indexes[n] = this.indexes[n] + r.length;
                }
                return this.markDirty(), this;
            }
            cleanRaws(e) {
                if ((super.cleanRaws(e), this.nodes))
                    for (let t of this.nodes) t.cleanRaws(e);
            }
            insertBefore(e, t) {
                let r = this.index(e),
                    n = r === 0 ? "prepend" : !1,
                    a = this.normalize(t, this.proxyOf.nodes[r], n).reverse();
                r = this.index(e);
                for (let o of a) this.proxyOf.nodes.splice(r, 0, o);
                let s;
                for (let o in this.indexes)
                    (s = this.indexes[o]),
                        r <= s && (this.indexes[o] = s + a.length);
                return this.markDirty(), this;
            }
            insertAfter(e, t) {
                let r = this.index(e),
                    n = this.normalize(t, this.proxyOf.nodes[r]).reverse();
                r = this.index(e);
                for (let s of n) this.proxyOf.nodes.splice(r + 1, 0, s);
                let a;
                for (let s in this.indexes)
                    (a = this.indexes[s]),
                        r < a && (this.indexes[s] = a + n.length);
                return this.markDirty(), this;
            }
            removeChild(e) {
                (e = this.index(e)),
                    (this.proxyOf.nodes[e].parent = void 0),
                    this.proxyOf.nodes.splice(e, 1);
                let t;
                for (let r in this.indexes)
                    (t = this.indexes[r]), t >= e && (this.indexes[r] = t - 1);
                return this.markDirty(), this;
            }
            removeAll() {
                for (let e of this.proxyOf.nodes) e.parent = void 0;
                return (this.proxyOf.nodes = []), this.markDirty(), this;
            }
            replaceValues(e, t, r) {
                return (
                    r || ((r = t), (t = {})),
                    this.walkDecls((n) => {
                        (t.props && !t.props.includes(n.prop)) ||
                            (t.fast && !n.value.includes(t.fast)) ||
                            (n.value = n.value.replace(e, r));
                    }),
                    this.markDirty(),
                    this
                );
            }
            every(e) {
                return this.nodes.every(e);
            }
            some(e) {
                return this.nodes.some(e);
            }
            index(e) {
                return typeof e == "number"
                    ? e
                    : (e.proxyOf && (e = e.proxyOf),
                      this.proxyOf.nodes.indexOf(e));
            }
            get first() {
                if (!!this.proxyOf.nodes) return this.proxyOf.nodes[0];
            }
            get last() {
                if (!!this.proxyOf.nodes)
                    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1];
            }
            normalize(e, t) {
                if (typeof e == "string") e = Cf(kf(e).nodes);
                else if (Array.isArray(e)) {
                    e = e.slice(0);
                    for (let n of e)
                        n.parent && n.parent.removeChild(n, "ignore");
                } else if (e.type === "root" && this.type !== "document") {
                    e = e.nodes.slice(0);
                    for (let n of e)
                        n.parent && n.parent.removeChild(n, "ignore");
                } else if (e.type) e = [e];
                else if (e.prop) {
                    if (typeof e.value == "undefined")
                        throw new Error(
                            "Value field is missed in node creation"
                        );
                    typeof e.value != "string" && (e.value = String(e.value)),
                        (e = [new vf(e)]);
                } else if (e.selector) e = [new _s(e)];
                else if (e.name) e = [new Es(e)];
                else if (e.text) e = [new xf(e)];
                else throw new Error("Unknown node type in node creation");
                return e.map(
                    (n) => (
                        n[bf] || ye.rebuild(n),
                        (n = n.proxyOf),
                        n.parent && n.parent.removeChild(n),
                        n[wf] && Af(n),
                        typeof n.raws.before == "undefined" &&
                            t &&
                            typeof t.raws.before != "undefined" &&
                            (n.raws.before = t.raws.before.replace(/\S/g, "")),
                        (n.parent = this.proxyOf),
                        n
                    )
                );
            }
            getProxyProcessor() {
                return {
                    set(e, t, r) {
                        return (
                            e[t] === r ||
                                ((e[t] = r),
                                (t === "name" ||
                                    t === "params" ||
                                    t === "selector") &&
                                    e.markDirty()),
                            !0
                        );
                    },
                    get(e, t) {
                        return t === "proxyOf"
                            ? e
                            : e[t]
                            ? t === "each" ||
                              (typeof t == "string" && t.startsWith("walk"))
                                ? (...r) =>
                                      e[t](
                                          ...r.map((n) =>
                                              typeof n == "function"
                                                  ? (a, s) => n(a.toProxy(), s)
                                                  : n
                                          )
                                      )
                                : t === "every" || t === "some"
                                ? (r) => e[t]((n, ...a) => r(n.toProxy(), ...a))
                                : t === "root"
                                ? () => e.root().toProxy()
                                : t === "nodes"
                                ? e.nodes.map((r) => r.toProxy())
                                : t === "first" || t === "last"
                                ? e[t].toProxy()
                                : e[t]
                            : e[t];
                    },
                };
            }
            getIterator() {
                this.lastEach || (this.lastEach = 0),
                    this.indexes || (this.indexes = {}),
                    (this.lastEach += 1);
                let e = this.lastEach;
                return (this.indexes[e] = 0), e;
            }
        };
        ye.registerParse = (i) => {
            kf = i;
        };
        ye.registerRule = (i) => {
            _s = i;
        };
        ye.registerAtRule = (i) => {
            Es = i;
        };
        ye.registerRoot = (i) => {
            Sf = i;
        };
        _f.exports = ye;
        ye.default = ye;
        ye.rebuild = (i) => {
            i.type === "atrule"
                ? Object.setPrototypeOf(i, Es.prototype)
                : i.type === "rule"
                ? Object.setPrototypeOf(i, _s.prototype)
                : i.type === "decl"
                ? Object.setPrototypeOf(i, vf.prototype)
                : i.type === "comment"
                ? Object.setPrototypeOf(i, xf.prototype)
                : i.type === "root" && Object.setPrototypeOf(i, Sf.prototype),
                (i[bf] = !0),
                i.nodes &&
                    i.nodes.forEach((e) => {
                        ye.rebuild(e);
                    });
        };
    });
    var Ti = v((bT, Tf) => {
        l();
        ("use strict");
        var w0 = it(),
            Ef,
            Of,
            At = class extends w0 {
                constructor(e) {
                    super({ type: "document", ...e });
                    this.nodes || (this.nodes = []);
                }
                toResult(e = {}) {
                    return new Ef(new Of(), this, e).stringify();
                }
            };
        At.registerLazyResult = (i) => {
            Ef = i;
        };
        At.registerProcessor = (i) => {
            Of = i;
        };
        Tf.exports = At;
        At.default = At;
    });
    var Os = v((vT, Df) => {
        l();
        ("use strict");
        var Pf = {};
        Df.exports = function (e) {
            Pf[e] ||
                ((Pf[e] = !0),
                typeof console != "undefined" &&
                    console.warn &&
                    console.warn(e));
        };
    });
    var Ts = v((xT, If) => {
        l();
        ("use strict");
        var Pi = class {
            constructor(e, t = {}) {
                if (
                    ((this.type = "warning"),
                    (this.text = e),
                    t.node && t.node.source)
                ) {
                    let r = t.node.rangeBy(t);
                    (this.line = r.start.line),
                        (this.column = r.start.column),
                        (this.endLine = r.end.line),
                        (this.endColumn = r.end.column);
                }
                for (let r in t) this[r] = t[r];
            }
            toString() {
                return this.node
                    ? this.node.error(this.text, {
                          plugin: this.plugin,
                          index: this.index,
                          word: this.word,
                      }).message
                    : this.plugin
                    ? this.plugin + ": " + this.text
                    : this.text;
            }
        };
        If.exports = Pi;
        Pi.default = Pi;
    });
    var Ii = v((kT, qf) => {
        l();
        ("use strict");
        var b0 = Ts(),
            Di = class {
                constructor(e, t, r) {
                    (this.processor = e),
                        (this.messages = []),
                        (this.root = t),
                        (this.opts = r),
                        (this.css = void 0),
                        (this.map = void 0);
                }
                toString() {
                    return this.css;
                }
                warn(e, t = {}) {
                    t.plugin ||
                        (this.lastPlugin &&
                            this.lastPlugin.postcssPlugin &&
                            (t.plugin = this.lastPlugin.postcssPlugin));
                    let r = new b0(e, t);
                    return this.messages.push(r), r;
                }
                warnings() {
                    return this.messages.filter((e) => e.type === "warning");
                }
                get content() {
                    return this.css;
                }
            };
        qf.exports = Di;
        Di.default = Di;
    });
    var Nf = v((ST, Ff) => {
        l();
        ("use strict");
        var Ps = "'".charCodeAt(0),
            Rf = '"'.charCodeAt(0),
            qi = "\\".charCodeAt(0),
            Mf = "/".charCodeAt(0),
            Ri = `
`.charCodeAt(0),
            wr = " ".charCodeAt(0),
            Mi = "\f".charCodeAt(0),
            Bi = "	".charCodeAt(0),
            Fi = "\r".charCodeAt(0),
            v0 = "[".charCodeAt(0),
            x0 = "]".charCodeAt(0),
            k0 = "(".charCodeAt(0),
            S0 = ")".charCodeAt(0),
            C0 = "{".charCodeAt(0),
            A0 = "}".charCodeAt(0),
            _0 = ";".charCodeAt(0),
            E0 = "*".charCodeAt(0),
            O0 = ":".charCodeAt(0),
            T0 = "@".charCodeAt(0),
            Ni = /[\t\n\f\r "#'()/;[\\\]{}]/g,
            Li = /[\t\n\f\r !"#'():;@[\\\]{}]|\/(?=\*)/g,
            P0 = /.[\n"'(/\\]/,
            Bf = /[\da-f]/i;
        Ff.exports = function (e, t = {}) {
            let r = e.css.valueOf(),
                n = t.ignoreErrors,
                a,
                s,
                o,
                u,
                c,
                f,
                p,
                d,
                h,
                y,
                x = r.length,
                w = 0,
                b = [],
                k = [];
            function S() {
                return w;
            }
            function _(q) {
                throw e.error("Unclosed " + q, w);
            }
            function E() {
                return k.length === 0 && w >= x;
            }
            function I(q) {
                if (k.length) return k.pop();
                if (w >= x) return;
                let X = q ? q.ignoreUnclosed : !1;
                switch (((a = r.charCodeAt(w)), a)) {
                    case Ri:
                    case wr:
                    case Bi:
                    case Fi:
                    case Mi: {
                        s = w;
                        do (s += 1), (a = r.charCodeAt(s));
                        while (
                            a === wr ||
                            a === Ri ||
                            a === Bi ||
                            a === Fi ||
                            a === Mi
                        );
                        (y = ["space", r.slice(w, s)]), (w = s - 1);
                        break;
                    }
                    case v0:
                    case x0:
                    case C0:
                    case A0:
                    case O0:
                    case _0:
                    case S0: {
                        let ae = String.fromCharCode(a);
                        y = [ae, ae, w];
                        break;
                    }
                    case k0: {
                        if (
                            ((d = b.length ? b.pop()[1] : ""),
                            (h = r.charCodeAt(w + 1)),
                            d === "url" &&
                                h !== Ps &&
                                h !== Rf &&
                                h !== wr &&
                                h !== Ri &&
                                h !== Bi &&
                                h !== Mi &&
                                h !== Fi)
                        ) {
                            s = w;
                            do {
                                if (
                                    ((f = !1),
                                    (s = r.indexOf(")", s + 1)),
                                    s === -1)
                                )
                                    if (n || X) {
                                        s = w;
                                        break;
                                    } else _("bracket");
                                for (p = s; r.charCodeAt(p - 1) === qi; )
                                    (p -= 1), (f = !f);
                            } while (f);
                            (y = ["brackets", r.slice(w, s + 1), w, s]),
                                (w = s);
                        } else
                            (s = r.indexOf(")", w + 1)),
                                (u = r.slice(w, s + 1)),
                                s === -1 || P0.test(u)
                                    ? (y = ["(", "(", w])
                                    : ((y = ["brackets", u, w, s]), (w = s));
                        break;
                    }
                    case Ps:
                    case Rf: {
                        (o = a === Ps ? "'" : '"'), (s = w);
                        do {
                            if (((f = !1), (s = r.indexOf(o, s + 1)), s === -1))
                                if (n || X) {
                                    s = w + 1;
                                    break;
                                } else _("string");
                            for (p = s; r.charCodeAt(p - 1) === qi; )
                                (p -= 1), (f = !f);
                        } while (f);
                        (y = ["string", r.slice(w, s + 1), w, s]), (w = s);
                        break;
                    }
                    case T0: {
                        (Ni.lastIndex = w + 1),
                            Ni.test(r),
                            Ni.lastIndex === 0
                                ? (s = r.length - 1)
                                : (s = Ni.lastIndex - 2),
                            (y = ["at-word", r.slice(w, s + 1), w, s]),
                            (w = s);
                        break;
                    }
                    case qi: {
                        for (s = w, c = !0; r.charCodeAt(s + 1) === qi; )
                            (s += 1), (c = !c);
                        if (
                            ((a = r.charCodeAt(s + 1)),
                            c &&
                                a !== Mf &&
                                a !== wr &&
                                a !== Ri &&
                                a !== Bi &&
                                a !== Fi &&
                                a !== Mi &&
                                ((s += 1), Bf.test(r.charAt(s))))
                        ) {
                            for (; Bf.test(r.charAt(s + 1)); ) s += 1;
                            r.charCodeAt(s + 1) === wr && (s += 1);
                        }
                        (y = ["word", r.slice(w, s + 1), w, s]), (w = s);
                        break;
                    }
                    default: {
                        a === Mf && r.charCodeAt(w + 1) === E0
                            ? ((s = r.indexOf("*/", w + 2) + 1),
                              s === 0 &&
                                  (n || X ? (s = r.length) : _("comment")),
                              (y = ["comment", r.slice(w, s + 1), w, s]),
                              (w = s))
                            : ((Li.lastIndex = w + 1),
                              Li.test(r),
                              Li.lastIndex === 0
                                  ? (s = r.length - 1)
                                  : (s = Li.lastIndex - 2),
                              (y = ["word", r.slice(w, s + 1), w, s]),
                              b.push(y),
                              (w = s));
                        break;
                    }
                }
                return w++, y;
            }
            function B(q) {
                k.push(q);
            }
            return { back: B, nextToken: I, endOfFile: E, position: S };
        };
    });
    var $i = v((CT, $f) => {
        l();
        ("use strict");
        var Lf = it(),
            br = class extends Lf {
                constructor(e) {
                    super(e);
                    this.type = "atrule";
                }
                append(...e) {
                    return (
                        this.proxyOf.nodes || (this.nodes = []),
                        super.append(...e)
                    );
                }
                prepend(...e) {
                    return (
                        this.proxyOf.nodes || (this.nodes = []),
                        super.prepend(...e)
                    );
                }
            };
        $f.exports = br;
        br.default = br;
        Lf.registerAtRule(br);
    });
    var _t = v((AT, Uf) => {
        l();
        ("use strict");
        var jf = it(),
            zf,
            Vf,
            gt = class extends jf {
                constructor(e) {
                    super(e);
                    (this.type = "root"), this.nodes || (this.nodes = []);
                }
                removeChild(e, t) {
                    let r = this.index(e);
                    return (
                        !t &&
                            r === 0 &&
                            this.nodes.length > 1 &&
                            (this.nodes[1].raws.before =
                                this.nodes[r].raws.before),
                        super.removeChild(e)
                    );
                }
                normalize(e, t, r) {
                    let n = super.normalize(e);
                    if (t) {
                        if (r === "prepend")
                            this.nodes.length > 1
                                ? (t.raws.before = this.nodes[1].raws.before)
                                : delete t.raws.before;
                        else if (this.first !== t)
                            for (let a of n) a.raws.before = t.raws.before;
                    }
                    return n;
                }
                toResult(e = {}) {
                    return new zf(new Vf(), this, e).stringify();
                }
            };
        gt.registerLazyResult = (i) => {
            zf = i;
        };
        gt.registerProcessor = (i) => {
            Vf = i;
        };
        Uf.exports = gt;
        gt.default = gt;
        jf.registerRoot(gt);
    });
    var Ds = v((_T, Wf) => {
        l();
        ("use strict");
        var vr = {
            split(i, e, t) {
                let r = [],
                    n = "",
                    a = !1,
                    s = 0,
                    o = !1,
                    u = "",
                    c = !1;
                for (let f of i)
                    c
                        ? (c = !1)
                        : f === "\\"
                        ? (c = !0)
                        : o
                        ? f === u && (o = !1)
                        : f === '"' || f === "'"
                        ? ((o = !0), (u = f))
                        : f === "("
                        ? (s += 1)
                        : f === ")"
                        ? s > 0 && (s -= 1)
                        : s === 0 && e.includes(f) && (a = !0),
                        a
                            ? (n !== "" && r.push(n.trim()), (n = ""), (a = !1))
                            : (n += f);
                return (t || n !== "") && r.push(n.trim()), r;
            },
            space(i) {
                let e = [
                    " ",
                    `
`,
                    "	",
                ];
                return vr.split(i, e);
            },
            comma(i) {
                return vr.split(i, [","], !0);
            },
        };
        Wf.exports = vr;
        vr.default = vr;
    });
    var ji = v((ET, Hf) => {
        l();
        ("use strict");
        var Gf = it(),
            D0 = Ds(),
            xr = class extends Gf {
                constructor(e) {
                    super(e);
                    (this.type = "rule"), this.nodes || (this.nodes = []);
                }
                get selectors() {
                    return D0.comma(this.selector);
                }
                set selectors(e) {
                    let t = this.selector ? this.selector.match(/,\s*/) : null,
                        r = t ? t[0] : "," + this.raw("between", "beforeOpen");
                    this.selector = e.join(r);
                }
            };
        Hf.exports = xr;
        xr.default = xr;
        Gf.registerRule(xr);
    });
    var Kf = v((OT, Xf) => {
        l();
        ("use strict");
        var I0 = gr(),
            q0 = Nf(),
            R0 = yr(),
            M0 = $i(),
            B0 = _t(),
            Yf = ji(),
            Qf = { empty: !0, space: !0 };
        function F0(i) {
            for (let e = i.length - 1; e >= 0; e--) {
                let t = i[e],
                    r = t[3] || t[2];
                if (r) return r;
            }
        }
        var Jf = class {
            constructor(e) {
                (this.input = e),
                    (this.root = new B0()),
                    (this.current = this.root),
                    (this.spaces = ""),
                    (this.semicolon = !1),
                    (this.customProperty = !1),
                    this.createTokenizer(),
                    (this.root.source = {
                        input: e,
                        start: { offset: 0, line: 1, column: 1 },
                    });
            }
            createTokenizer() {
                this.tokenizer = q0(this.input);
            }
            parse() {
                let e;
                for (; !this.tokenizer.endOfFile(); )
                    switch (((e = this.tokenizer.nextToken()), e[0])) {
                        case "space":
                            this.spaces += e[1];
                            break;
                        case ";":
                            this.freeSemicolon(e);
                            break;
                        case "}":
                            this.end(e);
                            break;
                        case "comment":
                            this.comment(e);
                            break;
                        case "at-word":
                            this.atrule(e);
                            break;
                        case "{":
                            this.emptyRule(e);
                            break;
                        default:
                            this.other(e);
                            break;
                    }
                this.endFile();
            }
            comment(e) {
                let t = new R0();
                this.init(t, e[2]),
                    (t.source.end = this.getPosition(e[3] || e[2]));
                let r = e[1].slice(2, -2);
                if (/^\s*$/.test(r))
                    (t.text = ""), (t.raws.left = r), (t.raws.right = "");
                else {
                    let n = r.match(/^(\s*)([^]*\S)(\s*)$/);
                    (t.text = n[2]),
                        (t.raws.left = n[1]),
                        (t.raws.right = n[3]);
                }
            }
            emptyRule(e) {
                let t = new Yf();
                this.init(t, e[2]),
                    (t.selector = ""),
                    (t.raws.between = ""),
                    (this.current = t);
            }
            other(e) {
                let t = !1,
                    r = null,
                    n = !1,
                    a = null,
                    s = [],
                    o = e[1].startsWith("--"),
                    u = [],
                    c = e;
                for (; c; ) {
                    if (((r = c[0]), u.push(c), r === "(" || r === "["))
                        a || (a = c), s.push(r === "(" ? ")" : "]");
                    else if (o && n && r === "{") a || (a = c), s.push("}");
                    else if (s.length === 0)
                        if (r === ";")
                            if (n) {
                                this.decl(u, o);
                                return;
                            } else break;
                        else if (r === "{") {
                            this.rule(u);
                            return;
                        } else if (r === "}") {
                            this.tokenizer.back(u.pop()), (t = !0);
                            break;
                        } else r === ":" && (n = !0);
                    else
                        r === s[s.length - 1] &&
                            (s.pop(), s.length === 0 && (a = null));
                    c = this.tokenizer.nextToken();
                }
                if (
                    (this.tokenizer.endOfFile() && (t = !0),
                    s.length > 0 && this.unclosedBracket(a),
                    t && n)
                ) {
                    if (!o)
                        for (
                            ;
                            u.length &&
                            ((c = u[u.length - 1][0]),
                            !(c !== "space" && c !== "comment"));

                        )
                            this.tokenizer.back(u.pop());
                    this.decl(u, o);
                } else this.unknownWord(u);
            }
            rule(e) {
                e.pop();
                let t = new Yf();
                this.init(t, e[0][2]),
                    (t.raws.between = this.spacesAndCommentsFromEnd(e)),
                    this.raw(t, "selector", e),
                    (this.current = t);
            }
            decl(e, t) {
                let r = new I0();
                this.init(r, e[0][2]);
                let n = e[e.length - 1];
                for (
                    n[0] === ";" && ((this.semicolon = !0), e.pop()),
                        r.source.end = this.getPosition(n[3] || n[2] || F0(e));
                    e[0][0] !== "word";

                )
                    e.length === 1 && this.unknownWord(e),
                        (r.raws.before += e.shift()[1]);
                for (
                    r.source.start = this.getPosition(e[0][2]), r.prop = "";
                    e.length;

                ) {
                    let c = e[0][0];
                    if (c === ":" || c === "space" || c === "comment") break;
                    r.prop += e.shift()[1];
                }
                r.raws.between = "";
                let a;
                for (; e.length; )
                    if (((a = e.shift()), a[0] === ":")) {
                        r.raws.between += a[1];
                        break;
                    } else
                        a[0] === "word" &&
                            /\w/.test(a[1]) &&
                            this.unknownWord([a]),
                            (r.raws.between += a[1]);
                (r.prop[0] === "_" || r.prop[0] === "*") &&
                    ((r.raws.before += r.prop[0]), (r.prop = r.prop.slice(1)));
                let s = [],
                    o;
                for (
                    ;
                    e.length &&
                    ((o = e[0][0]), !(o !== "space" && o !== "comment"));

                )
                    s.push(e.shift());
                this.precheckMissedSemicolon(e);
                for (let c = e.length - 1; c >= 0; c--) {
                    if (((a = e[c]), a[1].toLowerCase() === "!important")) {
                        r.important = !0;
                        let f = this.stringFrom(e, c);
                        (f = this.spacesFromEnd(e) + f),
                            f !== " !important" && (r.raws.important = f);
                        break;
                    } else if (a[1].toLowerCase() === "important") {
                        let f = e.slice(0),
                            p = "";
                        for (let d = c; d > 0; d--) {
                            let h = f[d][0];
                            if (p.trim().indexOf("!") === 0 && h !== "space")
                                break;
                            p = f.pop()[1] + p;
                        }
                        p.trim().indexOf("!") === 0 &&
                            ((r.important = !0),
                            (r.raws.important = p),
                            (e = f));
                    }
                    if (a[0] !== "space" && a[0] !== "comment") break;
                }
                e.some((c) => c[0] !== "space" && c[0] !== "comment") &&
                    ((r.raws.between += s.map((c) => c[1]).join("")), (s = [])),
                    this.raw(r, "value", s.concat(e), t),
                    r.value.includes(":") && !t && this.checkMissedSemicolon(e);
            }
            atrule(e) {
                let t = new M0();
                (t.name = e[1].slice(1)),
                    t.name === "" && this.unnamedAtrule(t, e),
                    this.init(t, e[2]);
                let r,
                    n,
                    a,
                    s = !1,
                    o = !1,
                    u = [],
                    c = [];
                for (; !this.tokenizer.endOfFile(); ) {
                    if (
                        ((e = this.tokenizer.nextToken()),
                        (r = e[0]),
                        r === "(" || r === "["
                            ? c.push(r === "(" ? ")" : "]")
                            : r === "{" && c.length > 0
                            ? c.push("}")
                            : r === c[c.length - 1] && c.pop(),
                        c.length === 0)
                    )
                        if (r === ";") {
                            (t.source.end = this.getPosition(e[2])),
                                (this.semicolon = !0);
                            break;
                        } else if (r === "{") {
                            o = !0;
                            break;
                        } else if (r === "}") {
                            if (u.length > 0) {
                                for (
                                    a = u.length - 1, n = u[a];
                                    n && n[0] === "space";

                                )
                                    n = u[--a];
                                n &&
                                    (t.source.end = this.getPosition(
                                        n[3] || n[2]
                                    ));
                            }
                            this.end(e);
                            break;
                        } else u.push(e);
                    else u.push(e);
                    if (this.tokenizer.endOfFile()) {
                        s = !0;
                        break;
                    }
                }
                (t.raws.between = this.spacesAndCommentsFromEnd(u)),
                    u.length
                        ? ((t.raws.afterName =
                              this.spacesAndCommentsFromStart(u)),
                          this.raw(t, "params", u),
                          s &&
                              ((e = u[u.length - 1]),
                              (t.source.end = this.getPosition(e[3] || e[2])),
                              (this.spaces = t.raws.between),
                              (t.raws.between = "")))
                        : ((t.raws.afterName = ""), (t.params = "")),
                    o && ((t.nodes = []), (this.current = t));
            }
            end(e) {
                this.current.nodes &&
                    this.current.nodes.length &&
                    (this.current.raws.semicolon = this.semicolon),
                    (this.semicolon = !1),
                    (this.current.raws.after =
                        (this.current.raws.after || "") + this.spaces),
                    (this.spaces = ""),
                    this.current.parent
                        ? ((this.current.source.end = this.getPosition(e[2])),
                          (this.current = this.current.parent))
                        : this.unexpectedClose(e);
            }
            endFile() {
                this.current.parent && this.unclosedBlock(),
                    this.current.nodes &&
                        this.current.nodes.length &&
                        (this.current.raws.semicolon = this.semicolon),
                    (this.current.raws.after =
                        (this.current.raws.after || "") + this.spaces);
            }
            freeSemicolon(e) {
                if (((this.spaces += e[1]), this.current.nodes)) {
                    let t = this.current.nodes[this.current.nodes.length - 1];
                    t &&
                        t.type === "rule" &&
                        !t.raws.ownSemicolon &&
                        ((t.raws.ownSemicolon = this.spaces),
                        (this.spaces = ""));
                }
            }
            getPosition(e) {
                let t = this.input.fromOffset(e);
                return { offset: e, line: t.line, column: t.col };
            }
            init(e, t) {
                this.current.push(e),
                    (e.source = {
                        start: this.getPosition(t),
                        input: this.input,
                    }),
                    (e.raws.before = this.spaces),
                    (this.spaces = ""),
                    e.type !== "comment" && (this.semicolon = !1);
            }
            raw(e, t, r, n) {
                let a,
                    s,
                    o = r.length,
                    u = "",
                    c = !0,
                    f,
                    p;
                for (let d = 0; d < o; d += 1)
                    (a = r[d]),
                        (s = a[0]),
                        s === "space" && d === o - 1 && !n
                            ? (c = !1)
                            : s === "comment"
                            ? ((p = r[d - 1] ? r[d - 1][0] : "empty"),
                              (f = r[d + 1] ? r[d + 1][0] : "empty"),
                              !Qf[p] && !Qf[f]
                                  ? u.slice(-1) === ","
                                      ? (c = !1)
                                      : (u += a[1])
                                  : (c = !1))
                            : (u += a[1]);
                if (!c) {
                    let d = r.reduce((h, y) => h + y[1], "");
                    e.raws[t] = { value: u, raw: d };
                }
                e[t] = u;
            }
            spacesAndCommentsFromEnd(e) {
                let t,
                    r = "";
                for (
                    ;
                    e.length &&
                    ((t = e[e.length - 1][0]),
                    !(t !== "space" && t !== "comment"));

                )
                    r = e.pop()[1] + r;
                return r;
            }
            spacesAndCommentsFromStart(e) {
                let t,
                    r = "";
                for (
                    ;
                    e.length &&
                    ((t = e[0][0]), !(t !== "space" && t !== "comment"));

                )
                    r += e.shift()[1];
                return r;
            }
            spacesFromEnd(e) {
                let t,
                    r = "";
                for (; e.length && ((t = e[e.length - 1][0]), t === "space"); )
                    r = e.pop()[1] + r;
                return r;
            }
            stringFrom(e, t) {
                let r = "";
                for (let n = t; n < e.length; n++) r += e[n][1];
                return e.splice(t, e.length - t), r;
            }
            colon(e) {
                let t = 0,
                    r,
                    n,
                    a;
                for (let [s, o] of e.entries()) {
                    if (
                        ((r = o),
                        (n = r[0]),
                        n === "(" && (t += 1),
                        n === ")" && (t -= 1),
                        t === 0 && n === ":")
                    )
                        if (!a) this.doubleColon(r);
                        else {
                            if (a[0] === "word" && a[1] === "progid") continue;
                            return s;
                        }
                    a = r;
                }
                return !1;
            }
            unclosedBracket(e) {
                throw this.input.error(
                    "Unclosed bracket",
                    { offset: e[2] },
                    { offset: e[2] + 1 }
                );
            }
            unknownWord(e) {
                throw this.input.error(
                    "Unknown word",
                    { offset: e[0][2] },
                    { offset: e[0][2] + e[0][1].length }
                );
            }
            unexpectedClose(e) {
                throw this.input.error(
                    "Unexpected }",
                    { offset: e[2] },
                    { offset: e[2] + 1 }
                );
            }
            unclosedBlock() {
                let e = this.current.source.start;
                throw this.input.error("Unclosed block", e.line, e.column);
            }
            doubleColon(e) {
                throw this.input.error(
                    "Double colon",
                    { offset: e[2] },
                    { offset: e[2] + e[1].length }
                );
            }
            unnamedAtrule(e, t) {
                throw this.input.error(
                    "At-rule without name",
                    { offset: t[2] },
                    { offset: t[2] + t[1].length }
                );
            }
            precheckMissedSemicolon() {}
            checkMissedSemicolon(e) {
                let t = this.colon(e);
                if (t === !1) return;
                let r = 0,
                    n;
                for (
                    let a = t - 1;
                    a >= 0 &&
                    ((n = e[a]), !(n[0] !== "space" && ((r += 1), r === 2)));
                    a--
                );
                throw this.input.error(
                    "Missed semicolon",
                    n[0] === "word" ? n[3] + 1 : n[2]
                );
            }
        };
        Xf.exports = Jf;
    });
    var Zf = v(() => {
        l();
    });
    var tc = v((DT, ec) => {
        l();
        var N0 =
                "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict",
            L0 =
                (i, e = 21) =>
                (t = e) => {
                    let r = "",
                        n = t;
                    for (; n--; ) r += i[(Math.random() * i.length) | 0];
                    return r;
                },
            $0 = (i = 21) => {
                let e = "",
                    t = i;
                for (; t--; ) e += N0[(Math.random() * 64) | 0];
                return e;
            };
        ec.exports = { nanoid: $0, customAlphabet: L0 };
    });
    var Is = v((IT, rc) => {
        l();
        rc.exports = {};
    });
    var Vi = v((qT, ac) => {
        l();
        ("use strict");
        var { SourceMapConsumer: j0, SourceMapGenerator: z0 } = Zf(),
            { fileURLToPath: ic, pathToFileURL: zi } = (bs(), of),
            { resolve: qs, isAbsolute: Rs } = (mt(), nf),
            { nanoid: V0 } = tc(),
            Ms = vs(),
            nc = ki(),
            U0 = Is(),
            Bs = Symbol("fromOffsetCache"),
            W0 = Boolean(j0 && z0),
            sc = Boolean(qs && Rs),
            kr = class {
                constructor(e, t = {}) {
                    if (
                        e === null ||
                        typeof e == "undefined" ||
                        (typeof e == "object" && !e.toString)
                    )
                        throw new Error(
                            `PostCSS received ${e} instead of CSS string`
                        );
                    if (
                        ((this.css = e.toString()),
                        this.css[0] === "\uFEFF" || this.css[0] === "\uFFFE"
                            ? ((this.hasBOM = !0),
                              (this.css = this.css.slice(1)))
                            : (this.hasBOM = !1),
                        t.from &&
                            (!sc || /^\w+:\/\//.test(t.from) || Rs(t.from)
                                ? (this.file = t.from)
                                : (this.file = qs(t.from))),
                        sc && W0)
                    ) {
                        let r = new U0(this.css, t);
                        if (r.text) {
                            this.map = r;
                            let n = r.consumer().file;
                            !this.file && n && (this.file = this.mapResolve(n));
                        }
                    }
                    this.file || (this.id = "<input css " + V0(6) + ">"),
                        this.map && (this.map.file = this.from);
                }
                fromOffset(e) {
                    let t, r;
                    if (this[Bs]) r = this[Bs];
                    else {
                        let a = this.css.split(`
`);
                        r = new Array(a.length);
                        let s = 0;
                        for (let o = 0, u = a.length; o < u; o++)
                            (r[o] = s), (s += a[o].length + 1);
                        this[Bs] = r;
                    }
                    t = r[r.length - 1];
                    let n = 0;
                    if (e >= t) n = r.length - 1;
                    else {
                        let a = r.length - 2,
                            s;
                        for (; n < a; )
                            if (((s = n + ((a - n) >> 1)), e < r[s])) a = s - 1;
                            else if (e >= r[s + 1]) n = s + 1;
                            else {
                                n = s;
                                break;
                            }
                    }
                    return { line: n + 1, col: e - r[n] + 1 };
                }
                error(e, t, r, n = {}) {
                    let a, s, o;
                    if (t && typeof t == "object") {
                        let c = t,
                            f = r;
                        if (typeof c.offset == "number") {
                            let p = this.fromOffset(c.offset);
                            (t = p.line), (r = p.col);
                        } else (t = c.line), (r = c.column);
                        if (typeof f.offset == "number") {
                            let p = this.fromOffset(f.offset);
                            (s = p.line), (o = p.col);
                        } else (s = f.line), (o = f.column);
                    } else if (!r) {
                        let c = this.fromOffset(t);
                        (t = c.line), (r = c.col);
                    }
                    let u = this.origin(t, r, s, o);
                    return (
                        u
                            ? (a = new nc(
                                  e,
                                  u.endLine === void 0
                                      ? u.line
                                      : { line: u.line, column: u.column },
                                  u.endLine === void 0
                                      ? u.column
                                      : {
                                            line: u.endLine,
                                            column: u.endColumn,
                                        },
                                  u.source,
                                  u.file,
                                  n.plugin
                              ))
                            : (a = new nc(
                                  e,
                                  s === void 0 ? t : { line: t, column: r },
                                  s === void 0 ? r : { line: s, column: o },
                                  this.css,
                                  this.file,
                                  n.plugin
                              )),
                        (a.input = {
                            line: t,
                            column: r,
                            endLine: s,
                            endColumn: o,
                            source: this.css,
                        }),
                        this.file &&
                            (zi && (a.input.url = zi(this.file).toString()),
                            (a.input.file = this.file)),
                        a
                    );
                }
                origin(e, t, r, n) {
                    if (!this.map) return !1;
                    let a = this.map.consumer(),
                        s = a.originalPositionFor({ line: e, column: t });
                    if (!s.source) return !1;
                    let o;
                    typeof r == "number" &&
                        (o = a.originalPositionFor({ line: r, column: n }));
                    let u;
                    Rs(s.source)
                        ? (u = zi(s.source))
                        : (u = new URL(
                              s.source,
                              this.map.consumer().sourceRoot ||
                                  zi(this.map.mapFile)
                          ));
                    let c = {
                        url: u.toString(),
                        line: s.line,
                        column: s.column,
                        endLine: o && o.line,
                        endColumn: o && o.column,
                    };
                    if (u.protocol === "file:")
                        if (ic) c.file = ic(u);
                        else
                            throw new Error(
                                "file: protocol is not available in this PostCSS build"
                            );
                    let f = a.sourceContentFor(s.source);
                    return f && (c.source = f), c;
                }
                mapResolve(e) {
                    return /^\w+:\/\//.test(e)
                        ? e
                        : qs(
                              this.map.consumer().sourceRoot ||
                                  this.map.root ||
                                  ".",
                              e
                          );
                }
                get from() {
                    return this.file || this.id;
                }
                toJSON() {
                    let e = {};
                    for (let t of ["hasBOM", "css", "file", "id"])
                        this[t] != null && (e[t] = this[t]);
                    return (
                        this.map &&
                            ((e.map = { ...this.map }),
                            e.map.consumerCache &&
                                (e.map.consumerCache = void 0)),
                        e
                    );
                }
            };
        ac.exports = kr;
        kr.default = kr;
        Ms && Ms.registerInput && Ms.registerInput(kr);
    });
    var Wi = v((RT, oc) => {
        l();
        ("use strict");
        var G0 = it(),
            H0 = Kf(),
            Y0 = Vi();
        function Ui(i, e) {
            let t = new Y0(i, e),
                r = new H0(t);
            try {
                r.parse();
            } catch (n) {
                throw n;
            }
            return r.root;
        }
        oc.exports = Ui;
        Ui.default = Ui;
        G0.registerParse(Ui);
    });
    var Ls = v((BT, cc) => {
        l();
        ("use strict");
        var { isClean: qe, my: Q0 } = Si(),
            J0 = As(),
            X0 = hr(),
            K0 = it(),
            Z0 = Ti(),
            MT = Os(),
            lc = Ii(),
            ev = Wi(),
            tv = _t(),
            rv = {
                document: "Document",
                root: "Root",
                atrule: "AtRule",
                rule: "Rule",
                decl: "Declaration",
                comment: "Comment",
            },
            iv = {
                postcssPlugin: !0,
                prepare: !0,
                Once: !0,
                Document: !0,
                Root: !0,
                Declaration: !0,
                Rule: !0,
                AtRule: !0,
                Comment: !0,
                DeclarationExit: !0,
                RuleExit: !0,
                AtRuleExit: !0,
                CommentExit: !0,
                RootExit: !0,
                DocumentExit: !0,
                OnceExit: !0,
            },
            nv = { postcssPlugin: !0, prepare: !0, Once: !0 },
            Et = 0;
        function Sr(i) {
            return typeof i == "object" && typeof i.then == "function";
        }
        function uc(i) {
            let e = !1,
                t = rv[i.type];
            return (
                i.type === "decl"
                    ? (e = i.prop.toLowerCase())
                    : i.type === "atrule" && (e = i.name.toLowerCase()),
                e && i.append
                    ? [t, t + "-" + e, Et, t + "Exit", t + "Exit-" + e]
                    : e
                    ? [t, t + "-" + e, t + "Exit", t + "Exit-" + e]
                    : i.append
                    ? [t, Et, t + "Exit"]
                    : [t, t + "Exit"]
            );
        }
        function fc(i) {
            let e;
            return (
                i.type === "document"
                    ? (e = ["Document", Et, "DocumentExit"])
                    : i.type === "root"
                    ? (e = ["Root", Et, "RootExit"])
                    : (e = uc(i)),
                {
                    node: i,
                    events: e,
                    eventIndex: 0,
                    visitors: [],
                    visitorIndex: 0,
                    iterator: 0,
                }
            );
        }
        function Fs(i) {
            return (i[qe] = !1), i.nodes && i.nodes.forEach((e) => Fs(e)), i;
        }
        var Ns = {},
            Ve = class {
                constructor(e, t, r) {
                    (this.stringified = !1), (this.processed = !1);
                    let n;
                    if (
                        typeof t == "object" &&
                        t !== null &&
                        (t.type === "root" || t.type === "document")
                    )
                        n = Fs(t);
                    else if (t instanceof Ve || t instanceof lc)
                        (n = Fs(t.root)),
                            t.map &&
                                (typeof r.map == "undefined" && (r.map = {}),
                                r.map.inline || (r.map.inline = !1),
                                (r.map.prev = t.map));
                    else {
                        let a = ev;
                        r.syntax && (a = r.syntax.parse),
                            r.parser && (a = r.parser),
                            a.parse && (a = a.parse);
                        try {
                            n = a(t, r);
                        } catch (s) {
                            (this.processed = !0), (this.error = s);
                        }
                        n && !n[Q0] && K0.rebuild(n);
                    }
                    (this.result = new lc(e, n, r)),
                        (this.helpers = {
                            ...Ns,
                            result: this.result,
                            postcss: Ns,
                        }),
                        (this.plugins = this.processor.plugins.map((a) =>
                            typeof a == "object" && a.prepare
                                ? { ...a, ...a.prepare(this.result) }
                                : a
                        ));
                }
                get [Symbol.toStringTag]() {
                    return "LazyResult";
                }
                get processor() {
                    return this.result.processor;
                }
                get opts() {
                    return this.result.opts;
                }
                get css() {
                    return this.stringify().css;
                }
                get content() {
                    return this.stringify().content;
                }
                get map() {
                    return this.stringify().map;
                }
                get root() {
                    return this.sync().root;
                }
                get messages() {
                    return this.sync().messages;
                }
                warnings() {
                    return this.sync().warnings();
                }
                toString() {
                    return this.css;
                }
                then(e, t) {
                    return this.async().then(e, t);
                }
                catch(e) {
                    return this.async().catch(e);
                }
                finally(e) {
                    return this.async().then(e, e);
                }
                async() {
                    return this.error
                        ? Promise.reject(this.error)
                        : this.processed
                        ? Promise.resolve(this.result)
                        : (this.processing ||
                              (this.processing = this.runAsync()),
                          this.processing);
                }
                sync() {
                    if (this.error) throw this.error;
                    if (this.processed) return this.result;
                    if (((this.processed = !0), this.processing))
                        throw this.getAsyncError();
                    for (let e of this.plugins) {
                        let t = this.runOnRoot(e);
                        if (Sr(t)) throw this.getAsyncError();
                    }
                    if ((this.prepareVisitors(), this.hasListener)) {
                        let e = this.result.root;
                        for (; !e[qe]; ) (e[qe] = !0), this.walkSync(e);
                        if (this.listeners.OnceExit)
                            if (e.type === "document")
                                for (let t of e.nodes)
                                    this.visitSync(this.listeners.OnceExit, t);
                            else this.visitSync(this.listeners.OnceExit, e);
                    }
                    return this.result;
                }
                stringify() {
                    if (this.error) throw this.error;
                    if (this.stringified) return this.result;
                    (this.stringified = !0), this.sync();
                    let e = this.result.opts,
                        t = X0;
                    e.syntax && (t = e.syntax.stringify),
                        e.stringifier && (t = e.stringifier),
                        t.stringify && (t = t.stringify);
                    let n = new J0(
                        t,
                        this.result.root,
                        this.result.opts
                    ).generate();
                    return (
                        (this.result.css = n[0]),
                        (this.result.map = n[1]),
                        this.result
                    );
                }
                walkSync(e) {
                    e[qe] = !0;
                    let t = uc(e);
                    for (let r of t)
                        if (r === Et)
                            e.nodes &&
                                e.each((n) => {
                                    n[qe] || this.walkSync(n);
                                });
                        else {
                            let n = this.listeners[r];
                            if (n && this.visitSync(n, e.toProxy())) return;
                        }
                }
                visitSync(e, t) {
                    for (let [r, n] of e) {
                        this.result.lastPlugin = r;
                        let a;
                        try {
                            a = n(t, this.helpers);
                        } catch (s) {
                            throw this.handleError(s, t.proxyOf);
                        }
                        if (
                            t.type !== "root" &&
                            t.type !== "document" &&
                            !t.parent
                        )
                            return !0;
                        if (Sr(a)) throw this.getAsyncError();
                    }
                }
                runOnRoot(e) {
                    this.result.lastPlugin = e;
                    try {
                        if (typeof e == "object" && e.Once) {
                            if (this.result.root.type === "document") {
                                let t = this.result.root.nodes.map((r) =>
                                    e.Once(r, this.helpers)
                                );
                                return Sr(t[0]) ? Promise.all(t) : t;
                            }
                            return e.Once(this.result.root, this.helpers);
                        } else if (typeof e == "function")
                            return e(this.result.root, this.result);
                    } catch (t) {
                        throw this.handleError(t);
                    }
                }
                getAsyncError() {
                    throw new Error(
                        "Use process(css).then(cb) to work with async plugins"
                    );
                }
                handleError(e, t) {
                    let r = this.result.lastPlugin;
                    try {
                        t && t.addToError(e),
                            (this.error = e),
                            e.name === "CssSyntaxError" && !e.plugin
                                ? ((e.plugin = r.postcssPlugin), e.setMessage())
                                : r.postcssVersion;
                    } catch (n) {
                        console && console.error && console.error(n);
                    }
                    return e;
                }
                async runAsync() {
                    this.plugin = 0;
                    for (let e = 0; e < this.plugins.length; e++) {
                        let t = this.plugins[e],
                            r = this.runOnRoot(t);
                        if (Sr(r))
                            try {
                                await r;
                            } catch (n) {
                                throw this.handleError(n);
                            }
                    }
                    if ((this.prepareVisitors(), this.hasListener)) {
                        let e = this.result.root;
                        for (; !e[qe]; ) {
                            e[qe] = !0;
                            let t = [fc(e)];
                            for (; t.length > 0; ) {
                                let r = this.visitTick(t);
                                if (Sr(r))
                                    try {
                                        await r;
                                    } catch (n) {
                                        let a = t[t.length - 1].node;
                                        throw this.handleError(n, a);
                                    }
                            }
                        }
                        if (this.listeners.OnceExit)
                            for (let [t, r] of this.listeners.OnceExit) {
                                this.result.lastPlugin = t;
                                try {
                                    if (e.type === "document") {
                                        let n = e.nodes.map((a) =>
                                            r(a, this.helpers)
                                        );
                                        await Promise.all(n);
                                    } else await r(e, this.helpers);
                                } catch (n) {
                                    throw this.handleError(n);
                                }
                            }
                    }
                    return (this.processed = !0), this.stringify();
                }
                prepareVisitors() {
                    this.listeners = {};
                    let e = (t, r, n) => {
                        this.listeners[r] || (this.listeners[r] = []),
                            this.listeners[r].push([t, n]);
                    };
                    for (let t of this.plugins)
                        if (typeof t == "object")
                            for (let r in t) {
                                if (!iv[r] && /^[A-Z]/.test(r))
                                    throw new Error(
                                        `Unknown event ${r} in ${t.postcssPlugin}. Try to update PostCSS (${this.processor.version} now).`
                                    );
                                if (!nv[r])
                                    if (typeof t[r] == "object")
                                        for (let n in t[r])
                                            n === "*"
                                                ? e(t, r, t[r][n])
                                                : e(
                                                      t,
                                                      r + "-" + n.toLowerCase(),
                                                      t[r][n]
                                                  );
                                    else
                                        typeof t[r] == "function" &&
                                            e(t, r, t[r]);
                            }
                    this.hasListener = Object.keys(this.listeners).length > 0;
                }
                visitTick(e) {
                    let t = e[e.length - 1],
                        { node: r, visitors: n } = t;
                    if (
                        r.type !== "root" &&
                        r.type !== "document" &&
                        !r.parent
                    ) {
                        e.pop();
                        return;
                    }
                    if (n.length > 0 && t.visitorIndex < n.length) {
                        let [s, o] = n[t.visitorIndex];
                        (t.visitorIndex += 1),
                            t.visitorIndex === n.length &&
                                ((t.visitors = []), (t.visitorIndex = 0)),
                            (this.result.lastPlugin = s);
                        try {
                            return o(r.toProxy(), this.helpers);
                        } catch (u) {
                            throw this.handleError(u, r);
                        }
                    }
                    if (t.iterator !== 0) {
                        let s = t.iterator,
                            o;
                        for (; (o = r.nodes[r.indexes[s]]); )
                            if (((r.indexes[s] += 1), !o[qe])) {
                                (o[qe] = !0), e.push(fc(o));
                                return;
                            }
                        (t.iterator = 0), delete r.indexes[s];
                    }
                    let a = t.events;
                    for (; t.eventIndex < a.length; ) {
                        let s = a[t.eventIndex];
                        if (((t.eventIndex += 1), s === Et)) {
                            r.nodes &&
                                r.nodes.length &&
                                ((r[qe] = !0), (t.iterator = r.getIterator()));
                            return;
                        } else if (this.listeners[s]) {
                            t.visitors = this.listeners[s];
                            return;
                        }
                    }
                    e.pop();
                }
            };
        Ve.registerPostcss = (i) => {
            Ns = i;
        };
        cc.exports = Ve;
        Ve.default = Ve;
        tv.registerLazyResult(Ve);
        Z0.registerLazyResult(Ve);
    });
    var dc = v((NT, pc) => {
        l();
        ("use strict");
        var sv = As(),
            av = hr(),
            FT = Os(),
            ov = Wi(),
            lv = Ii(),
            Gi = class {
                constructor(e, t, r) {
                    (t = t.toString()),
                        (this.stringified = !1),
                        (this._processor = e),
                        (this._css = t),
                        (this._opts = r),
                        (this._map = void 0);
                    let n,
                        a = av;
                    (this.result = new lv(this._processor, n, this._opts)),
                        (this.result.css = t);
                    let s = this;
                    Object.defineProperty(this.result, "root", {
                        get() {
                            return s.root;
                        },
                    });
                    let o = new sv(a, n, this._opts, t);
                    if (o.isMap()) {
                        let [u, c] = o.generate();
                        u && (this.result.css = u), c && (this.result.map = c);
                    }
                }
                get [Symbol.toStringTag]() {
                    return "NoWorkResult";
                }
                get processor() {
                    return this.result.processor;
                }
                get opts() {
                    return this.result.opts;
                }
                get css() {
                    return this.result.css;
                }
                get content() {
                    return this.result.css;
                }
                get map() {
                    return this.result.map;
                }
                get root() {
                    if (this._root) return this._root;
                    let e,
                        t = ov;
                    try {
                        e = t(this._css, this._opts);
                    } catch (r) {
                        this.error = r;
                    }
                    if (this.error) throw this.error;
                    return (this._root = e), e;
                }
                get messages() {
                    return [];
                }
                warnings() {
                    return [];
                }
                toString() {
                    return this._css;
                }
                then(e, t) {
                    return this.async().then(e, t);
                }
                catch(e) {
                    return this.async().catch(e);
                }
                finally(e) {
                    return this.async().then(e, e);
                }
                async() {
                    return this.error
                        ? Promise.reject(this.error)
                        : Promise.resolve(this.result);
                }
                sync() {
                    if (this.error) throw this.error;
                    return this.result;
                }
            };
        pc.exports = Gi;
        Gi.default = Gi;
    });
    var mc = v((LT, hc) => {
        l();
        ("use strict");
        var uv = dc(),
            fv = Ls(),
            cv = Ti(),
            pv = _t(),
            Ot = class {
                constructor(e = []) {
                    (this.version = "8.4.24"),
                        (this.plugins = this.normalize(e));
                }
                use(e) {
                    return (
                        (this.plugins = this.plugins.concat(
                            this.normalize([e])
                        )),
                        this
                    );
                }
                process(e, t = {}) {
                    return this.plugins.length === 0 &&
                        typeof t.parser == "undefined" &&
                        typeof t.stringifier == "undefined" &&
                        typeof t.syntax == "undefined"
                        ? new uv(this, e, t)
                        : new fv(this, e, t);
                }
                normalize(e) {
                    let t = [];
                    for (let r of e)
                        if (
                            (r.postcss === !0
                                ? (r = r())
                                : r.postcss && (r = r.postcss),
                            typeof r == "object" && Array.isArray(r.plugins))
                        )
                            t = t.concat(r.plugins);
                        else if (typeof r == "object" && r.postcssPlugin)
                            t.push(r);
                        else if (typeof r == "function") t.push(r);
                        else if (
                            !(typeof r == "object" && (r.parse || r.stringify))
                        )
                            throw new Error(r + " is not a PostCSS plugin");
                    return t;
                }
            };
        hc.exports = Ot;
        Ot.default = Ot;
        pv.registerProcessor(Ot);
        cv.registerProcessor(Ot);
    });
    var yc = v(($T, gc) => {
        l();
        ("use strict");
        var dv = gr(),
            hv = Is(),
            mv = yr(),
            gv = $i(),
            yv = Vi(),
            wv = _t(),
            bv = ji();
        function Cr(i, e) {
            if (Array.isArray(i)) return i.map((n) => Cr(n));
            let { inputs: t, ...r } = i;
            if (t) {
                e = [];
                for (let n of t) {
                    let a = { ...n, __proto__: yv.prototype };
                    a.map && (a.map = { ...a.map, __proto__: hv.prototype }),
                        e.push(a);
                }
            }
            if (
                (r.nodes && (r.nodes = i.nodes.map((n) => Cr(n, e))), r.source)
            ) {
                let { inputId: n, ...a } = r.source;
                (r.source = a), n != null && (r.source.input = e[n]);
            }
            if (r.type === "root") return new wv(r);
            if (r.type === "decl") return new dv(r);
            if (r.type === "rule") return new bv(r);
            if (r.type === "comment") return new mv(r);
            if (r.type === "atrule") return new gv(r);
            throw new Error("Unknown node type: " + i.type);
        }
        gc.exports = Cr;
        Cr.default = Cr;
    });
    var me = v((jT, Cc) => {
        l();
        ("use strict");
        var vv = ki(),
            wc = gr(),
            xv = Ls(),
            kv = it(),
            $s = mc(),
            Sv = hr(),
            Cv = yc(),
            bc = Ti(),
            Av = Ts(),
            vc = yr(),
            xc = $i(),
            _v = Ii(),
            Ev = Vi(),
            Ov = Wi(),
            Tv = Ds(),
            kc = ji(),
            Sc = _t(),
            Pv = mr();
        function j(...i) {
            return (
                i.length === 1 && Array.isArray(i[0]) && (i = i[0]), new $s(i)
            );
        }
        j.plugin = function (e, t) {
            let r = !1;
            function n(...s) {
                console &&
                    console.warn &&
                    !r &&
                    ((r = !0),
                    console.warn(
                        e +
                            `: postcss.plugin was deprecated. Migration guide:
https://evilmartians.com/chronicles/postcss-8-plugin-migration`
                    ),
                    m.env.LANG &&
                        m.env.LANG.startsWith("cn") &&
                        console.warn(
                            e +
                                `: \u91CC\u9762 postcss.plugin \u88AB\u5F03\u7528. \u8FC1\u79FB\u6307\u5357:
https://www.w3ctech.com/topic/2226`
                        ));
                let o = t(...s);
                return (
                    (o.postcssPlugin = e),
                    (o.postcssVersion = new $s().version),
                    o
                );
            }
            let a;
            return (
                Object.defineProperty(n, "postcss", {
                    get() {
                        return a || (a = n()), a;
                    },
                }),
                (n.process = function (s, o, u) {
                    return j([n(u)]).process(s, o);
                }),
                n
            );
        };
        j.stringify = Sv;
        j.parse = Ov;
        j.fromJSON = Cv;
        j.list = Tv;
        j.comment = (i) => new vc(i);
        j.atRule = (i) => new xc(i);
        j.decl = (i) => new wc(i);
        j.rule = (i) => new kc(i);
        j.root = (i) => new Sc(i);
        j.document = (i) => new bc(i);
        j.CssSyntaxError = vv;
        j.Declaration = wc;
        j.Container = kv;
        j.Processor = $s;
        j.Document = bc;
        j.Comment = vc;
        j.Warning = Av;
        j.AtRule = xc;
        j.Result = _v;
        j.Input = Ev;
        j.Rule = kc;
        j.Root = Sc;
        j.Node = Pv;
        xv.registerPostcss(j);
        Cc.exports = j;
        j.default = j;
    });
    var W,
        z,
        zT,
        VT,
        UT,
        WT,
        GT,
        HT,
        YT,
        QT,
        JT,
        XT,
        KT,
        ZT,
        eP,
        tP,
        rP,
        iP,
        nP,
        sP,
        aP,
        oP,
        lP,
        uP,
        fP,
        cP,
        nt = C(() => {
            l();
            (W = K(me())),
                (z = W.default),
                (zT = W.default.stringify),
                (VT = W.default.fromJSON),
                (UT = W.default.plugin),
                (WT = W.default.parse),
                (GT = W.default.list),
                (HT = W.default.document),
                (YT = W.default.comment),
                (QT = W.default.atRule),
                (JT = W.default.rule),
                (XT = W.default.decl),
                (KT = W.default.root),
                (ZT = W.default.CssSyntaxError),
                (eP = W.default.Declaration),
                (tP = W.default.Container),
                (rP = W.default.Processor),
                (iP = W.default.Document),
                (nP = W.default.Comment),
                (sP = W.default.Warning),
                (aP = W.default.AtRule),
                (oP = W.default.Result),
                (lP = W.default.Input),
                (uP = W.default.Rule),
                (fP = W.default.Root),
                (cP = W.default.Node);
        });
    var js = v((dP, Ac) => {
        l();
        Ac.exports = function (i, e, t, r, n) {
            for (e = e.split ? e.split(".") : e, r = 0; r < e.length; r++)
                i = i ? i[e[r]] : n;
            return i === n ? t : i;
        };
    });
    var Yi = v((Hi, _c) => {
        l();
        ("use strict");
        Hi.__esModule = !0;
        Hi.default = qv;
        function Dv(i) {
            for (
                var e = i.toLowerCase(), t = "", r = !1, n = 0;
                n < 6 && e[n] !== void 0;
                n++
            ) {
                var a = e.charCodeAt(n),
                    s = (a >= 97 && a <= 102) || (a >= 48 && a <= 57);
                if (((r = a === 32), !s)) break;
                t += e[n];
            }
            if (t.length !== 0) {
                var o = parseInt(t, 16),
                    u = o >= 55296 && o <= 57343;
                return u || o === 0 || o > 1114111
                    ? ["\uFFFD", t.length + (r ? 1 : 0)]
                    : [String.fromCodePoint(o), t.length + (r ? 1 : 0)];
            }
        }
        var Iv = /\\/;
        function qv(i) {
            var e = Iv.test(i);
            if (!e) return i;
            for (var t = "", r = 0; r < i.length; r++) {
                if (i[r] === "\\") {
                    var n = Dv(i.slice(r + 1, r + 7));
                    if (n !== void 0) {
                        (t += n[0]), (r += n[1]);
                        continue;
                    }
                    if (i[r + 1] === "\\") {
                        (t += "\\"), r++;
                        continue;
                    }
                    i.length === r + 1 && (t += i[r]);
                    continue;
                }
                t += i[r];
            }
            return t;
        }
        _c.exports = Hi.default;
    });
    var Oc = v((Qi, Ec) => {
        l();
        ("use strict");
        Qi.__esModule = !0;
        Qi.default = Rv;
        function Rv(i) {
            for (
                var e = arguments.length,
                    t = new Array(e > 1 ? e - 1 : 0),
                    r = 1;
                r < e;
                r++
            )
                t[r - 1] = arguments[r];
            for (; t.length > 0; ) {
                var n = t.shift();
                if (!i[n]) return;
                i = i[n];
            }
            return i;
        }
        Ec.exports = Qi.default;
    });
    var Pc = v((Ji, Tc) => {
        l();
        ("use strict");
        Ji.__esModule = !0;
        Ji.default = Mv;
        function Mv(i) {
            for (
                var e = arguments.length,
                    t = new Array(e > 1 ? e - 1 : 0),
                    r = 1;
                r < e;
                r++
            )
                t[r - 1] = arguments[r];
            for (; t.length > 0; ) {
                var n = t.shift();
                i[n] || (i[n] = {}), (i = i[n]);
            }
        }
        Tc.exports = Ji.default;
    });
    var Ic = v((Xi, Dc) => {
        l();
        ("use strict");
        Xi.__esModule = !0;
        Xi.default = Bv;
        function Bv(i) {
            for (var e = "", t = i.indexOf("/*"), r = 0; t >= 0; ) {
                e = e + i.slice(r, t);
                var n = i.indexOf("*/", t + 2);
                if (n < 0) return e;
                (r = n + 2), (t = i.indexOf("/*", r));
            }
            return (e = e + i.slice(r)), e;
        }
        Dc.exports = Xi.default;
    });
    var Ar = v((Re) => {
        l();
        ("use strict");
        Re.__esModule = !0;
        Re.unesc = Re.stripComments = Re.getProp = Re.ensureObject = void 0;
        var Fv = Ki(Yi());
        Re.unesc = Fv.default;
        var Nv = Ki(Oc());
        Re.getProp = Nv.default;
        var Lv = Ki(Pc());
        Re.ensureObject = Lv.default;
        var $v = Ki(Ic());
        Re.stripComments = $v.default;
        function Ki(i) {
            return i && i.__esModule ? i : { default: i };
        }
    });
    var Ue = v((_r, Mc) => {
        l();
        ("use strict");
        _r.__esModule = !0;
        _r.default = void 0;
        var qc = Ar();
        function Rc(i, e) {
            for (var t = 0; t < e.length; t++) {
                var r = e[t];
                (r.enumerable = r.enumerable || !1),
                    (r.configurable = !0),
                    "value" in r && (r.writable = !0),
                    Object.defineProperty(i, r.key, r);
            }
        }
        function jv(i, e, t) {
            return (
                e && Rc(i.prototype, e),
                t && Rc(i, t),
                Object.defineProperty(i, "prototype", { writable: !1 }),
                i
            );
        }
        var zv = function i(e, t) {
                if (typeof e != "object" || e === null) return e;
                var r = new e.constructor();
                for (var n in e)
                    if (!!e.hasOwnProperty(n)) {
                        var a = e[n],
                            s = typeof a;
                        n === "parent" && s === "object"
                            ? t && (r[n] = t)
                            : a instanceof Array
                            ? (r[n] = a.map(function (o) {
                                  return i(o, r);
                              }))
                            : (r[n] = i(a, r));
                    }
                return r;
            },
            Vv = (function () {
                function i(t) {
                    t === void 0 && (t = {}),
                        Object.assign(this, t),
                        (this.spaces = this.spaces || {}),
                        (this.spaces.before = this.spaces.before || ""),
                        (this.spaces.after = this.spaces.after || "");
                }
                var e = i.prototype;
                return (
                    (e.remove = function () {
                        return (
                            this.parent && this.parent.removeChild(this),
                            (this.parent = void 0),
                            this
                        );
                    }),
                    (e.replaceWith = function () {
                        if (this.parent) {
                            for (var r in arguments)
                                this.parent.insertBefore(this, arguments[r]);
                            this.remove();
                        }
                        return this;
                    }),
                    (e.next = function () {
                        return this.parent.at(this.parent.index(this) + 1);
                    }),
                    (e.prev = function () {
                        return this.parent.at(this.parent.index(this) - 1);
                    }),
                    (e.clone = function (r) {
                        r === void 0 && (r = {});
                        var n = zv(this);
                        for (var a in r) n[a] = r[a];
                        return n;
                    }),
                    (e.appendToPropertyAndEscape = function (r, n, a) {
                        this.raws || (this.raws = {});
                        var s = this[r],
                            o = this.raws[r];
                        (this[r] = s + n),
                            o || a !== n
                                ? (this.raws[r] = (o || s) + a)
                                : delete this.raws[r];
                    }),
                    (e.setPropertyAndEscape = function (r, n, a) {
                        this.raws || (this.raws = {}),
                            (this[r] = n),
                            (this.raws[r] = a);
                    }),
                    (e.setPropertyWithoutEscape = function (r, n) {
                        (this[r] = n), this.raws && delete this.raws[r];
                    }),
                    (e.isAtPosition = function (r, n) {
                        if (this.source && this.source.start && this.source.end)
                            return !(
                                this.source.start.line > r ||
                                this.source.end.line < r ||
                                (this.source.start.line === r &&
                                    this.source.start.column > n) ||
                                (this.source.end.line === r &&
                                    this.source.end.column < n)
                            );
                    }),
                    (e.stringifyProperty = function (r) {
                        return (this.raws && this.raws[r]) || this[r];
                    }),
                    (e.valueToString = function () {
                        return String(this.stringifyProperty("value"));
                    }),
                    (e.toString = function () {
                        return [
                            this.rawSpaceBefore,
                            this.valueToString(),
                            this.rawSpaceAfter,
                        ].join("");
                    }),
                    jv(i, [
                        {
                            key: "rawSpaceBefore",
                            get: function () {
                                var r =
                                    this.raws &&
                                    this.raws.spaces &&
                                    this.raws.spaces.before;
                                return (
                                    r === void 0 &&
                                        (r = this.spaces && this.spaces.before),
                                    r || ""
                                );
                            },
                            set: function (r) {
                                (0, qc.ensureObject)(this, "raws", "spaces"),
                                    (this.raws.spaces.before = r);
                            },
                        },
                        {
                            key: "rawSpaceAfter",
                            get: function () {
                                var r =
                                    this.raws &&
                                    this.raws.spaces &&
                                    this.raws.spaces.after;
                                return (
                                    r === void 0 && (r = this.spaces.after),
                                    r || ""
                                );
                            },
                            set: function (r) {
                                (0, qc.ensureObject)(this, "raws", "spaces"),
                                    (this.raws.spaces.after = r);
                            },
                        },
                    ]),
                    i
                );
            })();
        _r.default = Vv;
        Mc.exports = _r.default;
    });
    var ne = v((G) => {
        l();
        ("use strict");
        G.__esModule = !0;
        G.UNIVERSAL =
            G.TAG =
            G.STRING =
            G.SELECTOR =
            G.ROOT =
            G.PSEUDO =
            G.NESTING =
            G.ID =
            G.COMMENT =
            G.COMBINATOR =
            G.CLASS =
            G.ATTRIBUTE =
                void 0;
        var Uv = "tag";
        G.TAG = Uv;
        var Wv = "string";
        G.STRING = Wv;
        var Gv = "selector";
        G.SELECTOR = Gv;
        var Hv = "root";
        G.ROOT = Hv;
        var Yv = "pseudo";
        G.PSEUDO = Yv;
        var Qv = "nesting";
        G.NESTING = Qv;
        var Jv = "id";
        G.ID = Jv;
        var Xv = "comment";
        G.COMMENT = Xv;
        var Kv = "combinator";
        G.COMBINATOR = Kv;
        var Zv = "class";
        G.CLASS = Zv;
        var ex = "attribute";
        G.ATTRIBUTE = ex;
        var tx = "universal";
        G.UNIVERSAL = tx;
    });
    var Zi = v((Er, Lc) => {
        l();
        ("use strict");
        Er.__esModule = !0;
        Er.default = void 0;
        var rx = nx(Ue()),
            We = ix(ne());
        function Bc(i) {
            if (typeof WeakMap != "function") return null;
            var e = new WeakMap(),
                t = new WeakMap();
            return (Bc = function (n) {
                return n ? t : e;
            })(i);
        }
        function ix(i, e) {
            if (!e && i && i.__esModule) return i;
            if (i === null || (typeof i != "object" && typeof i != "function"))
                return { default: i };
            var t = Bc(e);
            if (t && t.has(i)) return t.get(i);
            var r = {},
                n = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (var a in i)
                if (
                    a !== "default" &&
                    Object.prototype.hasOwnProperty.call(i, a)
                ) {
                    var s = n ? Object.getOwnPropertyDescriptor(i, a) : null;
                    s && (s.get || s.set)
                        ? Object.defineProperty(r, a, s)
                        : (r[a] = i[a]);
                }
            return (r.default = i), t && t.set(i, r), r;
        }
        function nx(i) {
            return i && i.__esModule ? i : { default: i };
        }
        function sx(i, e) {
            var t =
                (typeof Symbol != "undefined" && i[Symbol.iterator]) ||
                i["@@iterator"];
            if (t) return (t = t.call(i)).next.bind(t);
            if (
                Array.isArray(i) ||
                (t = ax(i)) ||
                (e && i && typeof i.length == "number")
            ) {
                t && (i = t);
                var r = 0;
                return function () {
                    return r >= i.length
                        ? { done: !0 }
                        : { done: !1, value: i[r++] };
                };
            }
            throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
        }
        function ax(i, e) {
            if (!!i) {
                if (typeof i == "string") return Fc(i, e);
                var t = Object.prototype.toString.call(i).slice(8, -1);
                if (
                    (t === "Object" &&
                        i.constructor &&
                        (t = i.constructor.name),
                    t === "Map" || t === "Set")
                )
                    return Array.from(i);
                if (
                    t === "Arguments" ||
                    /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)
                )
                    return Fc(i, e);
            }
        }
        function Fc(i, e) {
            (e == null || e > i.length) && (e = i.length);
            for (var t = 0, r = new Array(e); t < e; t++) r[t] = i[t];
            return r;
        }
        function Nc(i, e) {
            for (var t = 0; t < e.length; t++) {
                var r = e[t];
                (r.enumerable = r.enumerable || !1),
                    (r.configurable = !0),
                    "value" in r && (r.writable = !0),
                    Object.defineProperty(i, r.key, r);
            }
        }
        function ox(i, e, t) {
            return (
                e && Nc(i.prototype, e),
                t && Nc(i, t),
                Object.defineProperty(i, "prototype", { writable: !1 }),
                i
            );
        }
        function lx(i, e) {
            (i.prototype = Object.create(e.prototype)),
                (i.prototype.constructor = i),
                zs(i, e);
        }
        function zs(i, e) {
            return (
                (zs = Object.setPrototypeOf
                    ? Object.setPrototypeOf.bind()
                    : function (r, n) {
                          return (r.__proto__ = n), r;
                      }),
                zs(i, e)
            );
        }
        var ux = (function (i) {
            lx(e, i);
            function e(r) {
                var n;
                return (
                    (n = i.call(this, r) || this), n.nodes || (n.nodes = []), n
                );
            }
            var t = e.prototype;
            return (
                (t.append = function (n) {
                    return (n.parent = this), this.nodes.push(n), this;
                }),
                (t.prepend = function (n) {
                    return (n.parent = this), this.nodes.unshift(n), this;
                }),
                (t.at = function (n) {
                    return this.nodes[n];
                }),
                (t.index = function (n) {
                    return typeof n == "number" ? n : this.nodes.indexOf(n);
                }),
                (t.removeChild = function (n) {
                    (n = this.index(n)),
                        (this.at(n).parent = void 0),
                        this.nodes.splice(n, 1);
                    var a;
                    for (var s in this.indexes)
                        (a = this.indexes[s]),
                            a >= n && (this.indexes[s] = a - 1);
                    return this;
                }),
                (t.removeAll = function () {
                    for (var n = sx(this.nodes), a; !(a = n()).done; ) {
                        var s = a.value;
                        s.parent = void 0;
                    }
                    return (this.nodes = []), this;
                }),
                (t.empty = function () {
                    return this.removeAll();
                }),
                (t.insertAfter = function (n, a) {
                    a.parent = this;
                    var s = this.index(n);
                    this.nodes.splice(s + 1, 0, a), (a.parent = this);
                    var o;
                    for (var u in this.indexes)
                        (o = this.indexes[u]),
                            s <= o && (this.indexes[u] = o + 1);
                    return this;
                }),
                (t.insertBefore = function (n, a) {
                    a.parent = this;
                    var s = this.index(n);
                    this.nodes.splice(s, 0, a), (a.parent = this);
                    var o;
                    for (var u in this.indexes)
                        (o = this.indexes[u]),
                            o <= s && (this.indexes[u] = o + 1);
                    return this;
                }),
                (t._findChildAtPosition = function (n, a) {
                    var s = void 0;
                    return (
                        this.each(function (o) {
                            if (o.atPosition) {
                                var u = o.atPosition(n, a);
                                if (u) return (s = u), !1;
                            } else if (o.isAtPosition(n, a)) return (s = o), !1;
                        }),
                        s
                    );
                }),
                (t.atPosition = function (n, a) {
                    if (this.isAtPosition(n, a))
                        return this._findChildAtPosition(n, a) || this;
                }),
                (t._inferEndPosition = function () {
                    this.last &&
                        this.last.source &&
                        this.last.source.end &&
                        ((this.source = this.source || {}),
                        (this.source.end = this.source.end || {}),
                        Object.assign(this.source.end, this.last.source.end));
                }),
                (t.each = function (n) {
                    this.lastEach || (this.lastEach = 0),
                        this.indexes || (this.indexes = {}),
                        this.lastEach++;
                    var a = this.lastEach;
                    if (((this.indexes[a] = 0), !!this.length)) {
                        for (
                            var s, o;
                            this.indexes[a] < this.length &&
                            ((s = this.indexes[a]),
                            (o = n(this.at(s), s)),
                            o !== !1);

                        )
                            this.indexes[a] += 1;
                        if ((delete this.indexes[a], o === !1)) return !1;
                    }
                }),
                (t.walk = function (n) {
                    return this.each(function (a, s) {
                        var o = n(a, s);
                        if ((o !== !1 && a.length && (o = a.walk(n)), o === !1))
                            return !1;
                    });
                }),
                (t.walkAttributes = function (n) {
                    var a = this;
                    return this.walk(function (s) {
                        if (s.type === We.ATTRIBUTE) return n.call(a, s);
                    });
                }),
                (t.walkClasses = function (n) {
                    var a = this;
                    return this.walk(function (s) {
                        if (s.type === We.CLASS) return n.call(a, s);
                    });
                }),
                (t.walkCombinators = function (n) {
                    var a = this;
                    return this.walk(function (s) {
                        if (s.type === We.COMBINATOR) return n.call(a, s);
                    });
                }),
                (t.walkComments = function (n) {
                    var a = this;
                    return this.walk(function (s) {
                        if (s.type === We.COMMENT) return n.call(a, s);
                    });
                }),
                (t.walkIds = function (n) {
                    var a = this;
                    return this.walk(function (s) {
                        if (s.type === We.ID) return n.call(a, s);
                    });
                }),
                (t.walkNesting = function (n) {
                    var a = this;
                    return this.walk(function (s) {
                        if (s.type === We.NESTING) return n.call(a, s);
                    });
                }),
                (t.walkPseudos = function (n) {
                    var a = this;
                    return this.walk(function (s) {
                        if (s.type === We.PSEUDO) return n.call(a, s);
                    });
                }),
                (t.walkTags = function (n) {
                    var a = this;
                    return this.walk(function (s) {
                        if (s.type === We.TAG) return n.call(a, s);
                    });
                }),
                (t.walkUniversals = function (n) {
                    var a = this;
                    return this.walk(function (s) {
                        if (s.type === We.UNIVERSAL) return n.call(a, s);
                    });
                }),
                (t.split = function (n) {
                    var a = this,
                        s = [];
                    return this.reduce(function (o, u, c) {
                        var f = n.call(a, u);
                        return (
                            s.push(u),
                            f
                                ? (o.push(s), (s = []))
                                : c === a.length - 1 && o.push(s),
                            o
                        );
                    }, []);
                }),
                (t.map = function (n) {
                    return this.nodes.map(n);
                }),
                (t.reduce = function (n, a) {
                    return this.nodes.reduce(n, a);
                }),
                (t.every = function (n) {
                    return this.nodes.every(n);
                }),
                (t.some = function (n) {
                    return this.nodes.some(n);
                }),
                (t.filter = function (n) {
                    return this.nodes.filter(n);
                }),
                (t.sort = function (n) {
                    return this.nodes.sort(n);
                }),
                (t.toString = function () {
                    return this.map(String).join("");
                }),
                ox(e, [
                    {
                        key: "first",
                        get: function () {
                            return this.at(0);
                        },
                    },
                    {
                        key: "last",
                        get: function () {
                            return this.at(this.length - 1);
                        },
                    },
                    {
                        key: "length",
                        get: function () {
                            return this.nodes.length;
                        },
                    },
                ]),
                e
            );
        })(rx.default);
        Er.default = ux;
        Lc.exports = Er.default;
    });
    var Us = v((Or, jc) => {
        l();
        ("use strict");
        Or.__esModule = !0;
        Or.default = void 0;
        var fx = px(Zi()),
            cx = ne();
        function px(i) {
            return i && i.__esModule ? i : { default: i };
        }
        function $c(i, e) {
            for (var t = 0; t < e.length; t++) {
                var r = e[t];
                (r.enumerable = r.enumerable || !1),
                    (r.configurable = !0),
                    "value" in r && (r.writable = !0),
                    Object.defineProperty(i, r.key, r);
            }
        }
        function dx(i, e, t) {
            return (
                e && $c(i.prototype, e),
                t && $c(i, t),
                Object.defineProperty(i, "prototype", { writable: !1 }),
                i
            );
        }
        function hx(i, e) {
            (i.prototype = Object.create(e.prototype)),
                (i.prototype.constructor = i),
                Vs(i, e);
        }
        function Vs(i, e) {
            return (
                (Vs = Object.setPrototypeOf
                    ? Object.setPrototypeOf.bind()
                    : function (r, n) {
                          return (r.__proto__ = n), r;
                      }),
                Vs(i, e)
            );
        }
        var mx = (function (i) {
            hx(e, i);
            function e(r) {
                var n;
                return (n = i.call(this, r) || this), (n.type = cx.ROOT), n;
            }
            var t = e.prototype;
            return (
                (t.toString = function () {
                    var n = this.reduce(function (a, s) {
                        return a.push(String(s)), a;
                    }, []).join(",");
                    return this.trailingComma ? n + "," : n;
                }),
                (t.error = function (n, a) {
                    return this._error ? this._error(n, a) : new Error(n);
                }),
                dx(e, [
                    {
                        key: "errorGenerator",
                        set: function (n) {
                            this._error = n;
                        },
                    },
                ]),
                e
            );
        })(fx.default);
        Or.default = mx;
        jc.exports = Or.default;
    });
    var Gs = v((Tr, zc) => {
        l();
        ("use strict");
        Tr.__esModule = !0;
        Tr.default = void 0;
        var gx = wx(Zi()),
            yx = ne();
        function wx(i) {
            return i && i.__esModule ? i : { default: i };
        }
        function bx(i, e) {
            (i.prototype = Object.create(e.prototype)),
                (i.prototype.constructor = i),
                Ws(i, e);
        }
        function Ws(i, e) {
            return (
                (Ws = Object.setPrototypeOf
                    ? Object.setPrototypeOf.bind()
                    : function (r, n) {
                          return (r.__proto__ = n), r;
                      }),
                Ws(i, e)
            );
        }
        var vx = (function (i) {
            bx(e, i);
            function e(t) {
                var r;
                return (r = i.call(this, t) || this), (r.type = yx.SELECTOR), r;
            }
            return e;
        })(gx.default);
        Tr.default = vx;
        zc.exports = Tr.default;
    });
    var en = v((gP, Vc) => {
        l();
        ("use strict");
        var xx = {},
            kx = xx.hasOwnProperty,
            Sx = function (e, t) {
                if (!e) return t;
                var r = {};
                for (var n in t) r[n] = kx.call(e, n) ? e[n] : t[n];
                return r;
            },
            Cx = /[ -,\.\/:-@\[-\^`\{-~]/,
            Ax = /[ -,\.\/:-@\[\]\^`\{-~]/,
            _x = /(^|\\+)?(\\[A-F0-9]{1,6})\x20(?![a-fA-F0-9\x20])/g,
            Hs = function i(e, t) {
                (t = Sx(t, i.options)),
                    t.quotes != "single" &&
                        t.quotes != "double" &&
                        (t.quotes = "single");
                for (
                    var r = t.quotes == "double" ? '"' : "'",
                        n = t.isIdentifier,
                        a = e.charAt(0),
                        s = "",
                        o = 0,
                        u = e.length;
                    o < u;

                ) {
                    var c = e.charAt(o++),
                        f = c.charCodeAt(),
                        p = void 0;
                    if (f < 32 || f > 126) {
                        if (f >= 55296 && f <= 56319 && o < u) {
                            var d = e.charCodeAt(o++);
                            (d & 64512) == 56320
                                ? (f = ((f & 1023) << 10) + (d & 1023) + 65536)
                                : o--;
                        }
                        p = "\\" + f.toString(16).toUpperCase() + " ";
                    } else
                        t.escapeEverything
                            ? Cx.test(c)
                                ? (p = "\\" + c)
                                : (p =
                                      "\\" + f.toString(16).toUpperCase() + " ")
                            : /[\t\n\f\r\x0B]/.test(c)
                            ? (p = "\\" + f.toString(16).toUpperCase() + " ")
                            : c == "\\" ||
                              (!n &&
                                  ((c == '"' && r == c) ||
                                      (c == "'" && r == c))) ||
                              (n && Ax.test(c))
                            ? (p = "\\" + c)
                            : (p = c);
                    s += p;
                }
                return (
                    n &&
                        (/^-[-\d]/.test(s)
                            ? (s = "\\-" + s.slice(1))
                            : /\d/.test(a) &&
                              (s = "\\3" + a + " " + s.slice(1))),
                    (s = s.replace(_x, function (h, y, x) {
                        return y && y.length % 2 ? h : (y || "") + x;
                    })),
                    !n && t.wrap ? r + s + r : s
                );
            };
        Hs.options = {
            escapeEverything: !1,
            isIdentifier: !1,
            quotes: "single",
            wrap: !1,
        };
        Hs.version = "3.0.0";
        Vc.exports = Hs;
    });
    var Qs = v((Pr, Gc) => {
        l();
        ("use strict");
        Pr.__esModule = !0;
        Pr.default = void 0;
        var Ex = Uc(en()),
            Ox = Ar(),
            Tx = Uc(Ue()),
            Px = ne();
        function Uc(i) {
            return i && i.__esModule ? i : { default: i };
        }
        function Wc(i, e) {
            for (var t = 0; t < e.length; t++) {
                var r = e[t];
                (r.enumerable = r.enumerable || !1),
                    (r.configurable = !0),
                    "value" in r && (r.writable = !0),
                    Object.defineProperty(i, r.key, r);
            }
        }
        function Dx(i, e, t) {
            return (
                e && Wc(i.prototype, e),
                t && Wc(i, t),
                Object.defineProperty(i, "prototype", { writable: !1 }),
                i
            );
        }
        function Ix(i, e) {
            (i.prototype = Object.create(e.prototype)),
                (i.prototype.constructor = i),
                Ys(i, e);
        }
        function Ys(i, e) {
            return (
                (Ys = Object.setPrototypeOf
                    ? Object.setPrototypeOf.bind()
                    : function (r, n) {
                          return (r.__proto__ = n), r;
                      }),
                Ys(i, e)
            );
        }
        var qx = (function (i) {
            Ix(e, i);
            function e(r) {
                var n;
                return (
                    (n = i.call(this, r) || this),
                    (n.type = Px.CLASS),
                    (n._constructed = !0),
                    n
                );
            }
            var t = e.prototype;
            return (
                (t.valueToString = function () {
                    return "." + i.prototype.valueToString.call(this);
                }),
                Dx(e, [
                    {
                        key: "value",
                        get: function () {
                            return this._value;
                        },
                        set: function (n) {
                            if (this._constructed) {
                                var a = (0, Ex.default)(n, {
                                    isIdentifier: !0,
                                });
                                a !== n
                                    ? ((0, Ox.ensureObject)(this, "raws"),
                                      (this.raws.value = a))
                                    : this.raws && delete this.raws.value;
                            }
                            this._value = n;
                        },
                    },
                ]),
                e
            );
        })(Tx.default);
        Pr.default = qx;
        Gc.exports = Pr.default;
    });
    var Xs = v((Dr, Hc) => {
        l();
        ("use strict");
        Dr.__esModule = !0;
        Dr.default = void 0;
        var Rx = Bx(Ue()),
            Mx = ne();
        function Bx(i) {
            return i && i.__esModule ? i : { default: i };
        }
        function Fx(i, e) {
            (i.prototype = Object.create(e.prototype)),
                (i.prototype.constructor = i),
                Js(i, e);
        }
        function Js(i, e) {
            return (
                (Js = Object.setPrototypeOf
                    ? Object.setPrototypeOf.bind()
                    : function (r, n) {
                          return (r.__proto__ = n), r;
                      }),
                Js(i, e)
            );
        }
        var Nx = (function (i) {
            Fx(e, i);
            function e(t) {
                var r;
                return (r = i.call(this, t) || this), (r.type = Mx.COMMENT), r;
            }
            return e;
        })(Rx.default);
        Dr.default = Nx;
        Hc.exports = Dr.default;
    });
    var Zs = v((Ir, Yc) => {
        l();
        ("use strict");
        Ir.__esModule = !0;
        Ir.default = void 0;
        var Lx = jx(Ue()),
            $x = ne();
        function jx(i) {
            return i && i.__esModule ? i : { default: i };
        }
        function zx(i, e) {
            (i.prototype = Object.create(e.prototype)),
                (i.prototype.constructor = i),
                Ks(i, e);
        }
        function Ks(i, e) {
            return (
                (Ks = Object.setPrototypeOf
                    ? Object.setPrototypeOf.bind()
                    : function (r, n) {
                          return (r.__proto__ = n), r;
                      }),
                Ks(i, e)
            );
        }
        var Vx = (function (i) {
            zx(e, i);
            function e(r) {
                var n;
                return (n = i.call(this, r) || this), (n.type = $x.ID), n;
            }
            var t = e.prototype;
            return (
                (t.valueToString = function () {
                    return "#" + i.prototype.valueToString.call(this);
                }),
                e
            );
        })(Lx.default);
        Ir.default = Vx;
        Yc.exports = Ir.default;
    });
    var tn = v((qr, Xc) => {
        l();
        ("use strict");
        qr.__esModule = !0;
        qr.default = void 0;
        var Ux = Qc(en()),
            Wx = Ar(),
            Gx = Qc(Ue());
        function Qc(i) {
            return i && i.__esModule ? i : { default: i };
        }
        function Jc(i, e) {
            for (var t = 0; t < e.length; t++) {
                var r = e[t];
                (r.enumerable = r.enumerable || !1),
                    (r.configurable = !0),
                    "value" in r && (r.writable = !0),
                    Object.defineProperty(i, r.key, r);
            }
        }
        function Hx(i, e, t) {
            return (
                e && Jc(i.prototype, e),
                t && Jc(i, t),
                Object.defineProperty(i, "prototype", { writable: !1 }),
                i
            );
        }
        function Yx(i, e) {
            (i.prototype = Object.create(e.prototype)),
                (i.prototype.constructor = i),
                ea(i, e);
        }
        function ea(i, e) {
            return (
                (ea = Object.setPrototypeOf
                    ? Object.setPrototypeOf.bind()
                    : function (r, n) {
                          return (r.__proto__ = n), r;
                      }),
                ea(i, e)
            );
        }
        var Qx = (function (i) {
            Yx(e, i);
            function e() {
                return i.apply(this, arguments) || this;
            }
            var t = e.prototype;
            return (
                (t.qualifiedName = function (n) {
                    return this.namespace ? this.namespaceString + "|" + n : n;
                }),
                (t.valueToString = function () {
                    return this.qualifiedName(
                        i.prototype.valueToString.call(this)
                    );
                }),
                Hx(e, [
                    {
                        key: "namespace",
                        get: function () {
                            return this._namespace;
                        },
                        set: function (n) {
                            if (n === !0 || n === "*" || n === "&") {
                                (this._namespace = n),
                                    this.raws && delete this.raws.namespace;
                                return;
                            }
                            var a = (0, Ux.default)(n, { isIdentifier: !0 });
                            (this._namespace = n),
                                a !== n
                                    ? ((0, Wx.ensureObject)(this, "raws"),
                                      (this.raws.namespace = a))
                                    : this.raws && delete this.raws.namespace;
                        },
                    },
                    {
                        key: "ns",
                        get: function () {
                            return this._namespace;
                        },
                        set: function (n) {
                            this.namespace = n;
                        },
                    },
                    {
                        key: "namespaceString",
                        get: function () {
                            if (this.namespace) {
                                var n = this.stringifyProperty("namespace");
                                return n === !0 ? "" : n;
                            } else return "";
                        },
                    },
                ]),
                e
            );
        })(Gx.default);
        qr.default = Qx;
        Xc.exports = qr.default;
    });
    var ra = v((Rr, Kc) => {
        l();
        ("use strict");
        Rr.__esModule = !0;
        Rr.default = void 0;
        var Jx = Kx(tn()),
            Xx = ne();
        function Kx(i) {
            return i && i.__esModule ? i : { default: i };
        }
        function Zx(i, e) {
            (i.prototype = Object.create(e.prototype)),
                (i.prototype.constructor = i),
                ta(i, e);
        }
        function ta(i, e) {
            return (
                (ta = Object.setPrototypeOf
                    ? Object.setPrototypeOf.bind()
                    : function (r, n) {
                          return (r.__proto__ = n), r;
                      }),
                ta(i, e)
            );
        }
        var e1 = (function (i) {
            Zx(e, i);
            function e(t) {
                var r;
                return (r = i.call(this, t) || this), (r.type = Xx.TAG), r;
            }
            return e;
        })(Jx.default);
        Rr.default = e1;
        Kc.exports = Rr.default;
    });
    var na = v((Mr, Zc) => {
        l();
        ("use strict");
        Mr.__esModule = !0;
        Mr.default = void 0;
        var t1 = i1(Ue()),
            r1 = ne();
        function i1(i) {
            return i && i.__esModule ? i : { default: i };
        }
        function n1(i, e) {
            (i.prototype = Object.create(e.prototype)),
                (i.prototype.constructor = i),
                ia(i, e);
        }
        function ia(i, e) {
            return (
                (ia = Object.setPrototypeOf
                    ? Object.setPrototypeOf.bind()
                    : function (r, n) {
                          return (r.__proto__ = n), r;
                      }),
                ia(i, e)
            );
        }
        var s1 = (function (i) {
            n1(e, i);
            function e(t) {
                var r;
                return (r = i.call(this, t) || this), (r.type = r1.STRING), r;
            }
            return e;
        })(t1.default);
        Mr.default = s1;
        Zc.exports = Mr.default;
    });
    var aa = v((Br, ep) => {
        l();
        ("use strict");
        Br.__esModule = !0;
        Br.default = void 0;
        var a1 = l1(Zi()),
            o1 = ne();
        function l1(i) {
            return i && i.__esModule ? i : { default: i };
        }
        function u1(i, e) {
            (i.prototype = Object.create(e.prototype)),
                (i.prototype.constructor = i),
                sa(i, e);
        }
        function sa(i, e) {
            return (
                (sa = Object.setPrototypeOf
                    ? Object.setPrototypeOf.bind()
                    : function (r, n) {
                          return (r.__proto__ = n), r;
                      }),
                sa(i, e)
            );
        }
        var f1 = (function (i) {
            u1(e, i);
            function e(r) {
                var n;
                return (n = i.call(this, r) || this), (n.type = o1.PSEUDO), n;
            }
            var t = e.prototype;
            return (
                (t.toString = function () {
                    var n = this.length
                        ? "(" + this.map(String).join(",") + ")"
                        : "";
                    return [
                        this.rawSpaceBefore,
                        this.stringifyProperty("value"),
                        n,
                        this.rawSpaceAfter,
                    ].join("");
                }),
                e
            );
        })(a1.default);
        Br.default = f1;
        ep.exports = Br.default;
    });
    var tp = {};
    Ae(tp, { deprecate: () => c1 });
    function c1(i) {
        return i;
    }
    var rp = C(() => {
        l();
    });
    var np = v((yP, ip) => {
        l();
        ip.exports = (rp(), tp).deprecate;
    });
    var pa = v((Lr) => {
        l();
        ("use strict");
        Lr.__esModule = !0;
        Lr.default = void 0;
        Lr.unescapeValue = fa;
        var Fr = la(en()),
            p1 = la(Yi()),
            d1 = la(tn()),
            h1 = ne(),
            oa;
        function la(i) {
            return i && i.__esModule ? i : { default: i };
        }
        function sp(i, e) {
            for (var t = 0; t < e.length; t++) {
                var r = e[t];
                (r.enumerable = r.enumerable || !1),
                    (r.configurable = !0),
                    "value" in r && (r.writable = !0),
                    Object.defineProperty(i, r.key, r);
            }
        }
        function m1(i, e, t) {
            return (
                e && sp(i.prototype, e),
                t && sp(i, t),
                Object.defineProperty(i, "prototype", { writable: !1 }),
                i
            );
        }
        function g1(i, e) {
            (i.prototype = Object.create(e.prototype)),
                (i.prototype.constructor = i),
                ua(i, e);
        }
        function ua(i, e) {
            return (
                (ua = Object.setPrototypeOf
                    ? Object.setPrototypeOf.bind()
                    : function (r, n) {
                          return (r.__proto__ = n), r;
                      }),
                ua(i, e)
            );
        }
        var Nr = np(),
            y1 = /^('|")([^]*)\1$/,
            w1 = Nr(function () {},
            "Assigning an attribute a value containing characters that might need to be escaped is deprecated. Call attribute.setValue() instead."),
            b1 = Nr(function () {},
            "Assigning attr.quoted is deprecated and has no effect. Assign to attr.quoteMark instead."),
            v1 = Nr(function () {},
            "Constructing an Attribute selector with a value without specifying quoteMark is deprecated. Note: The value should be unescaped now.");
        function fa(i) {
            var e = !1,
                t = null,
                r = i,
                n = r.match(y1);
            return (
                n && ((t = n[1]), (r = n[2])),
                (r = (0, p1.default)(r)),
                r !== i && (e = !0),
                { deprecatedUsage: e, unescaped: r, quoteMark: t }
            );
        }
        function x1(i) {
            if (i.quoteMark !== void 0 || i.value === void 0) return i;
            v1();
            var e = fa(i.value),
                t = e.quoteMark,
                r = e.unescaped;
            return (
                i.raws || (i.raws = {}),
                i.raws.value === void 0 && (i.raws.value = i.value),
                (i.value = r),
                (i.quoteMark = t),
                i
            );
        }
        var rn = (function (i) {
            g1(e, i);
            function e(r) {
                var n;
                return (
                    r === void 0 && (r = {}),
                    (n = i.call(this, x1(r)) || this),
                    (n.type = h1.ATTRIBUTE),
                    (n.raws = n.raws || {}),
                    Object.defineProperty(n.raws, "unquoted", {
                        get: Nr(function () {
                            return n.value;
                        }, "attr.raws.unquoted is deprecated. Call attr.value instead."),
                        set: Nr(function () {
                            return n.value;
                        }, "Setting attr.raws.unquoted is deprecated and has no effect. attr.value is unescaped by default now."),
                    }),
                    (n._constructed = !0),
                    n
                );
            }
            var t = e.prototype;
            return (
                (t.getQuotedValue = function (n) {
                    n === void 0 && (n = {});
                    var a = this._determineQuoteMark(n),
                        s = ca[a],
                        o = (0, Fr.default)(this._value, s);
                    return o;
                }),
                (t._determineQuoteMark = function (n) {
                    return n.smart
                        ? this.smartQuoteMark(n)
                        : this.preferredQuoteMark(n);
                }),
                (t.setValue = function (n, a) {
                    a === void 0 && (a = {}),
                        (this._value = n),
                        (this._quoteMark = this._determineQuoteMark(a)),
                        this._syncRawValue();
                }),
                (t.smartQuoteMark = function (n) {
                    var a = this.value,
                        s = a.replace(/[^']/g, "").length,
                        o = a.replace(/[^"]/g, "").length;
                    if (s + o === 0) {
                        var u = (0, Fr.default)(a, { isIdentifier: !0 });
                        if (u === a) return e.NO_QUOTE;
                        var c = this.preferredQuoteMark(n);
                        if (c === e.NO_QUOTE) {
                            var f =
                                    this.quoteMark ||
                                    n.quoteMark ||
                                    e.DOUBLE_QUOTE,
                                p = ca[f],
                                d = (0, Fr.default)(a, p);
                            if (d.length < u.length) return f;
                        }
                        return c;
                    } else
                        return o === s
                            ? this.preferredQuoteMark(n)
                            : o < s
                            ? e.DOUBLE_QUOTE
                            : e.SINGLE_QUOTE;
                }),
                (t.preferredQuoteMark = function (n) {
                    var a = n.preferCurrentQuoteMark
                        ? this.quoteMark
                        : n.quoteMark;
                    return (
                        a === void 0 &&
                            (a = n.preferCurrentQuoteMark
                                ? n.quoteMark
                                : this.quoteMark),
                        a === void 0 && (a = e.DOUBLE_QUOTE),
                        a
                    );
                }),
                (t._syncRawValue = function () {
                    var n = (0, Fr.default)(this._value, ca[this.quoteMark]);
                    n === this._value
                        ? this.raws && delete this.raws.value
                        : (this.raws.value = n);
                }),
                (t._handleEscapes = function (n, a) {
                    if (this._constructed) {
                        var s = (0, Fr.default)(a, { isIdentifier: !0 });
                        s !== a ? (this.raws[n] = s) : delete this.raws[n];
                    }
                }),
                (t._spacesFor = function (n) {
                    var a = { before: "", after: "" },
                        s = this.spaces[n] || {},
                        o = (this.raws.spaces && this.raws.spaces[n]) || {};
                    return Object.assign(a, s, o);
                }),
                (t._stringFor = function (n, a, s) {
                    a === void 0 && (a = n), s === void 0 && (s = ap);
                    var o = this._spacesFor(a);
                    return s(this.stringifyProperty(n), o);
                }),
                (t.offsetOf = function (n) {
                    var a = 1,
                        s = this._spacesFor("attribute");
                    if (
                        ((a += s.before.length),
                        n === "namespace" || n === "ns")
                    )
                        return this.namespace ? a : -1;
                    if (
                        n === "attributeNS" ||
                        ((a += this.namespaceString.length),
                        this.namespace && (a += 1),
                        n === "attribute")
                    )
                        return a;
                    (a += this.stringifyProperty("attribute").length),
                        (a += s.after.length);
                    var o = this._spacesFor("operator");
                    a += o.before.length;
                    var u = this.stringifyProperty("operator");
                    if (n === "operator") return u ? a : -1;
                    (a += u.length), (a += o.after.length);
                    var c = this._spacesFor("value");
                    a += c.before.length;
                    var f = this.stringifyProperty("value");
                    if (n === "value") return f ? a : -1;
                    (a += f.length), (a += c.after.length);
                    var p = this._spacesFor("insensitive");
                    return (
                        (a += p.before.length),
                        n === "insensitive" && this.insensitive ? a : -1
                    );
                }),
                (t.toString = function () {
                    var n = this,
                        a = [this.rawSpaceBefore, "["];
                    return (
                        a.push(
                            this._stringFor("qualifiedAttribute", "attribute")
                        ),
                        this.operator &&
                            (this.value || this.value === "") &&
                            (a.push(this._stringFor("operator")),
                            a.push(this._stringFor("value")),
                            a.push(
                                this._stringFor(
                                    "insensitiveFlag",
                                    "insensitive",
                                    function (s, o) {
                                        return (
                                            s.length > 0 &&
                                                !n.quoted &&
                                                o.before.length === 0 &&
                                                !(
                                                    n.spaces.value &&
                                                    n.spaces.value.after
                                                ) &&
                                                (o.before = " "),
                                            ap(s, o)
                                        );
                                    }
                                )
                            )),
                        a.push("]"),
                        a.push(this.rawSpaceAfter),
                        a.join("")
                    );
                }),
                m1(e, [
                    {
                        key: "quoted",
                        get: function () {
                            var n = this.quoteMark;
                            return n === "'" || n === '"';
                        },
                        set: function (n) {
                            b1();
                        },
                    },
                    {
                        key: "quoteMark",
                        get: function () {
                            return this._quoteMark;
                        },
                        set: function (n) {
                            if (!this._constructed) {
                                this._quoteMark = n;
                                return;
                            }
                            this._quoteMark !== n &&
                                ((this._quoteMark = n), this._syncRawValue());
                        },
                    },
                    {
                        key: "qualifiedAttribute",
                        get: function () {
                            return this.qualifiedName(
                                this.raws.attribute || this.attribute
                            );
                        },
                    },
                    {
                        key: "insensitiveFlag",
                        get: function () {
                            return this.insensitive ? "i" : "";
                        },
                    },
                    {
                        key: "value",
                        get: function () {
                            return this._value;
                        },
                        set: function (n) {
                            if (this._constructed) {
                                var a = fa(n),
                                    s = a.deprecatedUsage,
                                    o = a.unescaped,
                                    u = a.quoteMark;
                                if (
                                    (s && w1(),
                                    o === this._value && u === this._quoteMark)
                                )
                                    return;
                                (this._value = o),
                                    (this._quoteMark = u),
                                    this._syncRawValue();
                            } else this._value = n;
                        },
                    },
                    {
                        key: "insensitive",
                        get: function () {
                            return this._insensitive;
                        },
                        set: function (n) {
                            n ||
                                ((this._insensitive = !1),
                                this.raws &&
                                    (this.raws.insensitiveFlag === "I" ||
                                        this.raws.insensitiveFlag === "i") &&
                                    (this.raws.insensitiveFlag = void 0)),
                                (this._insensitive = n);
                        },
                    },
                    {
                        key: "attribute",
                        get: function () {
                            return this._attribute;
                        },
                        set: function (n) {
                            this._handleEscapes("attribute", n),
                                (this._attribute = n);
                        },
                    },
                ]),
                e
            );
        })(d1.default);
        Lr.default = rn;
        rn.NO_QUOTE = null;
        rn.SINGLE_QUOTE = "'";
        rn.DOUBLE_QUOTE = '"';
        var ca =
            ((oa = {
                "'": { quotes: "single", wrap: !0 },
                '"': { quotes: "double", wrap: !0 },
            }),
            (oa[null] = { isIdentifier: !0 }),
            oa);
        function ap(i, e) {
            return "" + e.before + i + e.after;
        }
    });
    var ha = v(($r, op) => {
        l();
        ("use strict");
        $r.__esModule = !0;
        $r.default = void 0;
        var k1 = C1(tn()),
            S1 = ne();
        function C1(i) {
            return i && i.__esModule ? i : { default: i };
        }
        function A1(i, e) {
            (i.prototype = Object.create(e.prototype)),
                (i.prototype.constructor = i),
                da(i, e);
        }
        function da(i, e) {
            return (
                (da = Object.setPrototypeOf
                    ? Object.setPrototypeOf.bind()
                    : function (r, n) {
                          return (r.__proto__ = n), r;
                      }),
                da(i, e)
            );
        }
        var _1 = (function (i) {
            A1(e, i);
            function e(t) {
                var r;
                return (
                    (r = i.call(this, t) || this),
                    (r.type = S1.UNIVERSAL),
                    (r.value = "*"),
                    r
                );
            }
            return e;
        })(k1.default);
        $r.default = _1;
        op.exports = $r.default;
    });
    var ga = v((jr, lp) => {
        l();
        ("use strict");
        jr.__esModule = !0;
        jr.default = void 0;
        var E1 = T1(Ue()),
            O1 = ne();
        function T1(i) {
            return i && i.__esModule ? i : { default: i };
        }
        function P1(i, e) {
            (i.prototype = Object.create(e.prototype)),
                (i.prototype.constructor = i),
                ma(i, e);
        }
        function ma(i, e) {
            return (
                (ma = Object.setPrototypeOf
                    ? Object.setPrototypeOf.bind()
                    : function (r, n) {
                          return (r.__proto__ = n), r;
                      }),
                ma(i, e)
            );
        }
        var D1 = (function (i) {
            P1(e, i);
            function e(t) {
                var r;
                return (
                    (r = i.call(this, t) || this), (r.type = O1.COMBINATOR), r
                );
            }
            return e;
        })(E1.default);
        jr.default = D1;
        lp.exports = jr.default;
    });
    var wa = v((zr, up) => {
        l();
        ("use strict");
        zr.__esModule = !0;
        zr.default = void 0;
        var I1 = R1(Ue()),
            q1 = ne();
        function R1(i) {
            return i && i.__esModule ? i : { default: i };
        }
        function M1(i, e) {
            (i.prototype = Object.create(e.prototype)),
                (i.prototype.constructor = i),
                ya(i, e);
        }
        function ya(i, e) {
            return (
                (ya = Object.setPrototypeOf
                    ? Object.setPrototypeOf.bind()
                    : function (r, n) {
                          return (r.__proto__ = n), r;
                      }),
                ya(i, e)
            );
        }
        var B1 = (function (i) {
            M1(e, i);
            function e(t) {
                var r;
                return (
                    (r = i.call(this, t) || this),
                    (r.type = q1.NESTING),
                    (r.value = "&"),
                    r
                );
            }
            return e;
        })(I1.default);
        zr.default = B1;
        up.exports = zr.default;
    });
    var cp = v((nn, fp) => {
        l();
        ("use strict");
        nn.__esModule = !0;
        nn.default = F1;
        function F1(i) {
            return i.sort(function (e, t) {
                return e - t;
            });
        }
        fp.exports = nn.default;
    });
    var ba = v((D) => {
        l();
        ("use strict");
        D.__esModule = !0;
        D.word =
            D.tilde =
            D.tab =
            D.str =
            D.space =
            D.slash =
            D.singleQuote =
            D.semicolon =
            D.plus =
            D.pipe =
            D.openSquare =
            D.openParenthesis =
            D.newline =
            D.greaterThan =
            D.feed =
            D.equals =
            D.doubleQuote =
            D.dollar =
            D.cr =
            D.comment =
            D.comma =
            D.combinator =
            D.colon =
            D.closeSquare =
            D.closeParenthesis =
            D.caret =
            D.bang =
            D.backslash =
            D.at =
            D.asterisk =
            D.ampersand =
                void 0;
        var N1 = 38;
        D.ampersand = N1;
        var L1 = 42;
        D.asterisk = L1;
        var $1 = 64;
        D.at = $1;
        var j1 = 44;
        D.comma = j1;
        var z1 = 58;
        D.colon = z1;
        var V1 = 59;
        D.semicolon = V1;
        var U1 = 40;
        D.openParenthesis = U1;
        var W1 = 41;
        D.closeParenthesis = W1;
        var G1 = 91;
        D.openSquare = G1;
        var H1 = 93;
        D.closeSquare = H1;
        var Y1 = 36;
        D.dollar = Y1;
        var Q1 = 126;
        D.tilde = Q1;
        var J1 = 94;
        D.caret = J1;
        var X1 = 43;
        D.plus = X1;
        var K1 = 61;
        D.equals = K1;
        var Z1 = 124;
        D.pipe = Z1;
        var ek = 62;
        D.greaterThan = ek;
        var tk = 32;
        D.space = tk;
        var pp = 39;
        D.singleQuote = pp;
        var rk = 34;
        D.doubleQuote = rk;
        var ik = 47;
        D.slash = ik;
        var nk = 33;
        D.bang = nk;
        var sk = 92;
        D.backslash = sk;
        var ak = 13;
        D.cr = ak;
        var ok = 12;
        D.feed = ok;
        var lk = 10;
        D.newline = lk;
        var uk = 9;
        D.tab = uk;
        var fk = pp;
        D.str = fk;
        var ck = -1;
        D.comment = ck;
        var pk = -2;
        D.word = pk;
        var dk = -3;
        D.combinator = dk;
    });
    var mp = v((Vr) => {
        l();
        ("use strict");
        Vr.__esModule = !0;
        Vr.FIELDS = void 0;
        Vr.default = vk;
        var O = hk(ba()),
            Tt,
            V;
        function dp(i) {
            if (typeof WeakMap != "function") return null;
            var e = new WeakMap(),
                t = new WeakMap();
            return (dp = function (n) {
                return n ? t : e;
            })(i);
        }
        function hk(i, e) {
            if (!e && i && i.__esModule) return i;
            if (i === null || (typeof i != "object" && typeof i != "function"))
                return { default: i };
            var t = dp(e);
            if (t && t.has(i)) return t.get(i);
            var r = {},
                n = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (var a in i)
                if (
                    a !== "default" &&
                    Object.prototype.hasOwnProperty.call(i, a)
                ) {
                    var s = n ? Object.getOwnPropertyDescriptor(i, a) : null;
                    s && (s.get || s.set)
                        ? Object.defineProperty(r, a, s)
                        : (r[a] = i[a]);
                }
            return (r.default = i), t && t.set(i, r), r;
        }
        var mk =
                ((Tt = {}),
                (Tt[O.tab] = !0),
                (Tt[O.newline] = !0),
                (Tt[O.cr] = !0),
                (Tt[O.feed] = !0),
                Tt),
            gk =
                ((V = {}),
                (V[O.space] = !0),
                (V[O.tab] = !0),
                (V[O.newline] = !0),
                (V[O.cr] = !0),
                (V[O.feed] = !0),
                (V[O.ampersand] = !0),
                (V[O.asterisk] = !0),
                (V[O.bang] = !0),
                (V[O.comma] = !0),
                (V[O.colon] = !0),
                (V[O.semicolon] = !0),
                (V[O.openParenthesis] = !0),
                (V[O.closeParenthesis] = !0),
                (V[O.openSquare] = !0),
                (V[O.closeSquare] = !0),
                (V[O.singleQuote] = !0),
                (V[O.doubleQuote] = !0),
                (V[O.plus] = !0),
                (V[O.pipe] = !0),
                (V[O.tilde] = !0),
                (V[O.greaterThan] = !0),
                (V[O.equals] = !0),
                (V[O.dollar] = !0),
                (V[O.caret] = !0),
                (V[O.slash] = !0),
                V),
            va = {},
            hp = "0123456789abcdefABCDEF";
        for (sn = 0; sn < hp.length; sn++) va[hp.charCodeAt(sn)] = !0;
        var sn;
        function yk(i, e) {
            var t = e,
                r;
            do {
                if (((r = i.charCodeAt(t)), gk[r])) return t - 1;
                r === O.backslash ? (t = wk(i, t) + 1) : t++;
            } while (t < i.length);
            return t - 1;
        }
        function wk(i, e) {
            var t = e,
                r = i.charCodeAt(t + 1);
            if (!mk[r])
                if (va[r]) {
                    var n = 0;
                    do t++, n++, (r = i.charCodeAt(t + 1));
                    while (va[r] && n < 6);
                    n < 6 && r === O.space && t++;
                } else t++;
            return t;
        }
        var bk = {
            TYPE: 0,
            START_LINE: 1,
            START_COL: 2,
            END_LINE: 3,
            END_COL: 4,
            START_POS: 5,
            END_POS: 6,
        };
        Vr.FIELDS = bk;
        function vk(i) {
            var e = [],
                t = i.css.valueOf(),
                r = t,
                n = r.length,
                a = -1,
                s = 1,
                o = 0,
                u = 0,
                c,
                f,
                p,
                d,
                h,
                y,
                x,
                w,
                b,
                k,
                S,
                _,
                E;
            function I(B, q) {
                if (i.safe) (t += q), (b = t.length - 1);
                else throw i.error("Unclosed " + B, s, o - a, o);
            }
            for (; o < n; ) {
                switch (
                    ((c = t.charCodeAt(o)),
                    c === O.newline && ((a = o), (s += 1)),
                    c)
                ) {
                    case O.space:
                    case O.tab:
                    case O.newline:
                    case O.cr:
                    case O.feed:
                        b = o;
                        do
                            (b += 1),
                                (c = t.charCodeAt(b)),
                                c === O.newline && ((a = b), (s += 1));
                        while (
                            c === O.space ||
                            c === O.newline ||
                            c === O.tab ||
                            c === O.cr ||
                            c === O.feed
                        );
                        (E = O.space), (d = s), (p = b - a - 1), (u = b);
                        break;
                    case O.plus:
                    case O.greaterThan:
                    case O.tilde:
                    case O.pipe:
                        b = o;
                        do (b += 1), (c = t.charCodeAt(b));
                        while (
                            c === O.plus ||
                            c === O.greaterThan ||
                            c === O.tilde ||
                            c === O.pipe
                        );
                        (E = O.combinator), (d = s), (p = o - a), (u = b);
                        break;
                    case O.asterisk:
                    case O.ampersand:
                    case O.bang:
                    case O.comma:
                    case O.equals:
                    case O.dollar:
                    case O.caret:
                    case O.openSquare:
                    case O.closeSquare:
                    case O.colon:
                    case O.semicolon:
                    case O.openParenthesis:
                    case O.closeParenthesis:
                        (b = o), (E = c), (d = s), (p = o - a), (u = b + 1);
                        break;
                    case O.singleQuote:
                    case O.doubleQuote:
                        (_ = c === O.singleQuote ? "'" : '"'), (b = o);
                        do
                            for (
                                h = !1,
                                    b = t.indexOf(_, b + 1),
                                    b === -1 && I("quote", _),
                                    y = b;
                                t.charCodeAt(y - 1) === O.backslash;

                            )
                                (y -= 1), (h = !h);
                        while (h);
                        (E = O.str), (d = s), (p = o - a), (u = b + 1);
                        break;
                    default:
                        c === O.slash && t.charCodeAt(o + 1) === O.asterisk
                            ? ((b = t.indexOf("*/", o + 2) + 1),
                              b === 0 && I("comment", "*/"),
                              (f = t.slice(o, b + 1)),
                              (w = f.split(`
`)),
                              (x = w.length - 1),
                              x > 0
                                  ? ((k = s + x), (S = b - w[x].length))
                                  : ((k = s), (S = a)),
                              (E = O.comment),
                              (s = k),
                              (d = k),
                              (p = b - S))
                            : c === O.slash
                            ? ((b = o),
                              (E = c),
                              (d = s),
                              (p = o - a),
                              (u = b + 1))
                            : ((b = yk(t, o)),
                              (E = O.word),
                              (d = s),
                              (p = b - a)),
                            (u = b + 1);
                        break;
                }
                e.push([E, s, o - a, d, p, o, u]),
                    S && ((a = S), (S = null)),
                    (o = u);
            }
            return e;
        }
    });
    var Sp = v((Ur, kp) => {
        l();
        ("use strict");
        Ur.__esModule = !0;
        Ur.default = void 0;
        var xk = we(Us()),
            xa = we(Gs()),
            kk = we(Qs()),
            gp = we(Xs()),
            Sk = we(Zs()),
            Ck = we(ra()),
            ka = we(na()),
            Ak = we(aa()),
            yp = an(pa()),
            _k = we(ha()),
            Sa = we(ga()),
            Ek = we(wa()),
            Ok = we(cp()),
            A = an(mp()),
            T = an(ba()),
            Tk = an(ne()),
            Y = Ar(),
            yt,
            Ca;
        function wp(i) {
            if (typeof WeakMap != "function") return null;
            var e = new WeakMap(),
                t = new WeakMap();
            return (wp = function (n) {
                return n ? t : e;
            })(i);
        }
        function an(i, e) {
            if (!e && i && i.__esModule) return i;
            if (i === null || (typeof i != "object" && typeof i != "function"))
                return { default: i };
            var t = wp(e);
            if (t && t.has(i)) return t.get(i);
            var r = {},
                n = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (var a in i)
                if (
                    a !== "default" &&
                    Object.prototype.hasOwnProperty.call(i, a)
                ) {
                    var s = n ? Object.getOwnPropertyDescriptor(i, a) : null;
                    s && (s.get || s.set)
                        ? Object.defineProperty(r, a, s)
                        : (r[a] = i[a]);
                }
            return (r.default = i), t && t.set(i, r), r;
        }
        function we(i) {
            return i && i.__esModule ? i : { default: i };
        }
        function bp(i, e) {
            for (var t = 0; t < e.length; t++) {
                var r = e[t];
                (r.enumerable = r.enumerable || !1),
                    (r.configurable = !0),
                    "value" in r && (r.writable = !0),
                    Object.defineProperty(i, r.key, r);
            }
        }
        function Pk(i, e, t) {
            return (
                e && bp(i.prototype, e),
                t && bp(i, t),
                Object.defineProperty(i, "prototype", { writable: !1 }),
                i
            );
        }
        var Aa =
                ((yt = {}),
                (yt[T.space] = !0),
                (yt[T.cr] = !0),
                (yt[T.feed] = !0),
                (yt[T.newline] = !0),
                (yt[T.tab] = !0),
                yt),
            Dk = Object.assign({}, Aa, ((Ca = {}), (Ca[T.comment] = !0), Ca));
        function vp(i) {
            return {
                line: i[A.FIELDS.START_LINE],
                column: i[A.FIELDS.START_COL],
            };
        }
        function xp(i) {
            return { line: i[A.FIELDS.END_LINE], column: i[A.FIELDS.END_COL] };
        }
        function wt(i, e, t, r) {
            return {
                start: { line: i, column: e },
                end: { line: t, column: r },
            };
        }
        function Pt(i) {
            return wt(
                i[A.FIELDS.START_LINE],
                i[A.FIELDS.START_COL],
                i[A.FIELDS.END_LINE],
                i[A.FIELDS.END_COL]
            );
        }
        function _a(i, e) {
            if (!!i)
                return wt(
                    i[A.FIELDS.START_LINE],
                    i[A.FIELDS.START_COL],
                    e[A.FIELDS.END_LINE],
                    e[A.FIELDS.END_COL]
                );
        }
        function Dt(i, e) {
            var t = i[e];
            if (typeof t == "string")
                return (
                    t.indexOf("\\") !== -1 &&
                        ((0, Y.ensureObject)(i, "raws"),
                        (i[e] = (0, Y.unesc)(t)),
                        i.raws[e] === void 0 && (i.raws[e] = t)),
                    i
                );
        }
        function Ea(i, e) {
            for (var t = -1, r = []; (t = i.indexOf(e, t + 1)) !== -1; )
                r.push(t);
            return r;
        }
        function Ik() {
            var i = Array.prototype.concat.apply([], arguments);
            return i.filter(function (e, t) {
                return t === i.indexOf(e);
            });
        }
        var qk = (function () {
            function i(t, r) {
                r === void 0 && (r = {}),
                    (this.rule = t),
                    (this.options = Object.assign({ lossy: !1, safe: !1 }, r)),
                    (this.position = 0),
                    (this.css =
                        typeof this.rule == "string"
                            ? this.rule
                            : this.rule.selector),
                    (this.tokens = (0, A.default)({
                        css: this.css,
                        error: this._errorGenerator(),
                        safe: this.options.safe,
                    }));
                var n = _a(this.tokens[0], this.tokens[this.tokens.length - 1]);
                (this.root = new xk.default({ source: n })),
                    (this.root.errorGenerator = this._errorGenerator());
                var a = new xa.default({
                    source: { start: { line: 1, column: 1 } },
                });
                this.root.append(a), (this.current = a), this.loop();
            }
            var e = i.prototype;
            return (
                (e._errorGenerator = function () {
                    var r = this;
                    return function (n, a) {
                        return typeof r.rule == "string"
                            ? new Error(n)
                            : r.rule.error(n, a);
                    };
                }),
                (e.attribute = function () {
                    var r = [],
                        n = this.currToken;
                    for (
                        this.position++;
                        this.position < this.tokens.length &&
                        this.currToken[A.FIELDS.TYPE] !== T.closeSquare;

                    )
                        r.push(this.currToken), this.position++;
                    if (this.currToken[A.FIELDS.TYPE] !== T.closeSquare)
                        return this.expected(
                            "closing square bracket",
                            this.currToken[A.FIELDS.START_POS]
                        );
                    var a = r.length,
                        s = {
                            source: wt(
                                n[1],
                                n[2],
                                this.currToken[3],
                                this.currToken[4]
                            ),
                            sourceIndex: n[A.FIELDS.START_POS],
                        };
                    if (a === 1 && !~[T.word].indexOf(r[0][A.FIELDS.TYPE]))
                        return this.expected(
                            "attribute",
                            r[0][A.FIELDS.START_POS]
                        );
                    for (var o = 0, u = "", c = "", f = null, p = !1; o < a; ) {
                        var d = r[o],
                            h = this.content(d),
                            y = r[o + 1];
                        switch (d[A.FIELDS.TYPE]) {
                            case T.space:
                                if (((p = !0), this.options.lossy)) break;
                                if (f) {
                                    (0, Y.ensureObject)(s, "spaces", f);
                                    var x = s.spaces[f].after || "";
                                    s.spaces[f].after = x + h;
                                    var w =
                                        (0, Y.getProp)(
                                            s,
                                            "raws",
                                            "spaces",
                                            f,
                                            "after"
                                        ) || null;
                                    w && (s.raws.spaces[f].after = w + h);
                                } else (u = u + h), (c = c + h);
                                break;
                            case T.asterisk:
                                if (y[A.FIELDS.TYPE] === T.equals)
                                    (s.operator = h), (f = "operator");
                                else if (
                                    (!s.namespace ||
                                        (f === "namespace" && !p)) &&
                                    y
                                ) {
                                    u &&
                                        ((0, Y.ensureObject)(
                                            s,
                                            "spaces",
                                            "attribute"
                                        ),
                                        (s.spaces.attribute.before = u),
                                        (u = "")),
                                        c &&
                                            ((0, Y.ensureObject)(
                                                s,
                                                "raws",
                                                "spaces",
                                                "attribute"
                                            ),
                                            (s.raws.spaces.attribute.before =
                                                u),
                                            (c = "")),
                                        (s.namespace = (s.namespace || "") + h);
                                    var b =
                                        (0, Y.getProp)(
                                            s,
                                            "raws",
                                            "namespace"
                                        ) || null;
                                    b && (s.raws.namespace += h),
                                        (f = "namespace");
                                }
                                p = !1;
                                break;
                            case T.dollar:
                                if (f === "value") {
                                    var k = (0, Y.getProp)(s, "raws", "value");
                                    (s.value += "$"),
                                        k && (s.raws.value = k + "$");
                                    break;
                                }
                            case T.caret:
                                y[A.FIELDS.TYPE] === T.equals &&
                                    ((s.operator = h), (f = "operator")),
                                    (p = !1);
                                break;
                            case T.combinator:
                                if (
                                    (h === "~" &&
                                        y[A.FIELDS.TYPE] === T.equals &&
                                        ((s.operator = h), (f = "operator")),
                                    h !== "|")
                                ) {
                                    p = !1;
                                    break;
                                }
                                y[A.FIELDS.TYPE] === T.equals
                                    ? ((s.operator = h), (f = "operator"))
                                    : !s.namespace &&
                                      !s.attribute &&
                                      (s.namespace = !0),
                                    (p = !1);
                                break;
                            case T.word:
                                if (
                                    y &&
                                    this.content(y) === "|" &&
                                    r[o + 2] &&
                                    r[o + 2][A.FIELDS.TYPE] !== T.equals &&
                                    !s.operator &&
                                    !s.namespace
                                )
                                    (s.namespace = h), (f = "namespace");
                                else if (
                                    !s.attribute ||
                                    (f === "attribute" && !p)
                                ) {
                                    u &&
                                        ((0, Y.ensureObject)(
                                            s,
                                            "spaces",
                                            "attribute"
                                        ),
                                        (s.spaces.attribute.before = u),
                                        (u = "")),
                                        c &&
                                            ((0, Y.ensureObject)(
                                                s,
                                                "raws",
                                                "spaces",
                                                "attribute"
                                            ),
                                            (s.raws.spaces.attribute.before =
                                                c),
                                            (c = "")),
                                        (s.attribute = (s.attribute || "") + h);
                                    var S =
                                        (0, Y.getProp)(
                                            s,
                                            "raws",
                                            "attribute"
                                        ) || null;
                                    S && (s.raws.attribute += h),
                                        (f = "attribute");
                                } else if (
                                    (!s.value && s.value !== "") ||
                                    (f === "value" && !(p || s.quoteMark))
                                ) {
                                    var _ = (0, Y.unesc)(h),
                                        E =
                                            (0, Y.getProp)(
                                                s,
                                                "raws",
                                                "value"
                                            ) || "",
                                        I = s.value || "";
                                    (s.value = I + _),
                                        (s.quoteMark = null),
                                        (_ !== h || E) &&
                                            ((0, Y.ensureObject)(s, "raws"),
                                            (s.raws.value = (E || I) + h)),
                                        (f = "value");
                                } else {
                                    var B = h === "i" || h === "I";
                                    (s.value || s.value === "") &&
                                    (s.quoteMark || p)
                                        ? ((s.insensitive = B),
                                          (!B || h === "I") &&
                                              ((0, Y.ensureObject)(s, "raws"),
                                              (s.raws.insensitiveFlag = h)),
                                          (f = "insensitive"),
                                          u &&
                                              ((0, Y.ensureObject)(
                                                  s,
                                                  "spaces",
                                                  "insensitive"
                                              ),
                                              (s.spaces.insensitive.before = u),
                                              (u = "")),
                                          c &&
                                              ((0, Y.ensureObject)(
                                                  s,
                                                  "raws",
                                                  "spaces",
                                                  "insensitive"
                                              ),
                                              (s.raws.spaces.insensitive.before =
                                                  c),
                                              (c = "")))
                                        : (s.value || s.value === "") &&
                                          ((f = "value"),
                                          (s.value += h),
                                          s.raws.value && (s.raws.value += h));
                                }
                                p = !1;
                                break;
                            case T.str:
                                if (!s.attribute || !s.operator)
                                    return this.error(
                                        "Expected an attribute followed by an operator preceding the string.",
                                        { index: d[A.FIELDS.START_POS] }
                                    );
                                var q = (0, yp.unescapeValue)(h),
                                    X = q.unescaped,
                                    ae = q.quoteMark;
                                (s.value = X),
                                    (s.quoteMark = ae),
                                    (f = "value"),
                                    (0, Y.ensureObject)(s, "raws"),
                                    (s.raws.value = h),
                                    (p = !1);
                                break;
                            case T.equals:
                                if (!s.attribute)
                                    return this.expected(
                                        "attribute",
                                        d[A.FIELDS.START_POS],
                                        h
                                    );
                                if (s.value)
                                    return this.error(
                                        'Unexpected "=" found; an operator was already defined.',
                                        { index: d[A.FIELDS.START_POS] }
                                    );
                                (s.operator = s.operator ? s.operator + h : h),
                                    (f = "operator"),
                                    (p = !1);
                                break;
                            case T.comment:
                                if (f)
                                    if (
                                        p ||
                                        (y && y[A.FIELDS.TYPE] === T.space) ||
                                        f === "insensitive"
                                    ) {
                                        var ge =
                                                (0, Y.getProp)(
                                                    s,
                                                    "spaces",
                                                    f,
                                                    "after"
                                                ) || "",
                                            je =
                                                (0, Y.getProp)(
                                                    s,
                                                    "raws",
                                                    "spaces",
                                                    f,
                                                    "after"
                                                ) || ge;
                                        (0, Y.ensureObject)(
                                            s,
                                            "raws",
                                            "spaces",
                                            f
                                        ),
                                            (s.raws.spaces[f].after = je + h);
                                    } else {
                                        var $ = s[f] || "",
                                            oe =
                                                (0, Y.getProp)(s, "raws", f) ||
                                                $;
                                        (0, Y.ensureObject)(s, "raws"),
                                            (s.raws[f] = oe + h);
                                    }
                                else c = c + h;
                                break;
                            default:
                                return this.error(
                                    'Unexpected "' + h + '" found.',
                                    { index: d[A.FIELDS.START_POS] }
                                );
                        }
                        o++;
                    }
                    Dt(s, "attribute"),
                        Dt(s, "namespace"),
                        this.newNode(new yp.default(s)),
                        this.position++;
                }),
                (e.parseWhitespaceEquivalentTokens = function (r) {
                    r < 0 && (r = this.tokens.length);
                    var n = this.position,
                        a = [],
                        s = "",
                        o = void 0;
                    do
                        if (Aa[this.currToken[A.FIELDS.TYPE]])
                            this.options.lossy || (s += this.content());
                        else if (this.currToken[A.FIELDS.TYPE] === T.comment) {
                            var u = {};
                            s && ((u.before = s), (s = "")),
                                (o = new gp.default({
                                    value: this.content(),
                                    source: Pt(this.currToken),
                                    sourceIndex:
                                        this.currToken[A.FIELDS.START_POS],
                                    spaces: u,
                                })),
                                a.push(o);
                        }
                    while (++this.position < r);
                    if (s) {
                        if (o) o.spaces.after = s;
                        else if (!this.options.lossy) {
                            var c = this.tokens[n],
                                f = this.tokens[this.position - 1];
                            a.push(
                                new ka.default({
                                    value: "",
                                    source: wt(
                                        c[A.FIELDS.START_LINE],
                                        c[A.FIELDS.START_COL],
                                        f[A.FIELDS.END_LINE],
                                        f[A.FIELDS.END_COL]
                                    ),
                                    sourceIndex: c[A.FIELDS.START_POS],
                                    spaces: { before: s, after: "" },
                                })
                            );
                        }
                    }
                    return a;
                }),
                (e.convertWhitespaceNodesToSpace = function (r, n) {
                    var a = this;
                    n === void 0 && (n = !1);
                    var s = "",
                        o = "";
                    r.forEach(function (c) {
                        var f = a.lossySpace(c.spaces.before, n),
                            p = a.lossySpace(c.rawSpaceBefore, n);
                        (s +=
                            f +
                            a.lossySpace(c.spaces.after, n && f.length === 0)),
                            (o +=
                                f +
                                c.value +
                                a.lossySpace(
                                    c.rawSpaceAfter,
                                    n && p.length === 0
                                ));
                    }),
                        o === s && (o = void 0);
                    var u = { space: s, rawSpace: o };
                    return u;
                }),
                (e.isNamedCombinator = function (r) {
                    return (
                        r === void 0 && (r = this.position),
                        this.tokens[r + 0] &&
                            this.tokens[r + 0][A.FIELDS.TYPE] === T.slash &&
                            this.tokens[r + 1] &&
                            this.tokens[r + 1][A.FIELDS.TYPE] === T.word &&
                            this.tokens[r + 2] &&
                            this.tokens[r + 2][A.FIELDS.TYPE] === T.slash
                    );
                }),
                (e.namedCombinator = function () {
                    if (this.isNamedCombinator()) {
                        var r = this.content(this.tokens[this.position + 1]),
                            n = (0, Y.unesc)(r).toLowerCase(),
                            a = {};
                        n !== r && (a.value = "/" + r + "/");
                        var s = new Sa.default({
                            value: "/" + n + "/",
                            source: wt(
                                this.currToken[A.FIELDS.START_LINE],
                                this.currToken[A.FIELDS.START_COL],
                                this.tokens[this.position + 2][
                                    A.FIELDS.END_LINE
                                ],
                                this.tokens[this.position + 2][A.FIELDS.END_COL]
                            ),
                            sourceIndex: this.currToken[A.FIELDS.START_POS],
                            raws: a,
                        });
                        return (this.position = this.position + 3), s;
                    } else this.unexpected();
                }),
                (e.combinator = function () {
                    var r = this;
                    if (this.content() === "|") return this.namespace();
                    var n = this.locateNextMeaningfulToken(this.position);
                    if (n < 0 || this.tokens[n][A.FIELDS.TYPE] === T.comma) {
                        var a = this.parseWhitespaceEquivalentTokens(n);
                        if (a.length > 0) {
                            var s = this.current.last;
                            if (s) {
                                var o = this.convertWhitespaceNodesToSpace(a),
                                    u = o.space,
                                    c = o.rawSpace;
                                c !== void 0 && (s.rawSpaceAfter += c),
                                    (s.spaces.after += u);
                            } else
                                a.forEach(function (E) {
                                    return r.newNode(E);
                                });
                        }
                        return;
                    }
                    var f = this.currToken,
                        p = void 0;
                    n > this.position &&
                        (p = this.parseWhitespaceEquivalentTokens(n));
                    var d;
                    if (
                        (this.isNamedCombinator()
                            ? (d = this.namedCombinator())
                            : this.currToken[A.FIELDS.TYPE] === T.combinator
                            ? ((d = new Sa.default({
                                  value: this.content(),
                                  source: Pt(this.currToken),
                                  sourceIndex:
                                      this.currToken[A.FIELDS.START_POS],
                              })),
                              this.position++)
                            : Aa[this.currToken[A.FIELDS.TYPE]] ||
                              p ||
                              this.unexpected(),
                        d)
                    ) {
                        if (p) {
                            var h = this.convertWhitespaceNodesToSpace(p),
                                y = h.space,
                                x = h.rawSpace;
                            (d.spaces.before = y), (d.rawSpaceBefore = x);
                        }
                    } else {
                        var w = this.convertWhitespaceNodesToSpace(p, !0),
                            b = w.space,
                            k = w.rawSpace;
                        k || (k = b);
                        var S = {},
                            _ = { spaces: {} };
                        b.endsWith(" ") && k.endsWith(" ")
                            ? ((S.before = b.slice(0, b.length - 1)),
                              (_.spaces.before = k.slice(0, k.length - 1)))
                            : b.startsWith(" ") && k.startsWith(" ")
                            ? ((S.after = b.slice(1)),
                              (_.spaces.after = k.slice(1)))
                            : (_.value = k),
                            (d = new Sa.default({
                                value: " ",
                                source: _a(f, this.tokens[this.position - 1]),
                                sourceIndex: f[A.FIELDS.START_POS],
                                spaces: S,
                                raws: _,
                            }));
                    }
                    return (
                        this.currToken &&
                            this.currToken[A.FIELDS.TYPE] === T.space &&
                            ((d.spaces.after = this.optionalSpace(
                                this.content()
                            )),
                            this.position++),
                        this.newNode(d)
                    );
                }),
                (e.comma = function () {
                    if (this.position === this.tokens.length - 1) {
                        (this.root.trailingComma = !0), this.position++;
                        return;
                    }
                    this.current._inferEndPosition();
                    var r = new xa.default({
                        source: { start: vp(this.tokens[this.position + 1]) },
                    });
                    this.current.parent.append(r),
                        (this.current = r),
                        this.position++;
                }),
                (e.comment = function () {
                    var r = this.currToken;
                    this.newNode(
                        new gp.default({
                            value: this.content(),
                            source: Pt(r),
                            sourceIndex: r[A.FIELDS.START_POS],
                        })
                    ),
                        this.position++;
                }),
                (e.error = function (r, n) {
                    throw this.root.error(r, n);
                }),
                (e.missingBackslash = function () {
                    return this.error(
                        "Expected a backslash preceding the semicolon.",
                        { index: this.currToken[A.FIELDS.START_POS] }
                    );
                }),
                (e.missingParenthesis = function () {
                    return this.expected(
                        "opening parenthesis",
                        this.currToken[A.FIELDS.START_POS]
                    );
                }),
                (e.missingSquareBracket = function () {
                    return this.expected(
                        "opening square bracket",
                        this.currToken[A.FIELDS.START_POS]
                    );
                }),
                (e.unexpected = function () {
                    return this.error(
                        "Unexpected '" +
                            this.content() +
                            "'. Escaping special characters with \\ may help.",
                        this.currToken[A.FIELDS.START_POS]
                    );
                }),
                (e.unexpectedPipe = function () {
                    return this.error(
                        "Unexpected '|'.",
                        this.currToken[A.FIELDS.START_POS]
                    );
                }),
                (e.namespace = function () {
                    var r =
                        (this.prevToken && this.content(this.prevToken)) || !0;
                    if (this.nextToken[A.FIELDS.TYPE] === T.word)
                        return this.position++, this.word(r);
                    if (this.nextToken[A.FIELDS.TYPE] === T.asterisk)
                        return this.position++, this.universal(r);
                    this.unexpectedPipe();
                }),
                (e.nesting = function () {
                    if (this.nextToken) {
                        var r = this.content(this.nextToken);
                        if (r === "|") {
                            this.position++;
                            return;
                        }
                    }
                    var n = this.currToken;
                    this.newNode(
                        new Ek.default({
                            value: this.content(),
                            source: Pt(n),
                            sourceIndex: n[A.FIELDS.START_POS],
                        })
                    ),
                        this.position++;
                }),
                (e.parentheses = function () {
                    var r = this.current.last,
                        n = 1;
                    if ((this.position++, r && r.type === Tk.PSEUDO)) {
                        var a = new xa.default({
                                source: {
                                    start: vp(this.tokens[this.position - 1]),
                                },
                            }),
                            s = this.current;
                        for (
                            r.append(a), this.current = a;
                            this.position < this.tokens.length && n;

                        )
                            this.currToken[A.FIELDS.TYPE] ===
                                T.openParenthesis && n++,
                                this.currToken[A.FIELDS.TYPE] ===
                                    T.closeParenthesis && n--,
                                n
                                    ? this.parse()
                                    : ((this.current.source.end = xp(
                                          this.currToken
                                      )),
                                      (this.current.parent.source.end = xp(
                                          this.currToken
                                      )),
                                      this.position++);
                        this.current = s;
                    } else {
                        for (
                            var o = this.currToken, u = "(", c;
                            this.position < this.tokens.length && n;

                        )
                            this.currToken[A.FIELDS.TYPE] ===
                                T.openParenthesis && n++,
                                this.currToken[A.FIELDS.TYPE] ===
                                    T.closeParenthesis && n--,
                                (c = this.currToken),
                                (u += this.parseParenthesisToken(
                                    this.currToken
                                )),
                                this.position++;
                        r
                            ? r.appendToPropertyAndEscape("value", u, u)
                            : this.newNode(
                                  new ka.default({
                                      value: u,
                                      source: wt(
                                          o[A.FIELDS.START_LINE],
                                          o[A.FIELDS.START_COL],
                                          c[A.FIELDS.END_LINE],
                                          c[A.FIELDS.END_COL]
                                      ),
                                      sourceIndex: o[A.FIELDS.START_POS],
                                  })
                              );
                    }
                    if (n)
                        return this.expected(
                            "closing parenthesis",
                            this.currToken[A.FIELDS.START_POS]
                        );
                }),
                (e.pseudo = function () {
                    for (
                        var r = this, n = "", a = this.currToken;
                        this.currToken &&
                        this.currToken[A.FIELDS.TYPE] === T.colon;

                    )
                        (n += this.content()), this.position++;
                    if (!this.currToken)
                        return this.expected(
                            ["pseudo-class", "pseudo-element"],
                            this.position - 1
                        );
                    if (this.currToken[A.FIELDS.TYPE] === T.word)
                        this.splitWord(!1, function (s, o) {
                            (n += s),
                                r.newNode(
                                    new Ak.default({
                                        value: n,
                                        source: _a(a, r.currToken),
                                        sourceIndex: a[A.FIELDS.START_POS],
                                    })
                                ),
                                o > 1 &&
                                    r.nextToken &&
                                    r.nextToken[A.FIELDS.TYPE] ===
                                        T.openParenthesis &&
                                    r.error("Misplaced parenthesis.", {
                                        index: r.nextToken[A.FIELDS.START_POS],
                                    });
                        });
                    else
                        return this.expected(
                            ["pseudo-class", "pseudo-element"],
                            this.currToken[A.FIELDS.START_POS]
                        );
                }),
                (e.space = function () {
                    var r = this.content();
                    this.position === 0 ||
                    this.prevToken[A.FIELDS.TYPE] === T.comma ||
                    this.prevToken[A.FIELDS.TYPE] === T.openParenthesis ||
                    this.current.nodes.every(function (n) {
                        return n.type === "comment";
                    })
                        ? ((this.spaces = this.optionalSpace(r)),
                          this.position++)
                        : this.position === this.tokens.length - 1 ||
                          this.nextToken[A.FIELDS.TYPE] === T.comma ||
                          this.nextToken[A.FIELDS.TYPE] === T.closeParenthesis
                        ? ((this.current.last.spaces.after =
                              this.optionalSpace(r)),
                          this.position++)
                        : this.combinator();
                }),
                (e.string = function () {
                    var r = this.currToken;
                    this.newNode(
                        new ka.default({
                            value: this.content(),
                            source: Pt(r),
                            sourceIndex: r[A.FIELDS.START_POS],
                        })
                    ),
                        this.position++;
                }),
                (e.universal = function (r) {
                    var n = this.nextToken;
                    if (n && this.content(n) === "|")
                        return this.position++, this.namespace();
                    var a = this.currToken;
                    this.newNode(
                        new _k.default({
                            value: this.content(),
                            source: Pt(a),
                            sourceIndex: a[A.FIELDS.START_POS],
                        }),
                        r
                    ),
                        this.position++;
                }),
                (e.splitWord = function (r, n) {
                    for (
                        var a = this, s = this.nextToken, o = this.content();
                        s &&
                        ~[T.dollar, T.caret, T.equals, T.word].indexOf(
                            s[A.FIELDS.TYPE]
                        );

                    ) {
                        this.position++;
                        var u = this.content();
                        if (((o += u), u.lastIndexOf("\\") === u.length - 1)) {
                            var c = this.nextToken;
                            c &&
                                c[A.FIELDS.TYPE] === T.space &&
                                ((o += this.requiredSpace(this.content(c))),
                                this.position++);
                        }
                        s = this.nextToken;
                    }
                    var f = Ea(o, ".").filter(function (y) {
                            var x = o[y - 1] === "\\",
                                w = /^\d+\.\d+%$/.test(o);
                            return !x && !w;
                        }),
                        p = Ea(o, "#").filter(function (y) {
                            return o[y - 1] !== "\\";
                        }),
                        d = Ea(o, "#{");
                    d.length &&
                        (p = p.filter(function (y) {
                            return !~d.indexOf(y);
                        }));
                    var h = (0, Ok.default)(Ik([0].concat(f, p)));
                    h.forEach(function (y, x) {
                        var w = h[x + 1] || o.length,
                            b = o.slice(y, w);
                        if (x === 0 && n) return n.call(a, b, h.length);
                        var k,
                            S = a.currToken,
                            _ = S[A.FIELDS.START_POS] + h[x],
                            E = wt(S[1], S[2] + y, S[3], S[2] + (w - 1));
                        if (~f.indexOf(y)) {
                            var I = {
                                value: b.slice(1),
                                source: E,
                                sourceIndex: _,
                            };
                            k = new kk.default(Dt(I, "value"));
                        } else if (~p.indexOf(y)) {
                            var B = {
                                value: b.slice(1),
                                source: E,
                                sourceIndex: _,
                            };
                            k = new Sk.default(Dt(B, "value"));
                        } else {
                            var q = { value: b, source: E, sourceIndex: _ };
                            Dt(q, "value"), (k = new Ck.default(q));
                        }
                        a.newNode(k, r), (r = null);
                    }),
                        this.position++;
                }),
                (e.word = function (r) {
                    var n = this.nextToken;
                    return n && this.content(n) === "|"
                        ? (this.position++, this.namespace())
                        : this.splitWord(r);
                }),
                (e.loop = function () {
                    for (; this.position < this.tokens.length; ) this.parse(!0);
                    return this.current._inferEndPosition(), this.root;
                }),
                (e.parse = function (r) {
                    switch (this.currToken[A.FIELDS.TYPE]) {
                        case T.space:
                            this.space();
                            break;
                        case T.comment:
                            this.comment();
                            break;
                        case T.openParenthesis:
                            this.parentheses();
                            break;
                        case T.closeParenthesis:
                            r && this.missingParenthesis();
                            break;
                        case T.openSquare:
                            this.attribute();
                            break;
                        case T.dollar:
                        case T.caret:
                        case T.equals:
                        case T.word:
                            this.word();
                            break;
                        case T.colon:
                            this.pseudo();
                            break;
                        case T.comma:
                            this.comma();
                            break;
                        case T.asterisk:
                            this.universal();
                            break;
                        case T.ampersand:
                            this.nesting();
                            break;
                        case T.slash:
                        case T.combinator:
                            this.combinator();
                            break;
                        case T.str:
                            this.string();
                            break;
                        case T.closeSquare:
                            this.missingSquareBracket();
                        case T.semicolon:
                            this.missingBackslash();
                        default:
                            this.unexpected();
                    }
                }),
                (e.expected = function (r, n, a) {
                    if (Array.isArray(r)) {
                        var s = r.pop();
                        r = r.join(", ") + " or " + s;
                    }
                    var o = /^[aeiou]/.test(r[0]) ? "an" : "a";
                    return a
                        ? this.error(
                              "Expected " +
                                  o +
                                  " " +
                                  r +
                                  ', found "' +
                                  a +
                                  '" instead.',
                              { index: n }
                          )
                        : this.error("Expected " + o + " " + r + ".", {
                              index: n,
                          });
                }),
                (e.requiredSpace = function (r) {
                    return this.options.lossy ? " " : r;
                }),
                (e.optionalSpace = function (r) {
                    return this.options.lossy ? "" : r;
                }),
                (e.lossySpace = function (r, n) {
                    return this.options.lossy ? (n ? " " : "") : r;
                }),
                (e.parseParenthesisToken = function (r) {
                    var n = this.content(r);
                    return r[A.FIELDS.TYPE] === T.space
                        ? this.requiredSpace(n)
                        : n;
                }),
                (e.newNode = function (r, n) {
                    return (
                        n &&
                            (/^ +$/.test(n) &&
                                (this.options.lossy ||
                                    (this.spaces = (this.spaces || "") + n),
                                (n = !0)),
                            (r.namespace = n),
                            Dt(r, "namespace")),
                        this.spaces &&
                            ((r.spaces.before = this.spaces),
                            (this.spaces = "")),
                        this.current.append(r)
                    );
                }),
                (e.content = function (r) {
                    return (
                        r === void 0 && (r = this.currToken),
                        this.css.slice(
                            r[A.FIELDS.START_POS],
                            r[A.FIELDS.END_POS]
                        )
                    );
                }),
                (e.locateNextMeaningfulToken = function (r) {
                    r === void 0 && (r = this.position + 1);
                    for (var n = r; n < this.tokens.length; )
                        if (Dk[this.tokens[n][A.FIELDS.TYPE]]) {
                            n++;
                            continue;
                        } else return n;
                    return -1;
                }),
                Pk(i, [
                    {
                        key: "currToken",
                        get: function () {
                            return this.tokens[this.position];
                        },
                    },
                    {
                        key: "nextToken",
                        get: function () {
                            return this.tokens[this.position + 1];
                        },
                    },
                    {
                        key: "prevToken",
                        get: function () {
                            return this.tokens[this.position - 1];
                        },
                    },
                ]),
                i
            );
        })();
        Ur.default = qk;
        kp.exports = Ur.default;
    });
    var Ap = v((Wr, Cp) => {
        l();
        ("use strict");
        Wr.__esModule = !0;
        Wr.default = void 0;
        var Rk = Mk(Sp());
        function Mk(i) {
            return i && i.__esModule ? i : { default: i };
        }
        var Bk = (function () {
            function i(t, r) {
                (this.func = t || function () {}),
                    (this.funcRes = null),
                    (this.options = r);
            }
            var e = i.prototype;
            return (
                (e._shouldUpdateSelector = function (r, n) {
                    n === void 0 && (n = {});
                    var a = Object.assign({}, this.options, n);
                    return a.updateSelector === !1 ? !1 : typeof r != "string";
                }),
                (e._isLossy = function (r) {
                    r === void 0 && (r = {});
                    var n = Object.assign({}, this.options, r);
                    return n.lossless === !1;
                }),
                (e._root = function (r, n) {
                    n === void 0 && (n = {});
                    var a = new Rk.default(r, this._parseOptions(n));
                    return a.root;
                }),
                (e._parseOptions = function (r) {
                    return { lossy: this._isLossy(r) };
                }),
                (e._run = function (r, n) {
                    var a = this;
                    return (
                        n === void 0 && (n = {}),
                        new Promise(function (s, o) {
                            try {
                                var u = a._root(r, n);
                                Promise.resolve(a.func(u))
                                    .then(function (c) {
                                        var f = void 0;
                                        return (
                                            a._shouldUpdateSelector(r, n) &&
                                                ((f = u.toString()),
                                                (r.selector = f)),
                                            { transform: c, root: u, string: f }
                                        );
                                    })
                                    .then(s, o);
                            } catch (c) {
                                o(c);
                                return;
                            }
                        })
                    );
                }),
                (e._runSync = function (r, n) {
                    n === void 0 && (n = {});
                    var a = this._root(r, n),
                        s = this.func(a);
                    if (s && typeof s.then == "function")
                        throw new Error(
                            "Selector processor returned a promise to a synchronous call."
                        );
                    var o = void 0;
                    return (
                        n.updateSelector &&
                            typeof r != "string" &&
                            ((o = a.toString()), (r.selector = o)),
                        { transform: s, root: a, string: o }
                    );
                }),
                (e.ast = function (r, n) {
                    return this._run(r, n).then(function (a) {
                        return a.root;
                    });
                }),
                (e.astSync = function (r, n) {
                    return this._runSync(r, n).root;
                }),
                (e.transform = function (r, n) {
                    return this._run(r, n).then(function (a) {
                        return a.transform;
                    });
                }),
                (e.transformSync = function (r, n) {
                    return this._runSync(r, n).transform;
                }),
                (e.process = function (r, n) {
                    return this._run(r, n).then(function (a) {
                        return a.string || a.root.toString();
                    });
                }),
                (e.processSync = function (r, n) {
                    var a = this._runSync(r, n);
                    return a.string || a.root.toString();
                }),
                i
            );
        })();
        Wr.default = Bk;
        Cp.exports = Wr.default;
    });
    var _p = v((H) => {
        l();
        ("use strict");
        H.__esModule = !0;
        H.universal =
            H.tag =
            H.string =
            H.selector =
            H.root =
            H.pseudo =
            H.nesting =
            H.id =
            H.comment =
            H.combinator =
            H.className =
            H.attribute =
                void 0;
        var Fk = be(pa()),
            Nk = be(Qs()),
            Lk = be(ga()),
            $k = be(Xs()),
            jk = be(Zs()),
            zk = be(wa()),
            Vk = be(aa()),
            Uk = be(Us()),
            Wk = be(Gs()),
            Gk = be(na()),
            Hk = be(ra()),
            Yk = be(ha());
        function be(i) {
            return i && i.__esModule ? i : { default: i };
        }
        var Qk = function (e) {
            return new Fk.default(e);
        };
        H.attribute = Qk;
        var Jk = function (e) {
            return new Nk.default(e);
        };
        H.className = Jk;
        var Xk = function (e) {
            return new Lk.default(e);
        };
        H.combinator = Xk;
        var Kk = function (e) {
            return new $k.default(e);
        };
        H.comment = Kk;
        var Zk = function (e) {
            return new jk.default(e);
        };
        H.id = Zk;
        var eS = function (e) {
            return new zk.default(e);
        };
        H.nesting = eS;
        var tS = function (e) {
            return new Vk.default(e);
        };
        H.pseudo = tS;
        var rS = function (e) {
            return new Uk.default(e);
        };
        H.root = rS;
        var iS = function (e) {
            return new Wk.default(e);
        };
        H.selector = iS;
        var nS = function (e) {
            return new Gk.default(e);
        };
        H.string = nS;
        var sS = function (e) {
            return new Hk.default(e);
        };
        H.tag = sS;
        var aS = function (e) {
            return new Yk.default(e);
        };
        H.universal = aS;
    });
    var Pp = v((L) => {
        l();
        ("use strict");
        L.__esModule = !0;
        L.isComment = L.isCombinator = L.isClassName = L.isAttribute = void 0;
        L.isContainer = wS;
        L.isIdentifier = void 0;
        L.isNamespace = bS;
        L.isNesting = void 0;
        L.isNode = Oa;
        L.isPseudo = void 0;
        L.isPseudoClass = yS;
        L.isPseudoElement = Tp;
        L.isUniversal = L.isTag = L.isString = L.isSelector = L.isRoot = void 0;
        var Q = ne(),
            fe,
            oS =
                ((fe = {}),
                (fe[Q.ATTRIBUTE] = !0),
                (fe[Q.CLASS] = !0),
                (fe[Q.COMBINATOR] = !0),
                (fe[Q.COMMENT] = !0),
                (fe[Q.ID] = !0),
                (fe[Q.NESTING] = !0),
                (fe[Q.PSEUDO] = !0),
                (fe[Q.ROOT] = !0),
                (fe[Q.SELECTOR] = !0),
                (fe[Q.STRING] = !0),
                (fe[Q.TAG] = !0),
                (fe[Q.UNIVERSAL] = !0),
                fe);
        function Oa(i) {
            return typeof i == "object" && oS[i.type];
        }
        function ve(i, e) {
            return Oa(e) && e.type === i;
        }
        var Ep = ve.bind(null, Q.ATTRIBUTE);
        L.isAttribute = Ep;
        var lS = ve.bind(null, Q.CLASS);
        L.isClassName = lS;
        var uS = ve.bind(null, Q.COMBINATOR);
        L.isCombinator = uS;
        var fS = ve.bind(null, Q.COMMENT);
        L.isComment = fS;
        var cS = ve.bind(null, Q.ID);
        L.isIdentifier = cS;
        var pS = ve.bind(null, Q.NESTING);
        L.isNesting = pS;
        var Ta = ve.bind(null, Q.PSEUDO);
        L.isPseudo = Ta;
        var dS = ve.bind(null, Q.ROOT);
        L.isRoot = dS;
        var hS = ve.bind(null, Q.SELECTOR);
        L.isSelector = hS;
        var mS = ve.bind(null, Q.STRING);
        L.isString = mS;
        var Op = ve.bind(null, Q.TAG);
        L.isTag = Op;
        var gS = ve.bind(null, Q.UNIVERSAL);
        L.isUniversal = gS;
        function Tp(i) {
            return (
                Ta(i) &&
                i.value &&
                (i.value.startsWith("::") ||
                    i.value.toLowerCase() === ":before" ||
                    i.value.toLowerCase() === ":after" ||
                    i.value.toLowerCase() === ":first-letter" ||
                    i.value.toLowerCase() === ":first-line")
            );
        }
        function yS(i) {
            return Ta(i) && !Tp(i);
        }
        function wS(i) {
            return !!(Oa(i) && i.walk);
        }
        function bS(i) {
            return Ep(i) || Op(i);
        }
    });
    var Dp = v((Oe) => {
        l();
        ("use strict");
        Oe.__esModule = !0;
        var Pa = ne();
        Object.keys(Pa).forEach(function (i) {
            i === "default" ||
                i === "__esModule" ||
                (i in Oe && Oe[i] === Pa[i]) ||
                (Oe[i] = Pa[i]);
        });
        var Da = _p();
        Object.keys(Da).forEach(function (i) {
            i === "default" ||
                i === "__esModule" ||
                (i in Oe && Oe[i] === Da[i]) ||
                (Oe[i] = Da[i]);
        });
        var Ia = Pp();
        Object.keys(Ia).forEach(function (i) {
            i === "default" ||
                i === "__esModule" ||
                (i in Oe && Oe[i] === Ia[i]) ||
                (Oe[i] = Ia[i]);
        });
    });
    var Me = v((Gr, qp) => {
        l();
        ("use strict");
        Gr.__esModule = !0;
        Gr.default = void 0;
        var vS = SS(Ap()),
            xS = kS(Dp());
        function Ip(i) {
            if (typeof WeakMap != "function") return null;
            var e = new WeakMap(),
                t = new WeakMap();
            return (Ip = function (n) {
                return n ? t : e;
            })(i);
        }
        function kS(i, e) {
            if (!e && i && i.__esModule) return i;
            if (i === null || (typeof i != "object" && typeof i != "function"))
                return { default: i };
            var t = Ip(e);
            if (t && t.has(i)) return t.get(i);
            var r = {},
                n = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (var a in i)
                if (
                    a !== "default" &&
                    Object.prototype.hasOwnProperty.call(i, a)
                ) {
                    var s = n ? Object.getOwnPropertyDescriptor(i, a) : null;
                    s && (s.get || s.set)
                        ? Object.defineProperty(r, a, s)
                        : (r[a] = i[a]);
                }
            return (r.default = i), t && t.set(i, r), r;
        }
        function SS(i) {
            return i && i.__esModule ? i : { default: i };
        }
        var qa = function (e) {
            return new vS.default(e);
        };
        Object.assign(qa, xS);
        delete qa.__esModule;
        var CS = qa;
        Gr.default = CS;
        qp.exports = Gr.default;
    });
    function Ge(i) {
        return ["fontSize", "outline"].includes(i)
            ? (e) => (
                  typeof e == "function" && (e = e({})),
                  Array.isArray(e) && (e = e[0]),
                  e
              )
            : i === "fontFamily"
            ? (e) => {
                  typeof e == "function" && (e = e({}));
                  let t = Array.isArray(e) && ie(e[1]) ? e[0] : e;
                  return Array.isArray(t) ? t.join(", ") : t;
              }
            : [
                  "boxShadow",
                  "transitionProperty",
                  "transitionDuration",
                  "transitionDelay",
                  "transitionTimingFunction",
                  "backgroundImage",
                  "backgroundSize",
                  "backgroundColor",
                  "cursor",
                  "animation",
              ].includes(i)
            ? (e) => (
                  typeof e == "function" && (e = e({})),
                  Array.isArray(e) && (e = e.join(", ")),
                  e
              )
            : [
                  "gridTemplateColumns",
                  "gridTemplateRows",
                  "objectPosition",
              ].includes(i)
            ? (e) => (
                  typeof e == "function" && (e = e({})),
                  typeof e == "string" && (e = z.list.comma(e).join(" ")),
                  e
              )
            : (e, t = {}) => (typeof e == "function" && (e = e(t)), e);
    }
    var Hr = C(() => {
        l();
        nt();
        xt();
    });
    var $p = v((EP, Na) => {
        l();
        var { Rule: Rp, AtRule: AS } = me(),
            Mp = Me();
        function Ra(i, e) {
            let t;
            try {
                Mp((r) => {
                    t = r;
                }).processSync(i);
            } catch (r) {
                throw i.includes(":")
                    ? e
                        ? e.error("Missed semicolon")
                        : r
                    : e
                    ? e.error(r.message)
                    : r;
            }
            return t.at(0);
        }
        function Bp(i, e) {
            let t = !1;
            return (
                i.each((r) => {
                    if (r.type === "nesting") {
                        let n = e.clone({});
                        r.value !== "&"
                            ? r.replaceWith(
                                  Ra(r.value.replace("&", n.toString()))
                              )
                            : r.replaceWith(n),
                            (t = !0);
                    } else "nodes" in r && r.nodes && Bp(r, e) && (t = !0);
                }),
                t
            );
        }
        function Fp(i, e) {
            let t = [];
            return (
                i.selectors.forEach((r) => {
                    let n = Ra(r, i);
                    e.selectors.forEach((a) => {
                        if (!a) return;
                        let s = Ra(a, e);
                        Bp(s, n) ||
                            (s.prepend(Mp.combinator({ value: " " })),
                            s.prepend(n.clone({}))),
                            t.push(s.toString());
                    });
                }),
                t
            );
        }
        function on(i, e) {
            let t = i.prev();
            for (e.after(i); t && t.type === "comment"; ) {
                let r = t.prev();
                e.after(t), (t = r);
            }
            return i;
        }
        function _S(i) {
            return function e(t, r, n, a = n) {
                let s = [];
                if (
                    (r.each((o) => {
                        o.type === "rule" && n
                            ? a && (o.selectors = Fp(t, o))
                            : o.type === "atrule" && o.nodes
                            ? i[o.name]
                                ? e(t, o, a)
                                : r[Ba] !== !1 && s.push(o)
                            : s.push(o);
                    }),
                    n && s.length)
                ) {
                    let o = t.clone({ nodes: [] });
                    for (let u of s) o.append(u);
                    r.prepend(o);
                }
            };
        }
        function Ma(i, e, t) {
            let r = new Rp({ selector: i, nodes: [] });
            return r.append(e), t.after(r), r;
        }
        function Np(i, e) {
            let t = {};
            for (let r of i) t[r] = !0;
            if (e) for (let r of e) t[r.replace(/^@/, "")] = !0;
            return t;
        }
        function ES(i) {
            i = i.trim();
            let e = i.match(/^\((.*)\)$/);
            if (!e) return { type: "basic", selector: i };
            let t = e[1].match(/^(with(?:out)?):(.+)$/);
            if (t) {
                let r = t[1] === "with",
                    n = Object.fromEntries(
                        t[2]
                            .trim()
                            .split(/\s+/)
                            .map((s) => [s, !0])
                    );
                if (r && n.all) return { type: "noop" };
                let a = (s) => !!n[s];
                return (
                    n.all
                        ? (a = () => !0)
                        : r && (a = (s) => (s === "all" ? !1 : !n[s])),
                    { type: "withrules", escapes: a }
                );
            }
            return { type: "unknown" };
        }
        function OS(i) {
            let e = [],
                t = i.parent;
            for (; t && t instanceof AS; ) e.push(t), (t = t.parent);
            return e;
        }
        function TS(i) {
            let e = i[Lp];
            if (!e) i.after(i.nodes);
            else {
                let t = i.nodes,
                    r,
                    n = -1,
                    a,
                    s,
                    o,
                    u = OS(i);
                if (
                    (u.forEach((c, f) => {
                        if (e(c.name)) (r = c), (n = f), (s = o);
                        else {
                            let p = o;
                            (o = c.clone({ nodes: [] })),
                                p && o.append(p),
                                (a = a || o);
                        }
                    }),
                    r
                        ? s
                            ? (a.append(t), r.after(s))
                            : r.after(t)
                        : i.after(t),
                    i.next() && r)
                ) {
                    let c;
                    u.slice(0, n + 1).forEach((f, p, d) => {
                        let h = c;
                        (c = f.clone({ nodes: [] })), h && c.append(h);
                        let y = [],
                            w = (d[p - 1] || i).next();
                        for (; w; ) y.push(w), (w = w.next());
                        c.append(y);
                    }),
                        c && (s || t[t.length - 1]).after(c);
                }
            }
            i.remove();
        }
        var Ba = Symbol("rootRuleMergeSel"),
            Lp = Symbol("rootRuleEscapes");
        function PS(i) {
            let { params: e } = i,
                { type: t, selector: r, escapes: n } = ES(e);
            if (t === "unknown")
                throw i.error(
                    `Unknown @${i.name} parameter ${JSON.stringify(e)}`
                );
            if (t === "basic" && r) {
                let a = new Rp({ selector: r, nodes: i.nodes });
                i.removeAll(), i.append(a);
            }
            (i[Lp] = n), (i[Ba] = n ? !n("all") : t === "noop");
        }
        var Fa = Symbol("hasRootRule");
        Na.exports = (i = {}) => {
            let e = Np(["media", "supports", "layer", "container"], i.bubble),
                t = _S(e),
                r = Np(
                    [
                        "document",
                        "font-face",
                        "keyframes",
                        "-webkit-keyframes",
                        "-moz-keyframes",
                    ],
                    i.unwrap
                ),
                n = (i.rootRuleName || "at-root").replace(/^@/, ""),
                a = i.preserveEmpty;
            return {
                postcssPlugin: "postcss-nested",
                Once(s) {
                    s.walkAtRules(n, (o) => {
                        PS(o), (s[Fa] = !0);
                    });
                },
                Rule(s) {
                    let o = !1,
                        u = s,
                        c = !1,
                        f = [];
                    s.each((p) => {
                        p.type === "rule"
                            ? (f.length &&
                                  ((u = Ma(s.selector, f, u)), (f = [])),
                              (c = !0),
                              (o = !0),
                              (p.selectors = Fp(s, p)),
                              (u = on(p, u)))
                            : p.type === "atrule"
                            ? (f.length &&
                                  ((u = Ma(s.selector, f, u)), (f = [])),
                              p.name === n
                                  ? ((o = !0),
                                    t(s, p, !0, p[Ba]),
                                    (u = on(p, u)))
                                  : e[p.name]
                                  ? ((c = !0),
                                    (o = !0),
                                    t(s, p, !0),
                                    (u = on(p, u)))
                                  : r[p.name]
                                  ? ((c = !0),
                                    (o = !0),
                                    t(s, p, !1),
                                    (u = on(p, u)))
                                  : c && f.push(p))
                            : p.type === "decl" && c && f.push(p);
                    }),
                        f.length && (u = Ma(s.selector, f, u)),
                        o &&
                            a !== !0 &&
                            ((s.raws.semicolon = !0),
                            s.nodes.length === 0 && s.remove());
                },
                RootExit(s) {
                    s[Fa] && (s.walkAtRules(n, TS), (s[Fa] = !1));
                },
            };
        };
        Na.exports.postcss = !0;
    });
    var Up = v((OP, Vp) => {
        l();
        ("use strict");
        var jp = /-(\w|$)/g,
            zp = (i, e) => e.toUpperCase(),
            DS = (i) => (
                (i = i.toLowerCase()),
                i === "float"
                    ? "cssFloat"
                    : i.startsWith("-ms-")
                    ? i.substr(1).replace(jp, zp)
                    : i.replace(jp, zp)
            );
        Vp.exports = DS;
    });
    var ja = v((TP, Wp) => {
        l();
        var IS = Up(),
            qS = {
                boxFlex: !0,
                boxFlexGroup: !0,
                columnCount: !0,
                flex: !0,
                flexGrow: !0,
                flexPositive: !0,
                flexShrink: !0,
                flexNegative: !0,
                fontWeight: !0,
                lineClamp: !0,
                lineHeight: !0,
                opacity: !0,
                order: !0,
                orphans: !0,
                tabSize: !0,
                widows: !0,
                zIndex: !0,
                zoom: !0,
                fillOpacity: !0,
                strokeDashoffset: !0,
                strokeOpacity: !0,
                strokeWidth: !0,
            };
        function La(i) {
            return typeof i.nodes == "undefined" ? !0 : $a(i);
        }
        function $a(i) {
            let e,
                t = {};
            return (
                i.each((r) => {
                    if (r.type === "atrule")
                        (e = "@" + r.name),
                            r.params && (e += " " + r.params),
                            typeof t[e] == "undefined"
                                ? (t[e] = La(r))
                                : Array.isArray(t[e])
                                ? t[e].push(La(r))
                                : (t[e] = [t[e], La(r)]);
                    else if (r.type === "rule") {
                        let n = $a(r);
                        if (t[r.selector])
                            for (let a in n) t[r.selector][a] = n[a];
                        else t[r.selector] = n;
                    } else if (r.type === "decl") {
                        (r.prop[0] === "-" && r.prop[1] === "-") ||
                        (r.parent && r.parent.selector === ":export")
                            ? (e = r.prop)
                            : (e = IS(r.prop));
                        let n = r.value;
                        !isNaN(r.value) && qS[e] && (n = parseFloat(r.value)),
                            r.important && (n += " !important"),
                            typeof t[e] == "undefined"
                                ? (t[e] = n)
                                : Array.isArray(t[e])
                                ? t[e].push(n)
                                : (t[e] = [t[e], n]);
                    }
                }),
                t
            );
        }
        Wp.exports = $a;
    });
    var ln = v((PP, Qp) => {
        l();
        var Yr = me(),
            Gp = /\s*!important\s*$/i,
            RS = {
                "box-flex": !0,
                "box-flex-group": !0,
                "column-count": !0,
                flex: !0,
                "flex-grow": !0,
                "flex-positive": !0,
                "flex-shrink": !0,
                "flex-negative": !0,
                "font-weight": !0,
                "line-clamp": !0,
                "line-height": !0,
                opacity: !0,
                order: !0,
                orphans: !0,
                "tab-size": !0,
                widows: !0,
                "z-index": !0,
                zoom: !0,
                "fill-opacity": !0,
                "stroke-dashoffset": !0,
                "stroke-opacity": !0,
                "stroke-width": !0,
            };
        function MS(i) {
            return i
                .replace(/([A-Z])/g, "-$1")
                .replace(/^ms-/, "-ms-")
                .toLowerCase();
        }
        function Hp(i, e, t) {
            t === !1 ||
                t === null ||
                (e.startsWith("--") || (e = MS(e)),
                typeof t == "number" &&
                    (t === 0 || RS[e] ? (t = t.toString()) : (t += "px")),
                e === "css-float" && (e = "float"),
                Gp.test(t)
                    ? ((t = t.replace(Gp, "")),
                      i.push(Yr.decl({ prop: e, value: t, important: !0 })))
                    : i.push(Yr.decl({ prop: e, value: t })));
        }
        function Yp(i, e, t) {
            let r = Yr.atRule({ name: e[1], params: e[3] || "" });
            typeof t == "object" && ((r.nodes = []), za(t, r)), i.push(r);
        }
        function za(i, e) {
            let t, r, n;
            for (t in i)
                if (((r = i[t]), !(r === null || typeof r == "undefined")))
                    if (t[0] === "@") {
                        let a = t.match(/@(\S+)(\s+([\W\w]*)\s*)?/);
                        if (Array.isArray(r)) for (let s of r) Yp(e, a, s);
                        else Yp(e, a, r);
                    } else if (Array.isArray(r)) for (let a of r) Hp(e, t, a);
                    else
                        typeof r == "object"
                            ? ((n = Yr.rule({ selector: t })),
                              za(r, n),
                              e.push(n))
                            : Hp(e, t, r);
        }
        Qp.exports = function (i) {
            let e = Yr.root();
            return za(i, e), e;
        };
    });
    var Va = v((DP, Jp) => {
        l();
        var BS = ja();
        Jp.exports = function (e) {
            return (
                console &&
                    console.warn &&
                    e.warnings().forEach((t) => {
                        let r = t.plugin || "PostCSS";
                        console.warn(r + ": " + t.text);
                    }),
                BS(e.root)
            );
        };
    });
    var Kp = v((IP, Xp) => {
        l();
        var FS = me(),
            NS = Va(),
            LS = ln();
        Xp.exports = function (e) {
            let t = FS(e);
            return async (r) => {
                let n = await t.process(r, { parser: LS, from: void 0 });
                return NS(n);
            };
        };
    });
    var ed = v((qP, Zp) => {
        l();
        var $S = me(),
            jS = Va(),
            zS = ln();
        Zp.exports = function (i) {
            let e = $S(i);
            return (t) => {
                let r = e.process(t, { parser: zS, from: void 0 });
                return jS(r);
            };
        };
    });
    var rd = v((RP, td) => {
        l();
        var VS = ja(),
            US = ln(),
            WS = Kp(),
            GS = ed();
        td.exports = { objectify: VS, parse: US, async: WS, sync: GS };
    });
    var It,
        id,
        MP,
        BP,
        FP,
        NP,
        nd = C(() => {
            l();
            (It = K(rd())),
                (id = It.default),
                (MP = It.default.objectify),
                (BP = It.default.parse),
                (FP = It.default.async),
                (NP = It.default.sync);
        });
    function qt(i) {
        return Array.isArray(i)
            ? i.flatMap(
                  (e) =>
                      z([(0, sd.default)({ bubble: ["screen"] })]).process(e, {
                          parser: id,
                      }).root.nodes
              )
            : qt([i]);
    }
    var sd,
        Ua = C(() => {
            l();
            nt();
            sd = K($p());
            nd();
        });
    function Rt(i, e, t = !1) {
        if (i === "") return e;
        let r = typeof e == "string" ? (0, ad.default)().astSync(e) : e;
        return (
            r.walkClasses((n) => {
                let a = n.value,
                    s = t && a.startsWith("-");
                n.value = s ? `-${i}${a.slice(1)}` : `${i}${a}`;
            }),
            typeof e == "string" ? r.toString() : r
        );
    }
    var ad,
        un = C(() => {
            l();
            ad = K(Me());
        });
    function ce(i) {
        let e = od.default.className();
        return (e.value = i), ht(e?.raws?.value ?? e.value);
    }
    var od,
        Mt = C(() => {
            l();
            od = K(Me());
            mi();
        });
    function Wa(i) {
        return ht(`.${ce(i)}`);
    }
    function fn(i, e) {
        return Wa(Qr(i, e));
    }
    function Qr(i, e) {
        return e === "DEFAULT"
            ? i
            : e === "-" || e === "-DEFAULT"
            ? `-${i}`
            : e.startsWith("-")
            ? `-${i}${e}`
            : e.startsWith("/")
            ? `${i}${e}`
            : `${i}-${e}`;
    }
    var Ga = C(() => {
        l();
        Mt();
        mi();
    });
    function P(i, e = [[i, [i]]], { filterDefault: t = !1, ...r } = {}) {
        let n = Ge(i);
        return function ({ matchUtilities: a, theme: s }) {
            for (let o of e) {
                let u = Array.isArray(o[0]) ? o : [o];
                a(
                    u.reduce(
                        (c, [f, p]) =>
                            Object.assign(c, {
                                [f]: (d) =>
                                    p.reduce(
                                        (h, y) =>
                                            Array.isArray(y)
                                                ? Object.assign(h, {
                                                      [y[0]]: y[1],
                                                  })
                                                : Object.assign(h, {
                                                      [y]: n(d),
                                                  }),
                                        {}
                                    ),
                            }),
                        {}
                    ),
                    {
                        ...r,
                        values: t
                            ? Object.fromEntries(
                                  Object.entries(s(i) ?? {}).filter(
                                      ([c]) => c !== "DEFAULT"
                                  )
                              )
                            : s(i),
                    }
                );
            }
        };
    }
    var ld = C(() => {
        l();
        Hr();
    });
    function st(i) {
        return (
            (i = Array.isArray(i) ? i : [i]),
            i
                .map((e) => {
                    let t = e.values.map((r) =>
                        r.raw !== void 0
                            ? r.raw
                            : [
                                  r.min && `(min-width: ${r.min})`,
                                  r.max && `(max-width: ${r.max})`,
                              ]
                                  .filter(Boolean)
                                  .join(" and ")
                    );
                    return e.not ? `not all and ${t}` : t;
                })
                .join(", ")
        );
    }
    var cn = C(() => {
        l();
    });
    function Ha(i) {
        return i.split(ZS).map((t) => {
            let r = t.trim(),
                n = { value: r },
                a = r.split(eC),
                s = new Set();
            for (let o of a)
                !s.has("DIRECTIONS") && HS.has(o)
                    ? ((n.direction = o), s.add("DIRECTIONS"))
                    : !s.has("PLAY_STATES") && YS.has(o)
                    ? ((n.playState = o), s.add("PLAY_STATES"))
                    : !s.has("FILL_MODES") && QS.has(o)
                    ? ((n.fillMode = o), s.add("FILL_MODES"))
                    : !s.has("ITERATION_COUNTS") && (JS.has(o) || tC.test(o))
                    ? ((n.iterationCount = o), s.add("ITERATION_COUNTS"))
                    : (!s.has("TIMING_FUNCTION") && XS.has(o)) ||
                      (!s.has("TIMING_FUNCTION") &&
                          KS.some((u) => o.startsWith(`${u}(`)))
                    ? ((n.timingFunction = o), s.add("TIMING_FUNCTION"))
                    : !s.has("DURATION") && ud.test(o)
                    ? ((n.duration = o), s.add("DURATION"))
                    : !s.has("DELAY") && ud.test(o)
                    ? ((n.delay = o), s.add("DELAY"))
                    : s.has("NAME")
                    ? (n.unknown || (n.unknown = []), n.unknown.push(o))
                    : ((n.name = o), s.add("NAME"));
            return n;
        });
    }
    var HS,
        YS,
        QS,
        JS,
        XS,
        KS,
        ZS,
        eC,
        ud,
        tC,
        fd = C(() => {
            l();
            (HS = new Set([
                "normal",
                "reverse",
                "alternate",
                "alternate-reverse",
            ])),
                (YS = new Set(["running", "paused"])),
                (QS = new Set(["none", "forwards", "backwards", "both"])),
                (JS = new Set(["infinite"])),
                (XS = new Set([
                    "linear",
                    "ease",
                    "ease-in",
                    "ease-out",
                    "ease-in-out",
                    "step-start",
                    "step-end",
                ])),
                (KS = ["cubic-bezier", "steps"]),
                (ZS = /\,(?![^(]*\))/g),
                (eC = /\ +(?![^(]*\))/g),
                (ud = /^(-?[\d.]+m?s)$/),
                (tC = /^(\d+)$/);
        });
    var cd,
        re,
        pd = C(() => {
            l();
            (cd = (i) =>
                Object.assign(
                    {},
                    ...Object.entries(i ?? {}).flatMap(([e, t]) =>
                        typeof t == "object"
                            ? Object.entries(cd(t)).map(([r, n]) => ({
                                  [e + (r === "DEFAULT" ? "" : `-${r}`)]: n,
                              }))
                            : [{ [`${e}`]: t }]
                    )
                )),
                (re = cd);
        });
    var rC,
        Qa,
        iC,
        nC,
        sC,
        aC,
        oC,
        lC,
        uC,
        fC,
        cC,
        pC,
        dC,
        hC,
        mC,
        gC,
        yC,
        wC,
        Ja,
        Ya = C(() => {
            (rC = "tailwindcss"),
                (Qa = "3.3.3"),
                (iC =
                    "A utility-first CSS framework for rapidly building custom user interfaces."),
                (nC = "MIT"),
                (sC = "lib/index.js"),
                (aC = "types/index.d.ts"),
                (oC = "https://github.com/tailwindlabs/tailwindcss.git"),
                (lC = "https://github.com/tailwindlabs/tailwindcss/issues"),
                (uC = "https://tailwindcss.com"),
                (fC = { tailwind: "lib/cli.js", tailwindcss: "lib/cli.js" }),
                (cC = { engine: "stable" }),
                (pC = {
                    prebuild: "npm run generate && rimraf lib",
                    build: `swc src --out-dir lib --copy-files --config jsc.transform.optimizer.globals.vars.__OXIDE__='"false"'`,
                    postbuild:
                        "esbuild lib/cli-peer-dependencies.js --bundle --platform=node --outfile=peers/index.js --define:process.env.CSS_TRANSFORMER_WASM=false",
                    "rebuild-fixtures":
                        "npm run build && node -r @swc/register scripts/rebuildFixtures.js",
                    style: "eslint .",
                    pretest: "npm run generate",
                    test: "jest",
                    "test:integrations": "npm run test --prefix ./integrations",
                    "install:integrations":
                        "node scripts/install-integrations.js",
                    "generate:plugin-list":
                        "node -r @swc/register scripts/create-plugin-list.js",
                    "generate:types":
                        "node -r @swc/register scripts/generate-types.js",
                    generate:
                        "npm run generate:plugin-list && npm run generate:types",
                    "release-channel": "node ./scripts/release-channel.js",
                    "release-notes": "node ./scripts/release-notes.js",
                    prepublishOnly: "npm install --force && npm run build",
                }),
                (dC = [
                    "src/*",
                    "cli/*",
                    "lib/*",
                    "peers/*",
                    "scripts/*.js",
                    "stubs/*",
                    "nesting/*",
                    "types/**/*",
                    "*.d.ts",
                    "*.css",
                    "*.js",
                ]),
                (hC = {
                    "@swc/cli": "^0.1.62",
                    "@swc/core": "^1.3.55",
                    "@swc/jest": "^0.2.26",
                    "@swc/register": "^0.1.10",
                    autoprefixer: "^10.4.14",
                    browserslist: "^4.21.5",
                    concurrently: "^8.0.1",
                    cssnano: "^6.0.0",
                    esbuild: "^0.17.18",
                    eslint: "^8.39.0",
                    "eslint-config-prettier": "^8.8.0",
                    "eslint-plugin-prettier": "^4.2.1",
                    jest: "^29.5.0",
                    "jest-diff": "^29.5.0",
                    lightningcss: "1.18.0",
                    prettier: "^2.8.8",
                    rimraf: "^5.0.0",
                    "source-map-js": "^1.0.2",
                    turbo: "^1.9.3",
                }),
                (mC = {
                    "@alloc/quick-lru": "^5.2.0",
                    arg: "^5.0.2",
                    chokidar: "^3.5.3",
                    didyoumean: "^1.2.2",
                    dlv: "^1.1.3",
                    "fast-glob": "^3.2.12",
                    "glob-parent": "^6.0.2",
                    "is-glob": "^4.0.3",
                    jiti: "^1.18.2",
                    lilconfig: "^2.1.0",
                    micromatch: "^4.0.5",
                    "normalize-path": "^3.0.0",
                    "object-hash": "^3.0.0",
                    picocolors: "^1.0.0",
                    postcss: "^8.4.23",
                    "postcss-import": "^15.1.0",
                    "postcss-js": "^4.0.1",
                    "postcss-load-config": "^4.0.1",
                    "postcss-nested": "^6.0.1",
                    "postcss-selector-parser": "^6.0.11",
                    resolve: "^1.22.2",
                    sucrase: "^3.32.0",
                }),
                (gC = [
                    "> 1%",
                    "not edge <= 18",
                    "not ie 11",
                    "not op_mini all",
                ]),
                (yC = {
                    testTimeout: 3e4,
                    setupFilesAfterEnv: ["<rootDir>/jest/customMatchers.js"],
                    testPathIgnorePatterns: [
                        "/node_modules/",
                        "/integrations/",
                        "/standalone-cli/",
                        "\\.test\\.skip\\.js$",
                    ],
                    transformIgnorePatterns: ["node_modules/(?!lightningcss)"],
                    transform: { "\\.js$": "@swc/jest", "\\.ts$": "@swc/jest" },
                }),
                (wC = { node: ">=14.0.0" }),
                (Ja = {
                    name: rC,
                    version: Qa,
                    description: iC,
                    license: nC,
                    main: sC,
                    types: aC,
                    repository: oC,
                    bugs: lC,
                    homepage: uC,
                    bin: fC,
                    tailwindcss: cC,
                    scripts: pC,
                    files: dC,
                    devDependencies: hC,
                    dependencies: mC,
                    browserslist: gC,
                    jest: yC,
                    engines: wC,
                });
        });
    function at(i, e = !0) {
        return Array.isArray(i)
            ? i.map((t) => {
                  if (e && Array.isArray(t))
                      throw new Error(
                          "The tuple syntax is not supported for `screens`."
                      );
                  if (typeof t == "string")
                      return {
                          name: t.toString(),
                          not: !1,
                          values: [{ min: t, max: void 0 }],
                      };
                  let [r, n] = t;
                  return (
                      (r = r.toString()),
                      typeof n == "string"
                          ? {
                                name: r,
                                not: !1,
                                values: [{ min: n, max: void 0 }],
                            }
                          : Array.isArray(n)
                          ? { name: r, not: !1, values: n.map((a) => hd(a)) }
                          : { name: r, not: !1, values: [hd(n)] }
                  );
              })
            : at(Object.entries(i ?? {}), !1);
    }
    function pn(i) {
        return i.values.length !== 1
            ? { result: !1, reason: "multiple-values" }
            : i.values[0].raw !== void 0
            ? { result: !1, reason: "raw-values" }
            : i.values[0].min !== void 0 && i.values[0].max !== void 0
            ? { result: !1, reason: "min-and-max" }
            : { result: !0, reason: null };
    }
    function dd(i, e, t) {
        let r = dn(e, i),
            n = dn(t, i),
            a = pn(r),
            s = pn(n);
        if (a.reason === "multiple-values" || s.reason === "multiple-values")
            throw new Error(
                "Attempted to sort a screen with multiple values. This should never happen. Please open a bug report."
            );
        if (a.reason === "raw-values" || s.reason === "raw-values")
            throw new Error(
                "Attempted to sort a screen with raw values. This should never happen. Please open a bug report."
            );
        if (a.reason === "min-and-max" || s.reason === "min-and-max")
            throw new Error(
                "Attempted to sort a screen with both min and max values. This should never happen. Please open a bug report."
            );
        let { min: o, max: u } = r.values[0],
            { min: c, max: f } = n.values[0];
        e.not && ([o, u] = [u, o]),
            t.not && ([c, f] = [f, c]),
            (o = o === void 0 ? o : parseFloat(o)),
            (u = u === void 0 ? u : parseFloat(u)),
            (c = c === void 0 ? c : parseFloat(c)),
            (f = f === void 0 ? f : parseFloat(f));
        let [p, d] = i === "min" ? [o, c] : [f, u];
        return p - d;
    }
    function dn(i, e) {
        return typeof i == "object"
            ? i
            : { name: "arbitrary-screen", values: [{ [e]: i }] };
    }
    function hd({ "min-width": i, min: e = i, max: t, raw: r } = {}) {
        return { min: e, max: t, raw: r };
    }
    var hn = C(() => {
        l();
    });
    function mn(i, e) {
        i.walkDecls((t) => {
            if (e.includes(t.prop)) {
                t.remove();
                return;
            }
            for (let r of e)
                t.value.includes(`/ var(${r})`) &&
                    (t.value = t.value.replace(`/ var(${r})`, ""));
        });
    }
    var md = C(() => {
        l();
    });
    var pe,
        Te,
        Be,
        Fe,
        gd,
        yd = C(() => {
            l();
            ze();
            mt();
            nt();
            ld();
            cn();
            Mt();
            fd();
            pd();
            ar();
            ds();
            xt();
            Hr();
            Ya();
            Ee();
            hn();
            as();
            md();
            De();
            fr();
            Xr();
            (pe = {
                pseudoElementVariants: ({ addVariant: i }) => {
                    i("first-letter", "&::first-letter"),
                        i("first-line", "&::first-line"),
                        i("marker", [
                            ({ container: e }) => (
                                mn(e, ["--tw-text-opacity"]), "& *::marker"
                            ),
                            ({ container: e }) => (
                                mn(e, ["--tw-text-opacity"]), "&::marker"
                            ),
                        ]),
                        i("selection", ["& *::selection", "&::selection"]),
                        i("file", "&::file-selector-button"),
                        i("placeholder", "&::placeholder"),
                        i("backdrop", "&::backdrop"),
                        i(
                            "before",
                            ({ container: e }) => (
                                e.walkRules((t) => {
                                    let r = !1;
                                    t.walkDecls("content", () => {
                                        r = !0;
                                    }),
                                        r ||
                                            t.prepend(
                                                z.decl({
                                                    prop: "content",
                                                    value: "var(--tw-content)",
                                                })
                                            );
                                }),
                                "&::before"
                            )
                        ),
                        i(
                            "after",
                            ({ container: e }) => (
                                e.walkRules((t) => {
                                    let r = !1;
                                    t.walkDecls("content", () => {
                                        r = !0;
                                    }),
                                        r ||
                                            t.prepend(
                                                z.decl({
                                                    prop: "content",
                                                    value: "var(--tw-content)",
                                                })
                                            );
                                }),
                                "&::after"
                            )
                        );
                },
                pseudoClassVariants: ({
                    addVariant: i,
                    matchVariant: e,
                    config: t,
                    prefix: r,
                }) => {
                    let n = [
                        ["first", "&:first-child"],
                        ["last", "&:last-child"],
                        ["only", "&:only-child"],
                        ["odd", "&:nth-child(odd)"],
                        ["even", "&:nth-child(even)"],
                        "first-of-type",
                        "last-of-type",
                        "only-of-type",
                        [
                            "visited",
                            ({ container: s }) => (
                                mn(s, [
                                    "--tw-text-opacity",
                                    "--tw-border-opacity",
                                    "--tw-bg-opacity",
                                ]),
                                "&:visited"
                            ),
                        ],
                        "target",
                        ["open", "&[open]"],
                        "default",
                        "checked",
                        "indeterminate",
                        "placeholder-shown",
                        "autofill",
                        "optional",
                        "required",
                        "valid",
                        "invalid",
                        "in-range",
                        "out-of-range",
                        "read-only",
                        "empty",
                        "focus-within",
                        [
                            "hover",
                            J(t(), "hoverOnlyWhenSupported")
                                ? "@media (hover: hover) and (pointer: fine) { &:hover }"
                                : "&:hover",
                        ],
                        "focus",
                        "focus-visible",
                        "active",
                        "enabled",
                        "disabled",
                    ].map((s) => (Array.isArray(s) ? s : [s, `&:${s}`]));
                    for (let [s, o] of n)
                        i(s, (u) => (typeof o == "function" ? o(u) : o));
                    let a = {
                        group: (s, { modifier: o }) =>
                            o
                                ? [`:merge(${r(".group")}\\/${ce(o)})`, " &"]
                                : [`:merge(${r(".group")})`, " &"],
                        peer: (s, { modifier: o }) =>
                            o
                                ? [`:merge(${r(".peer")}\\/${ce(o)})`, " ~ &"]
                                : [`:merge(${r(".peer")})`, " ~ &"],
                    };
                    for (let [s, o] of Object.entries(a))
                        e(
                            s,
                            (u = "", c) => {
                                let f = U(typeof u == "function" ? u(c) : u);
                                f.includes("&") || (f = "&" + f);
                                let [p, d] = o("", c),
                                    h = null,
                                    y = null,
                                    x = 0;
                                for (let w = 0; w < f.length; ++w) {
                                    let b = f[w];
                                    b === "&"
                                        ? (h = w)
                                        : b === "'" || b === '"'
                                        ? (x += 1)
                                        : h !== null &&
                                          b === " " &&
                                          !x &&
                                          (y = w);
                                }
                                return (
                                    h !== null && y === null && (y = f.length),
                                    f.slice(0, h) +
                                        p +
                                        f.slice(h + 1, y) +
                                        d +
                                        f.slice(y)
                                );
                            },
                            {
                                values: Object.fromEntries(n),
                                [Jr]: { respectPrefix: !1 },
                            }
                        );
                },
                directionVariants: ({ addVariant: i }) => {
                    i("ltr", ':is([dir="ltr"] &)'),
                        i("rtl", ':is([dir="rtl"] &)');
                },
                reducedMotionVariants: ({ addVariant: i }) => {
                    i(
                        "motion-safe",
                        "@media (prefers-reduced-motion: no-preference)"
                    ),
                        i(
                            "motion-reduce",
                            "@media (prefers-reduced-motion: reduce)"
                        );
                },
                darkVariants: ({ config: i, addVariant: e }) => {
                    let [t, r = ".dark"] = [].concat(i("darkMode", "media"));
                    t === !1 &&
                        ((t = "media"),
                        F.warn("darkmode-false", [
                            "The `darkMode` option in your Tailwind CSS configuration is set to `false`, which now behaves the same as `media`.",
                            "Change `darkMode` to `media` or remove it entirely.",
                            "https://tailwindcss.com/docs/upgrade-guide#remove-dark-mode-configuration",
                        ])),
                        t === "class"
                            ? e("dark", `:is(${r} &)`)
                            : t === "media" &&
                              e("dark", "@media (prefers-color-scheme: dark)");
                },
                printVariant: ({ addVariant: i }) => {
                    i("print", "@media print");
                },
                screenVariants: ({
                    theme: i,
                    addVariant: e,
                    matchVariant: t,
                }) => {
                    let r = i("screens") ?? {},
                        n = Object.values(r).every((b) => typeof b == "string"),
                        a = at(i("screens")),
                        s = new Set([]);
                    function o(b) {
                        return b.match(/(\D+)$/)?.[1] ?? "(none)";
                    }
                    function u(b) {
                        b !== void 0 && s.add(o(b));
                    }
                    function c(b) {
                        return u(b), s.size === 1;
                    }
                    for (let b of a) for (let k of b.values) u(k.min), u(k.max);
                    let f = s.size <= 1;
                    function p(b) {
                        return Object.fromEntries(
                            a
                                .filter((k) => pn(k).result)
                                .map((k) => {
                                    let { min: S, max: _ } = k.values[0];
                                    if (b === "min" && S !== void 0) return k;
                                    if (b === "min" && _ !== void 0)
                                        return { ...k, not: !k.not };
                                    if (b === "max" && _ !== void 0) return k;
                                    if (b === "max" && S !== void 0)
                                        return { ...k, not: !k.not };
                                })
                                .map((k) => [k.name, k])
                        );
                    }
                    function d(b) {
                        return (k, S) => dd(b, k.value, S.value);
                    }
                    let h = d("max"),
                        y = d("min");
                    function x(b) {
                        return (k) => {
                            if (n)
                                if (f) {
                                    if (typeof k == "string" && !c(k))
                                        return (
                                            F.warn("minmax-have-mixed-units", [
                                                "The `min-*` and `max-*` variants are not supported with a `screens` configuration containing mixed units.",
                                            ]),
                                            []
                                        );
                                } else
                                    return (
                                        F.warn("mixed-screen-units", [
                                            "The `min-*` and `max-*` variants are not supported with a `screens` configuration containing mixed units.",
                                        ]),
                                        []
                                    );
                            else
                                return (
                                    F.warn("complex-screen-config", [
                                        "The `min-*` and `max-*` variants are not supported with a `screens` configuration containing objects.",
                                    ]),
                                    []
                                );
                            return [`@media ${st(dn(k, b))}`];
                        };
                    }
                    t("max", x("max"), { sort: h, values: n ? p("max") : {} });
                    let w = "min-screens";
                    for (let b of a)
                        e(b.name, `@media ${st(b)}`, {
                            id: w,
                            sort: n && f ? y : void 0,
                            value: b,
                        });
                    t("min", x("min"), { id: w, sort: y });
                },
                supportsVariants: ({ matchVariant: i, theme: e }) => {
                    i(
                        "supports",
                        (t = "") => {
                            let r = U(t),
                                n = /^\w*\s*\(/.test(r);
                            return (
                                (r = n
                                    ? r.replace(/\b(and|or|not)\b/g, " $1 ")
                                    : r),
                                n
                                    ? `@supports ${r}`
                                    : (r.includes(":") ||
                                          (r = `${r}: var(--tw)`),
                                      (r.startsWith("(") && r.endsWith(")")) ||
                                          (r = `(${r})`),
                                      `@supports ${r}`)
                            );
                        },
                        { values: e("supports") ?? {} }
                    );
                },
                ariaVariants: ({ matchVariant: i, theme: e }) => {
                    i("aria", (t) => `&[aria-${U(t)}]`, {
                        values: e("aria") ?? {},
                    }),
                        i(
                            "group-aria",
                            (t, { modifier: r }) =>
                                r
                                    ? `:merge(.group\\/${r})[aria-${U(t)}] &`
                                    : `:merge(.group)[aria-${U(t)}] &`,
                            { values: e("aria") ?? {} }
                        ),
                        i(
                            "peer-aria",
                            (t, { modifier: r }) =>
                                r
                                    ? `:merge(.peer\\/${r})[aria-${U(t)}] ~ &`
                                    : `:merge(.peer)[aria-${U(t)}] ~ &`,
                            { values: e("aria") ?? {} }
                        );
                },
                dataVariants: ({ matchVariant: i, theme: e }) => {
                    i("data", (t) => `&[data-${U(t)}]`, {
                        values: e("data") ?? {},
                    }),
                        i(
                            "group-data",
                            (t, { modifier: r }) =>
                                r
                                    ? `:merge(.group\\/${r})[data-${U(t)}] &`
                                    : `:merge(.group)[data-${U(t)}] &`,
                            { values: e("data") ?? {} }
                        ),
                        i(
                            "peer-data",
                            (t, { modifier: r }) =>
                                r
                                    ? `:merge(.peer\\/${r})[data-${U(t)}] ~ &`
                                    : `:merge(.peer)[data-${U(t)}] ~ &`,
                            { values: e("data") ?? {} }
                        );
                },
                orientationVariants: ({ addVariant: i }) => {
                    i("portrait", "@media (orientation: portrait)"),
                        i("landscape", "@media (orientation: landscape)");
                },
                prefersContrastVariants: ({ addVariant: i }) => {
                    i("contrast-more", "@media (prefers-contrast: more)"),
                        i("contrast-less", "@media (prefers-contrast: less)");
                },
            }),
                (Te = [
                    "translate(var(--tw-translate-x), var(--tw-translate-y))",
                    "rotate(var(--tw-rotate))",
                    "skewX(var(--tw-skew-x))",
                    "skewY(var(--tw-skew-y))",
                    "scaleX(var(--tw-scale-x))",
                    "scaleY(var(--tw-scale-y))",
                ].join(" ")),
                (Be = [
                    "var(--tw-blur)",
                    "var(--tw-brightness)",
                    "var(--tw-contrast)",
                    "var(--tw-grayscale)",
                    "var(--tw-hue-rotate)",
                    "var(--tw-invert)",
                    "var(--tw-saturate)",
                    "var(--tw-sepia)",
                    "var(--tw-drop-shadow)",
                ].join(" ")),
                (Fe = [
                    "var(--tw-backdrop-blur)",
                    "var(--tw-backdrop-brightness)",
                    "var(--tw-backdrop-contrast)",
                    "var(--tw-backdrop-grayscale)",
                    "var(--tw-backdrop-hue-rotate)",
                    "var(--tw-backdrop-invert)",
                    "var(--tw-backdrop-opacity)",
                    "var(--tw-backdrop-saturate)",
                    "var(--tw-backdrop-sepia)",
                ].join(" ")),
                (gd = {
                    preflight: ({ addBase: i }) => {
                        let e = z.parse(
                            `*,::after,::before{box-sizing:border-box;border-width:0;border-style:solid;border-color:theme('borderColor.DEFAULT', currentColor)}::after,::before{--tw-content:''}html{line-height:1.5;-webkit-text-size-adjust:100%;-moz-tab-size:4;tab-size:4;font-family:theme('fontFamily.sans', ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji");font-feature-settings:theme('fontFamily.sans[1].fontFeatureSettings', normal);font-variation-settings:theme('fontFamily.sans[1].fontVariationSettings', normal)}body{margin:0;line-height:inherit}hr{height:0;color:inherit;border-top-width:1px}abbr:where([title]){text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,pre,samp{font-family:theme('fontFamily.mono', ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace);font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}button,input,optgroup,select,textarea{font-family:inherit;font-feature-settings:inherit;font-variation-settings:inherit;font-size:100%;font-weight:inherit;line-height:inherit;color:inherit;margin:0;padding:0}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:baseline}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dd,dl,figure,h1,h2,h3,h4,h5,h6,hr,p,pre{margin:0}fieldset{margin:0;padding:0}legend{padding:0}menu,ol,ul{list-style:none;margin:0;padding:0}dialog{padding:0}textarea{resize:vertical}input::placeholder,textarea::placeholder{opacity:1;color:theme('colors.gray.4', #9ca3af)}[role=button],button{cursor:pointer}:disabled{cursor:default}audio,canvas,embed,iframe,img,object,svg,video{display:block;vertical-align:middle}img,video{max-width:100%;height:auto}[hidden]{display:none}`
                        );
                        i([
                            z.comment({
                                text: `! tailwindcss v${Qa} | MIT License | https://tailwindcss.com`,
                            }),
                            ...e.nodes,
                        ]);
                    },
                    container: (() => {
                        function i(t = []) {
                            return t
                                .flatMap((r) => r.values.map((n) => n.min))
                                .filter((r) => r !== void 0);
                        }
                        function e(t, r, n) {
                            if (typeof n == "undefined") return [];
                            if (!(typeof n == "object" && n !== null))
                                return [
                                    {
                                        screen: "DEFAULT",
                                        minWidth: 0,
                                        padding: n,
                                    },
                                ];
                            let a = [];
                            n.DEFAULT &&
                                a.push({
                                    screen: "DEFAULT",
                                    minWidth: 0,
                                    padding: n.DEFAULT,
                                });
                            for (let s of t)
                                for (let o of r)
                                    for (let { min: u } of o.values)
                                        u === s &&
                                            a.push({
                                                minWidth: s,
                                                padding: n[o.name],
                                            });
                            return a;
                        }
                        return function ({ addComponents: t, theme: r }) {
                            let n = at(r("container.screens", r("screens"))),
                                a = i(n),
                                s = e(a, n, r("container.padding")),
                                o = (c) => {
                                    let f = s.find((p) => p.minWidth === c);
                                    return f
                                        ? {
                                              paddingRight: f.padding,
                                              paddingLeft: f.padding,
                                          }
                                        : {};
                                },
                                u = Array.from(
                                    new Set(
                                        a
                                            .slice()
                                            .sort(
                                                (c, f) =>
                                                    parseInt(c) - parseInt(f)
                                            )
                                    )
                                ).map((c) => ({
                                    [`@media (min-width: ${c})`]: {
                                        ".container": {
                                            "max-width": c,
                                            ...o(c),
                                        },
                                    },
                                }));
                            t([
                                {
                                    ".container": Object.assign(
                                        { width: "100%" },
                                        r("container.center", !1)
                                            ? {
                                                  marginRight: "auto",
                                                  marginLeft: "auto",
                                              }
                                            : {},
                                        o(0)
                                    ),
                                },
                                ...u,
                            ]);
                        };
                    })(),
                    accessibility: ({ addUtilities: i }) => {
                        i({
                            ".sr-only": {
                                position: "absolute",
                                width: "1px",
                                height: "1px",
                                padding: "0",
                                margin: "-1px",
                                overflow: "hidden",
                                clip: "rect(0, 0, 0, 0)",
                                whiteSpace: "nowrap",
                                borderWidth: "0",
                            },
                            ".not-sr-only": {
                                position: "static",
                                width: "auto",
                                height: "auto",
                                padding: "0",
                                margin: "0",
                                overflow: "visible",
                                clip: "auto",
                                whiteSpace: "normal",
                            },
                        });
                    },
                    pointerEvents: ({ addUtilities: i }) => {
                        i({
                            ".pointer-events-none": {
                                "pointer-events": "none",
                            },
                            ".pointer-events-auto": {
                                "pointer-events": "auto",
                            },
                        });
                    },
                    visibility: ({ addUtilities: i }) => {
                        i({
                            ".visible": { visibility: "visible" },
                            ".invisible": { visibility: "hidden" },
                            ".collapse": { visibility: "collapse" },
                        });
                    },
                    position: ({ addUtilities: i }) => {
                        i({
                            ".static": { position: "static" },
                            ".fixed": { position: "fixed" },
                            ".absolute": { position: "absolute" },
                            ".relative": { position: "relative" },
                            ".sticky": { position: "sticky" },
                        });
                    },
                    inset: P(
                        "inset",
                        [
                            ["inset", ["inset"]],
                            [
                                ["inset-x", ["left", "right"]],
                                ["inset-y", ["top", "bottom"]],
                            ],
                            [
                                ["start", ["inset-inline-start"]],
                                ["end", ["inset-inline-end"]],
                                ["top", ["top"]],
                                ["right", ["right"]],
                                ["bottom", ["bottom"]],
                                ["left", ["left"]],
                            ],
                        ],
                        { supportsNegativeValues: !0 }
                    ),
                    isolation: ({ addUtilities: i }) => {
                        i({
                            ".isolate": { isolation: "isolate" },
                            ".isolation-auto": { isolation: "auto" },
                        });
                    },
                    zIndex: P("zIndex", [["z", ["zIndex"]]], {
                        supportsNegativeValues: !0,
                    }),
                    order: P("order", void 0, { supportsNegativeValues: !0 }),
                    gridColumn: P("gridColumn", [["col", ["gridColumn"]]]),
                    gridColumnStart: P("gridColumnStart", [
                        ["col-start", ["gridColumnStart"]],
                    ]),
                    gridColumnEnd: P("gridColumnEnd", [
                        ["col-end", ["gridColumnEnd"]],
                    ]),
                    gridRow: P("gridRow", [["row", ["gridRow"]]]),
                    gridRowStart: P("gridRowStart", [
                        ["row-start", ["gridRowStart"]],
                    ]),
                    gridRowEnd: P("gridRowEnd", [["row-end", ["gridRowEnd"]]]),
                    float: ({ addUtilities: i }) => {
                        i({
                            ".float-right": { float: "right" },
                            ".float-left": { float: "left" },
                            ".float-none": { float: "none" },
                        });
                    },
                    clear: ({ addUtilities: i }) => {
                        i({
                            ".clear-left": { clear: "left" },
                            ".clear-right": { clear: "right" },
                            ".clear-both": { clear: "both" },
                            ".clear-none": { clear: "none" },
                        });
                    },
                    margin: P(
                        "margin",
                        [
                            ["m", ["margin"]],
                            [
                                ["mx", ["margin-left", "margin-right"]],
                                ["my", ["margin-top", "margin-bottom"]],
                            ],
                            [
                                ["ms", ["margin-inline-start"]],
                                ["me", ["margin-inline-end"]],
                                ["mt", ["margin-top"]],
                                ["mr", ["margin-right"]],
                                ["mb", ["margin-bottom"]],
                                ["ml", ["margin-left"]],
                            ],
                        ],
                        { supportsNegativeValues: !0 }
                    ),
                    boxSizing: ({ addUtilities: i }) => {
                        i({
                            ".box-border": { "box-sizing": "border-box" },
                            ".box-content": { "box-sizing": "content-box" },
                        });
                    },
                    lineClamp: ({
                        matchUtilities: i,
                        addUtilities: e,
                        theme: t,
                    }) => {
                        i(
                            {
                                "line-clamp": (r) => ({
                                    overflow: "hidden",
                                    display: "-webkit-box",
                                    "-webkit-box-orient": "vertical",
                                    "-webkit-line-clamp": `${r}`,
                                }),
                            },
                            { values: t("lineClamp") }
                        ),
                            e({
                                ".line-clamp-none": {
                                    overflow: "visible",
                                    display: "block",
                                    "-webkit-box-orient": "horizontal",
                                    "-webkit-line-clamp": "none",
                                },
                            });
                    },
                    display: ({ addUtilities: i }) => {
                        i({
                            ".block": { display: "block" },
                            ".inline-block": { display: "inline-block" },
                            ".inline": { display: "inline" },
                            ".flex": { display: "flex" },
                            ".inline-flex": { display: "inline-flex" },
                            ".table": { display: "table" },
                            ".inline-table": { display: "inline-table" },
                            ".table-caption": { display: "table-caption" },
                            ".table-cell": { display: "table-cell" },
                            ".table-column": { display: "table-column" },
                            ".table-column-group": {
                                display: "table-column-group",
                            },
                            ".table-footer-group": {
                                display: "table-footer-group",
                            },
                            ".table-header-group": {
                                display: "table-header-group",
                            },
                            ".table-row-group": { display: "table-row-group" },
                            ".table-row": { display: "table-row" },
                            ".flow-root": { display: "flow-root" },
                            ".grid": { display: "grid" },
                            ".inline-grid": { display: "inline-grid" },
                            ".contents": { display: "contents" },
                            ".list-item": { display: "list-item" },
                            ".hidden": { display: "none" },
                        });
                    },
                    aspectRatio: P("aspectRatio", [
                        ["aspect", ["aspect-ratio"]],
                    ]),
                    height: P("height", [["h", ["height"]]]),
                    maxHeight: P("maxHeight", [["max-h", ["maxHeight"]]]),
                    minHeight: P("minHeight", [["min-h", ["minHeight"]]]),
                    width: P("width", [["w", ["width"]]]),
                    minWidth: P("minWidth", [["min-w", ["minWidth"]]]),
                    maxWidth: P("maxWidth", [["max-w", ["maxWidth"]]]),
                    flex: P("flex"),
                    flexShrink: P("flexShrink", [
                        ["flex-shrink", ["flex-shrink"]],
                        ["shrink", ["flex-shrink"]],
                    ]),
                    flexGrow: P("flexGrow", [
                        ["flex-grow", ["flex-grow"]],
                        ["grow", ["flex-grow"]],
                    ]),
                    flexBasis: P("flexBasis", [["basis", ["flex-basis"]]]),
                    tableLayout: ({ addUtilities: i }) => {
                        i({
                            ".table-auto": { "table-layout": "auto" },
                            ".table-fixed": { "table-layout": "fixed" },
                        });
                    },
                    captionSide: ({ addUtilities: i }) => {
                        i({
                            ".caption-top": { "caption-side": "top" },
                            ".caption-bottom": { "caption-side": "bottom" },
                        });
                    },
                    borderCollapse: ({ addUtilities: i }) => {
                        i({
                            ".border-collapse": {
                                "border-collapse": "collapse",
                            },
                            ".border-separate": {
                                "border-collapse": "separate",
                            },
                        });
                    },
                    borderSpacing: ({
                        addDefaults: i,
                        matchUtilities: e,
                        theme: t,
                    }) => {
                        i("border-spacing", {
                            "--tw-border-spacing-x": 0,
                            "--tw-border-spacing-y": 0,
                        }),
                            e(
                                {
                                    "border-spacing": (r) => ({
                                        "--tw-border-spacing-x": r,
                                        "--tw-border-spacing-y": r,
                                        "@defaults border-spacing": {},
                                        "border-spacing":
                                            "var(--tw-border-spacing-x) var(--tw-border-spacing-y)",
                                    }),
                                    "border-spacing-x": (r) => ({
                                        "--tw-border-spacing-x": r,
                                        "@defaults border-spacing": {},
                                        "border-spacing":
                                            "var(--tw-border-spacing-x) var(--tw-border-spacing-y)",
                                    }),
                                    "border-spacing-y": (r) => ({
                                        "--tw-border-spacing-y": r,
                                        "@defaults border-spacing": {},
                                        "border-spacing":
                                            "var(--tw-border-spacing-x) var(--tw-border-spacing-y)",
                                    }),
                                },
                                { values: t("borderSpacing") }
                            );
                    },
                    transformOrigin: P("transformOrigin", [
                        ["origin", ["transformOrigin"]],
                    ]),
                    translate: P(
                        "translate",
                        [
                            [
                                [
                                    "translate-x",
                                    [
                                        ["@defaults transform", {}],
                                        "--tw-translate-x",
                                        ["transform", Te],
                                    ],
                                ],
                                [
                                    "translate-y",
                                    [
                                        ["@defaults transform", {}],
                                        "--tw-translate-y",
                                        ["transform", Te],
                                    ],
                                ],
                            ],
                        ],
                        { supportsNegativeValues: !0 }
                    ),
                    rotate: P(
                        "rotate",
                        [
                            [
                                "rotate",
                                [
                                    ["@defaults transform", {}],
                                    "--tw-rotate",
                                    ["transform", Te],
                                ],
                            ],
                        ],
                        { supportsNegativeValues: !0 }
                    ),
                    skew: P(
                        "skew",
                        [
                            [
                                [
                                    "skew-x",
                                    [
                                        ["@defaults transform", {}],
                                        "--tw-skew-x",
                                        ["transform", Te],
                                    ],
                                ],
                                [
                                    "skew-y",
                                    [
                                        ["@defaults transform", {}],
                                        "--tw-skew-y",
                                        ["transform", Te],
                                    ],
                                ],
                            ],
                        ],
                        { supportsNegativeValues: !0 }
                    ),
                    scale: P(
                        "scale",
                        [
                            [
                                "scale",
                                [
                                    ["@defaults transform", {}],
                                    "--tw-scale-x",
                                    "--tw-scale-y",
                                    ["transform", Te],
                                ],
                            ],
                            [
                                [
                                    "scale-x",
                                    [
                                        ["@defaults transform", {}],
                                        "--tw-scale-x",
                                        ["transform", Te],
                                    ],
                                ],
                                [
                                    "scale-y",
                                    [
                                        ["@defaults transform", {}],
                                        "--tw-scale-y",
                                        ["transform", Te],
                                    ],
                                ],
                            ],
                        ],
                        { supportsNegativeValues: !0 }
                    ),
                    transform: ({ addDefaults: i, addUtilities: e }) => {
                        i("transform", {
                            "--tw-translate-x": "0",
                            "--tw-translate-y": "0",
                            "--tw-rotate": "0",
                            "--tw-skew-x": "0",
                            "--tw-skew-y": "0",
                            "--tw-scale-x": "1",
                            "--tw-scale-y": "1",
                        }),
                            e({
                                ".transform": {
                                    "@defaults transform": {},
                                    transform: Te,
                                },
                                ".transform-cpu": { transform: Te },
                                ".transform-gpu": {
                                    transform: Te.replace(
                                        "translate(var(--tw-translate-x), var(--tw-translate-y))",
                                        "translate3d(var(--tw-translate-x), var(--tw-translate-y), 0)"
                                    ),
                                },
                                ".transform-none": { transform: "none" },
                            });
                    },
                    animation: ({ matchUtilities: i, theme: e, config: t }) => {
                        let r = (a) => ce(t("prefix") + a),
                            n = Object.fromEntries(
                                Object.entries(e("keyframes") ?? {}).map(
                                    ([a, s]) => [
                                        a,
                                        { [`@keyframes ${r(a)}`]: s },
                                    ]
                                )
                            );
                        i(
                            {
                                animate: (a) => {
                                    let s = Ha(a);
                                    return [
                                        ...s.flatMap((o) => n[o.name]),
                                        {
                                            animation: s
                                                .map(({ name: o, value: u }) =>
                                                    o === void 0 ||
                                                    n[o] === void 0
                                                        ? u
                                                        : u.replace(o, r(o))
                                                )
                                                .join(", "),
                                        },
                                    ];
                                },
                            },
                            { values: e("animation") }
                        );
                    },
                    cursor: P("cursor"),
                    touchAction: ({ addDefaults: i, addUtilities: e }) => {
                        i("touch-action", {
                            "--tw-pan-x": " ",
                            "--tw-pan-y": " ",
                            "--tw-pinch-zoom": " ",
                        });
                        let t =
                            "var(--tw-pan-x) var(--tw-pan-y) var(--tw-pinch-zoom)";
                        e({
                            ".touch-auto": { "touch-action": "auto" },
                            ".touch-none": { "touch-action": "none" },
                            ".touch-pan-x": {
                                "@defaults touch-action": {},
                                "--tw-pan-x": "pan-x",
                                "touch-action": t,
                            },
                            ".touch-pan-left": {
                                "@defaults touch-action": {},
                                "--tw-pan-x": "pan-left",
                                "touch-action": t,
                            },
                            ".touch-pan-right": {
                                "@defaults touch-action": {},
                                "--tw-pan-x": "pan-right",
                                "touch-action": t,
                            },
                            ".touch-pan-y": {
                                "@defaults touch-action": {},
                                "--tw-pan-y": "pan-y",
                                "touch-action": t,
                            },
                            ".touch-pan-up": {
                                "@defaults touch-action": {},
                                "--tw-pan-y": "pan-up",
                                "touch-action": t,
                            },
                            ".touch-pan-down": {
                                "@defaults touch-action": {},
                                "--tw-pan-y": "pan-down",
                                "touch-action": t,
                            },
                            ".touch-pinch-zoom": {
                                "@defaults touch-action": {},
                                "--tw-pinch-zoom": "pinch-zoom",
                                "touch-action": t,
                            },
                            ".touch-manipulation": {
                                "touch-action": "manipulation",
                            },
                        });
                    },
                    userSelect: ({ addUtilities: i }) => {
                        i({
                            ".select-none": { "user-select": "none" },
                            ".select-text": { "user-select": "text" },
                            ".select-all": { "user-select": "all" },
                            ".select-auto": { "user-select": "auto" },
                        });
                    },
                    resize: ({ addUtilities: i }) => {
                        i({
                            ".resize-none": { resize: "none" },
                            ".resize-y": { resize: "vertical" },
                            ".resize-x": { resize: "horizontal" },
                            ".resize": { resize: "both" },
                        });
                    },
                    scrollSnapType: ({ addDefaults: i, addUtilities: e }) => {
                        i("scroll-snap-type", {
                            "--tw-scroll-snap-strictness": "proximity",
                        }),
                            e({
                                ".snap-none": { "scroll-snap-type": "none" },
                                ".snap-x": {
                                    "@defaults scroll-snap-type": {},
                                    "scroll-snap-type":
                                        "x var(--tw-scroll-snap-strictness)",
                                },
                                ".snap-y": {
                                    "@defaults scroll-snap-type": {},
                                    "scroll-snap-type":
                                        "y var(--tw-scroll-snap-strictness)",
                                },
                                ".snap-both": {
                                    "@defaults scroll-snap-type": {},
                                    "scroll-snap-type":
                                        "both var(--tw-scroll-snap-strictness)",
                                },
                                ".snap-mandatory": {
                                    "--tw-scroll-snap-strictness": "mandatory",
                                },
                                ".snap-proximity": {
                                    "--tw-scroll-snap-strictness": "proximity",
                                },
                            });
                    },
                    scrollSnapAlign: ({ addUtilities: i }) => {
                        i({
                            ".snap-start": { "scroll-snap-align": "start" },
                            ".snap-end": { "scroll-snap-align": "end" },
                            ".snap-center": { "scroll-snap-align": "center" },
                            ".snap-align-none": { "scroll-snap-align": "none" },
                        });
                    },
                    scrollSnapStop: ({ addUtilities: i }) => {
                        i({
                            ".snap-normal": { "scroll-snap-stop": "normal" },
                            ".snap-always": { "scroll-snap-stop": "always" },
                        });
                    },
                    scrollMargin: P(
                        "scrollMargin",
                        [
                            ["scroll-m", ["scroll-margin"]],
                            [
                                [
                                    "scroll-mx",
                                    [
                                        "scroll-margin-left",
                                        "scroll-margin-right",
                                    ],
                                ],
                                [
                                    "scroll-my",
                                    [
                                        "scroll-margin-top",
                                        "scroll-margin-bottom",
                                    ],
                                ],
                            ],
                            [
                                ["scroll-ms", ["scroll-margin-inline-start"]],
                                ["scroll-me", ["scroll-margin-inline-end"]],
                                ["scroll-mt", ["scroll-margin-top"]],
                                ["scroll-mr", ["scroll-margin-right"]],
                                ["scroll-mb", ["scroll-margin-bottom"]],
                                ["scroll-ml", ["scroll-margin-left"]],
                            ],
                        ],
                        { supportsNegativeValues: !0 }
                    ),
                    scrollPadding: P("scrollPadding", [
                        ["scroll-p", ["scroll-padding"]],
                        [
                            [
                                "scroll-px",
                                ["scroll-padding-left", "scroll-padding-right"],
                            ],
                            [
                                "scroll-py",
                                ["scroll-padding-top", "scroll-padding-bottom"],
                            ],
                        ],
                        [
                            ["scroll-ps", ["scroll-padding-inline-start"]],
                            ["scroll-pe", ["scroll-padding-inline-end"]],
                            ["scroll-pt", ["scroll-padding-top"]],
                            ["scroll-pr", ["scroll-padding-right"]],
                            ["scroll-pb", ["scroll-padding-bottom"]],
                            ["scroll-pl", ["scroll-padding-left"]],
                        ],
                    ]),
                    listStylePosition: ({ addUtilities: i }) => {
                        i({
                            ".list-inside": { "list-style-position": "inside" },
                            ".list-outside": {
                                "list-style-position": "outside",
                            },
                        });
                    },
                    listStyleType: P("listStyleType", [
                        ["list", ["listStyleType"]],
                    ]),
                    listStyleImage: P("listStyleImage", [
                        ["list-image", ["listStyleImage"]],
                    ]),
                    appearance: ({ addUtilities: i }) => {
                        i({ ".appearance-none": { appearance: "none" } });
                    },
                    columns: P("columns", [["columns", ["columns"]]]),
                    breakBefore: ({ addUtilities: i }) => {
                        i({
                            ".break-before-auto": { "break-before": "auto" },
                            ".break-before-avoid": { "break-before": "avoid" },
                            ".break-before-all": { "break-before": "all" },
                            ".break-before-avoid-page": {
                                "break-before": "avoid-page",
                            },
                            ".break-before-page": { "break-before": "page" },
                            ".break-before-left": { "break-before": "left" },
                            ".break-before-right": { "break-before": "right" },
                            ".break-before-column": {
                                "break-before": "column",
                            },
                        });
                    },
                    breakInside: ({ addUtilities: i }) => {
                        i({
                            ".break-inside-auto": { "break-inside": "auto" },
                            ".break-inside-avoid": { "break-inside": "avoid" },
                            ".break-inside-avoid-page": {
                                "break-inside": "avoid-page",
                            },
                            ".break-inside-avoid-column": {
                                "break-inside": "avoid-column",
                            },
                        });
                    },
                    breakAfter: ({ addUtilities: i }) => {
                        i({
                            ".break-after-auto": { "break-after": "auto" },
                            ".break-after-avoid": { "break-after": "avoid" },
                            ".break-after-all": { "break-after": "all" },
                            ".break-after-avoid-page": {
                                "break-after": "avoid-page",
                            },
                            ".break-after-page": { "break-after": "page" },
                            ".break-after-left": { "break-after": "left" },
                            ".break-after-right": { "break-after": "right" },
                            ".break-after-column": { "break-after": "column" },
                        });
                    },
                    gridAutoColumns: P("gridAutoColumns", [
                        ["auto-cols", ["gridAutoColumns"]],
                    ]),
                    gridAutoFlow: ({ addUtilities: i }) => {
                        i({
                            ".grid-flow-row": { gridAutoFlow: "row" },
                            ".grid-flow-col": { gridAutoFlow: "column" },
                            ".grid-flow-dense": { gridAutoFlow: "dense" },
                            ".grid-flow-row-dense": {
                                gridAutoFlow: "row dense",
                            },
                            ".grid-flow-col-dense": {
                                gridAutoFlow: "column dense",
                            },
                        });
                    },
                    gridAutoRows: P("gridAutoRows", [
                        ["auto-rows", ["gridAutoRows"]],
                    ]),
                    gridTemplateColumns: P("gridTemplateColumns", [
                        ["grid-cols", ["gridTemplateColumns"]],
                    ]),
                    gridTemplateRows: P("gridTemplateRows", [
                        ["grid-rows", ["gridTemplateRows"]],
                    ]),
                    flexDirection: ({ addUtilities: i }) => {
                        i({
                            ".flex-row": { "flex-direction": "row" },
                            ".flex-row-reverse": {
                                "flex-direction": "row-reverse",
                            },
                            ".flex-col": { "flex-direction": "column" },
                            ".flex-col-reverse": {
                                "flex-direction": "column-reverse",
                            },
                        });
                    },
                    flexWrap: ({ addUtilities: i }) => {
                        i({
                            ".flex-wrap": { "flex-wrap": "wrap" },
                            ".flex-wrap-reverse": {
                                "flex-wrap": "wrap-reverse",
                            },
                            ".flex-nowrap": { "flex-wrap": "nowrap" },
                        });
                    },
                    placeContent: ({ addUtilities: i }) => {
                        i({
                            ".place-content-center": {
                                "place-content": "center",
                            },
                            ".place-content-start": {
                                "place-content": "start",
                            },
                            ".place-content-end": { "place-content": "end" },
                            ".place-content-between": {
                                "place-content": "space-between",
                            },
                            ".place-content-around": {
                                "place-content": "space-around",
                            },
                            ".place-content-evenly": {
                                "place-content": "space-evenly",
                            },
                            ".place-content-baseline": {
                                "place-content": "baseline",
                            },
                            ".place-content-stretch": {
                                "place-content": "stretch",
                            },
                        });
                    },
                    placeItems: ({ addUtilities: i }) => {
                        i({
                            ".place-items-start": { "place-items": "start" },
                            ".place-items-end": { "place-items": "end" },
                            ".place-items-center": { "place-items": "center" },
                            ".place-items-baseline": {
                                "place-items": "baseline",
                            },
                            ".place-items-stretch": {
                                "place-items": "stretch",
                            },
                        });
                    },
                    alignContent: ({ addUtilities: i }) => {
                        i({
                            ".content-normal": { "align-content": "normal" },
                            ".content-center": { "align-content": "center" },
                            ".content-start": { "align-content": "flex-start" },
                            ".content-end": { "align-content": "flex-end" },
                            ".content-between": {
                                "align-content": "space-between",
                            },
                            ".content-around": {
                                "align-content": "space-around",
                            },
                            ".content-evenly": {
                                "align-content": "space-evenly",
                            },
                            ".content-baseline": {
                                "align-content": "baseline",
                            },
                            ".content-stretch": { "align-content": "stretch" },
                        });
                    },
                    alignItems: ({ addUtilities: i }) => {
                        i({
                            ".items-start": { "align-items": "flex-start" },
                            ".items-end": { "align-items": "flex-end" },
                            ".items-center": { "align-items": "center" },
                            ".items-baseline": { "align-items": "baseline" },
                            ".items-stretch": { "align-items": "stretch" },
                        });
                    },
                    justifyContent: ({ addUtilities: i }) => {
                        i({
                            ".justify-normal": { "justify-content": "normal" },
                            ".justify-start": {
                                "justify-content": "flex-start",
                            },
                            ".justify-end": { "justify-content": "flex-end" },
                            ".justify-center": { "justify-content": "center" },
                            ".justify-between": {
                                "justify-content": "space-between",
                            },
                            ".justify-around": {
                                "justify-content": "space-around",
                            },
                            ".justify-evenly": {
                                "justify-content": "space-evenly",
                            },
                            ".justify-stretch": {
                                "justify-content": "stretch",
                            },
                        });
                    },
                    justifyItems: ({ addUtilities: i }) => {
                        i({
                            ".justify-items-start": {
                                "justify-items": "start",
                            },
                            ".justify-items-end": { "justify-items": "end" },
                            ".justify-items-center": {
                                "justify-items": "center",
                            },
                            ".justify-items-stretch": {
                                "justify-items": "stretch",
                            },
                        });
                    },
                    gap: P("gap", [
                        ["gap", ["gap"]],
                        [
                            ["gap-x", ["columnGap"]],
                            ["gap-y", ["rowGap"]],
                        ],
                    ]),
                    space: ({
                        matchUtilities: i,
                        addUtilities: e,
                        theme: t,
                    }) => {
                        i(
                            {
                                "space-x": (r) => (
                                    (r = r === "0" ? "0px" : r),
                                    {
                                        "& > :not([hidden]) ~ :not([hidden])": {
                                            "--tw-space-x-reverse": "0",
                                            "margin-right": `calc(${r} * var(--tw-space-x-reverse))`,
                                            "margin-left": `calc(${r} * calc(1 - var(--tw-space-x-reverse)))`,
                                        },
                                    }
                                ),
                                "space-y": (r) => (
                                    (r = r === "0" ? "0px" : r),
                                    {
                                        "& > :not([hidden]) ~ :not([hidden])": {
                                            "--tw-space-y-reverse": "0",
                                            "margin-top": `calc(${r} * calc(1 - var(--tw-space-y-reverse)))`,
                                            "margin-bottom": `calc(${r} * var(--tw-space-y-reverse))`,
                                        },
                                    }
                                ),
                            },
                            { values: t("space"), supportsNegativeValues: !0 }
                        ),
                            e({
                                ".space-y-reverse > :not([hidden]) ~ :not([hidden])":
                                    { "--tw-space-y-reverse": "1" },
                                ".space-x-reverse > :not([hidden]) ~ :not([hidden])":
                                    { "--tw-space-x-reverse": "1" },
                            });
                    },
                    divideWidth: ({
                        matchUtilities: i,
                        addUtilities: e,
                        theme: t,
                    }) => {
                        i(
                            {
                                "divide-x": (r) => (
                                    (r = r === "0" ? "0px" : r),
                                    {
                                        "& > :not([hidden]) ~ :not([hidden])": {
                                            "@defaults border-width": {},
                                            "--tw-divide-x-reverse": "0",
                                            "border-right-width": `calc(${r} * var(--tw-divide-x-reverse))`,
                                            "border-left-width": `calc(${r} * calc(1 - var(--tw-divide-x-reverse)))`,
                                        },
                                    }
                                ),
                                "divide-y": (r) => (
                                    (r = r === "0" ? "0px" : r),
                                    {
                                        "& > :not([hidden]) ~ :not([hidden])": {
                                            "@defaults border-width": {},
                                            "--tw-divide-y-reverse": "0",
                                            "border-top-width": `calc(${r} * calc(1 - var(--tw-divide-y-reverse)))`,
                                            "border-bottom-width": `calc(${r} * var(--tw-divide-y-reverse))`,
                                        },
                                    }
                                ),
                            },
                            {
                                values: t("divideWidth"),
                                type: ["line-width", "length", "any"],
                            }
                        ),
                            e({
                                ".divide-y-reverse > :not([hidden]) ~ :not([hidden])":
                                    {
                                        "@defaults border-width": {},
                                        "--tw-divide-y-reverse": "1",
                                    },
                                ".divide-x-reverse > :not([hidden]) ~ :not([hidden])":
                                    {
                                        "@defaults border-width": {},
                                        "--tw-divide-x-reverse": "1",
                                    },
                            });
                    },
                    divideStyle: ({ addUtilities: i }) => {
                        i({
                            ".divide-solid > :not([hidden]) ~ :not([hidden])": {
                                "border-style": "solid",
                            },
                            ".divide-dashed > :not([hidden]) ~ :not([hidden])":
                                { "border-style": "dashed" },
                            ".divide-dotted > :not([hidden]) ~ :not([hidden])":
                                { "border-style": "dotted" },
                            ".divide-double > :not([hidden]) ~ :not([hidden])":
                                { "border-style": "double" },
                            ".divide-none > :not([hidden]) ~ :not([hidden])": {
                                "border-style": "none",
                            },
                        });
                    },
                    divideColor: ({
                        matchUtilities: i,
                        theme: e,
                        corePlugins: t,
                    }) => {
                        i(
                            {
                                divide: (r) =>
                                    t("divideOpacity")
                                        ? {
                                              ["& > :not([hidden]) ~ :not([hidden])"]:
                                                  se({
                                                      color: r,
                                                      property: "border-color",
                                                      variable:
                                                          "--tw-divide-opacity",
                                                  }),
                                          }
                                        : {
                                              ["& > :not([hidden]) ~ :not([hidden])"]:
                                                  { "border-color": N(r) },
                                          },
                            },
                            {
                                values: (({ DEFAULT: r, ...n }) => n)(
                                    re(e("divideColor"))
                                ),
                                type: ["color", "any"],
                            }
                        );
                    },
                    divideOpacity: ({ matchUtilities: i, theme: e }) => {
                        i(
                            {
                                "divide-opacity": (t) => ({
                                    ["& > :not([hidden]) ~ :not([hidden])"]: {
                                        "--tw-divide-opacity": t,
                                    },
                                }),
                            },
                            { values: e("divideOpacity") }
                        );
                    },
                    placeSelf: ({ addUtilities: i }) => {
                        i({
                            ".place-self-auto": { "place-self": "auto" },
                            ".place-self-start": { "place-self": "start" },
                            ".place-self-end": { "place-self": "end" },
                            ".place-self-center": { "place-self": "center" },
                            ".place-self-stretch": { "place-self": "stretch" },
                        });
                    },
                    alignSelf: ({ addUtilities: i }) => {
                        i({
                            ".self-auto": { "align-self": "auto" },
                            ".self-start": { "align-self": "flex-start" },
                            ".self-end": { "align-self": "flex-end" },
                            ".self-center": { "align-self": "center" },
                            ".self-stretch": { "align-self": "stretch" },
                            ".self-baseline": { "align-self": "baseline" },
                        });
                    },
                    justifySelf: ({ addUtilities: i }) => {
                        i({
                            ".justify-self-auto": { "justify-self": "auto" },
                            ".justify-self-start": { "justify-self": "start" },
                            ".justify-self-end": { "justify-self": "end" },
                            ".justify-self-center": {
                                "justify-self": "center",
                            },
                            ".justify-self-stretch": {
                                "justify-self": "stretch",
                            },
                        });
                    },
                    overflow: ({ addUtilities: i }) => {
                        i({
                            ".overflow-auto": { overflow: "auto" },
                            ".overflow-hidden": { overflow: "hidden" },
                            ".overflow-clip": { overflow: "clip" },
                            ".overflow-visible": { overflow: "visible" },
                            ".overflow-scroll": { overflow: "scroll" },
                            ".overflow-x-auto": { "overflow-x": "auto" },
                            ".overflow-y-auto": { "overflow-y": "auto" },
                            ".overflow-x-hidden": { "overflow-x": "hidden" },
                            ".overflow-y-hidden": { "overflow-y": "hidden" },
                            ".overflow-x-clip": { "overflow-x": "clip" },
                            ".overflow-y-clip": { "overflow-y": "clip" },
                            ".overflow-x-visible": { "overflow-x": "visible" },
                            ".overflow-y-visible": { "overflow-y": "visible" },
                            ".overflow-x-scroll": { "overflow-x": "scroll" },
                            ".overflow-y-scroll": { "overflow-y": "scroll" },
                        });
                    },
                    overscrollBehavior: ({ addUtilities: i }) => {
                        i({
                            ".overscroll-auto": {
                                "overscroll-behavior": "auto",
                            },
                            ".overscroll-contain": {
                                "overscroll-behavior": "contain",
                            },
                            ".overscroll-none": {
                                "overscroll-behavior": "none",
                            },
                            ".overscroll-y-auto": {
                                "overscroll-behavior-y": "auto",
                            },
                            ".overscroll-y-contain": {
                                "overscroll-behavior-y": "contain",
                            },
                            ".overscroll-y-none": {
                                "overscroll-behavior-y": "none",
                            },
                            ".overscroll-x-auto": {
                                "overscroll-behavior-x": "auto",
                            },
                            ".overscroll-x-contain": {
                                "overscroll-behavior-x": "contain",
                            },
                            ".overscroll-x-none": {
                                "overscroll-behavior-x": "none",
                            },
                        });
                    },
                    scrollBehavior: ({ addUtilities: i }) => {
                        i({
                            ".scroll-auto": { "scroll-behavior": "auto" },
                            ".scroll-smooth": { "scroll-behavior": "smooth" },
                        });
                    },
                    textOverflow: ({ addUtilities: i }) => {
                        i({
                            ".truncate": {
                                overflow: "hidden",
                                "text-overflow": "ellipsis",
                                "white-space": "nowrap",
                            },
                            ".overflow-ellipsis": {
                                "text-overflow": "ellipsis",
                            },
                            ".text-ellipsis": { "text-overflow": "ellipsis" },
                            ".text-clip": { "text-overflow": "clip" },
                        });
                    },
                    hyphens: ({ addUtilities: i }) => {
                        i({
                            ".hyphens-none": { hyphens: "none" },
                            ".hyphens-manual": { hyphens: "manual" },
                            ".hyphens-auto": { hyphens: "auto" },
                        });
                    },
                    whitespace: ({ addUtilities: i }) => {
                        i({
                            ".whitespace-normal": { "white-space": "normal" },
                            ".whitespace-nowrap": { "white-space": "nowrap" },
                            ".whitespace-pre": { "white-space": "pre" },
                            ".whitespace-pre-line": {
                                "white-space": "pre-line",
                            },
                            ".whitespace-pre-wrap": {
                                "white-space": "pre-wrap",
                            },
                            ".whitespace-break-spaces": {
                                "white-space": "break-spaces",
                            },
                        });
                    },
                    wordBreak: ({ addUtilities: i }) => {
                        i({
                            ".break-normal": {
                                "overflow-wrap": "normal",
                                "word-break": "normal",
                            },
                            ".break-words": { "overflow-wrap": "break-word" },
                            ".break-all": { "word-break": "break-all" },
                            ".break-keep": { "word-break": "keep-all" },
                        });
                    },
                    borderRadius: P("borderRadius", [
                        ["rounded", ["border-radius"]],
                        [
                            [
                                "rounded-s",
                                [
                                    "border-start-start-radius",
                                    "border-end-start-radius",
                                ],
                            ],
                            [
                                "rounded-e",
                                [
                                    "border-start-end-radius",
                                    "border-end-end-radius",
                                ],
                            ],
                            [
                                "rounded-t",
                                [
                                    "border-top-left-radius",
                                    "border-top-right-radius",
                                ],
                            ],
                            [
                                "rounded-r",
                                [
                                    "border-top-right-radius",
                                    "border-bottom-right-radius",
                                ],
                            ],
                            [
                                "rounded-b",
                                [
                                    "border-bottom-right-radius",
                                    "border-bottom-left-radius",
                                ],
                            ],
                            [
                                "rounded-l",
                                [
                                    "border-top-left-radius",
                                    "border-bottom-left-radius",
                                ],
                            ],
                        ],
                        [
                            ["rounded-ss", ["border-start-start-radius"]],
                            ["rounded-se", ["border-start-end-radius"]],
                            ["rounded-ee", ["border-end-end-radius"]],
                            ["rounded-es", ["border-end-start-radius"]],
                            ["rounded-tl", ["border-top-left-radius"]],
                            ["rounded-tr", ["border-top-right-radius"]],
                            ["rounded-br", ["border-bottom-right-radius"]],
                            ["rounded-bl", ["border-bottom-left-radius"]],
                        ],
                    ]),
                    borderWidth: P(
                        "borderWidth",
                        [
                            [
                                "border",
                                [
                                    ["@defaults border-width", {}],
                                    "border-width",
                                ],
                            ],
                            [
                                [
                                    "border-x",
                                    [
                                        ["@defaults border-width", {}],
                                        "border-left-width",
                                        "border-right-width",
                                    ],
                                ],
                                [
                                    "border-y",
                                    [
                                        ["@defaults border-width", {}],
                                        "border-top-width",
                                        "border-bottom-width",
                                    ],
                                ],
                            ],
                            [
                                [
                                    "border-s",
                                    [
                                        ["@defaults border-width", {}],
                                        "border-inline-start-width",
                                    ],
                                ],
                                [
                                    "border-e",
                                    [
                                        ["@defaults border-width", {}],
                                        "border-inline-end-width",
                                    ],
                                ],
                                [
                                    "border-t",
                                    [
                                        ["@defaults border-width", {}],
                                        "border-top-width",
                                    ],
                                ],
                                [
                                    "border-r",
                                    [
                                        ["@defaults border-width", {}],
                                        "border-right-width",
                                    ],
                                ],
                                [
                                    "border-b",
                                    [
                                        ["@defaults border-width", {}],
                                        "border-bottom-width",
                                    ],
                                ],
                                [
                                    "border-l",
                                    [
                                        ["@defaults border-width", {}],
                                        "border-left-width",
                                    ],
                                ],
                            ],
                        ],
                        { type: ["line-width", "length"] }
                    ),
                    borderStyle: ({ addUtilities: i }) => {
                        i({
                            ".border-solid": { "border-style": "solid" },
                            ".border-dashed": { "border-style": "dashed" },
                            ".border-dotted": { "border-style": "dotted" },
                            ".border-double": { "border-style": "double" },
                            ".border-hidden": { "border-style": "hidden" },
                            ".border-none": { "border-style": "none" },
                        });
                    },
                    borderColor: ({
                        matchUtilities: i,
                        theme: e,
                        corePlugins: t,
                    }) => {
                        i(
                            {
                                border: (r) =>
                                    t("borderOpacity")
                                        ? se({
                                              color: r,
                                              property: "border-color",
                                              variable: "--tw-border-opacity",
                                          })
                                        : { "border-color": N(r) },
                            },
                            {
                                values: (({ DEFAULT: r, ...n }) => n)(
                                    re(e("borderColor"))
                                ),
                                type: ["color", "any"],
                            }
                        ),
                            i(
                                {
                                    "border-x": (r) =>
                                        t("borderOpacity")
                                            ? se({
                                                  color: r,
                                                  property: [
                                                      "border-left-color",
                                                      "border-right-color",
                                                  ],
                                                  variable:
                                                      "--tw-border-opacity",
                                              })
                                            : {
                                                  "border-left-color": N(r),
                                                  "border-right-color": N(r),
                                              },
                                    "border-y": (r) =>
                                        t("borderOpacity")
                                            ? se({
                                                  color: r,
                                                  property: [
                                                      "border-top-color",
                                                      "border-bottom-color",
                                                  ],
                                                  variable:
                                                      "--tw-border-opacity",
                                              })
                                            : {
                                                  "border-top-color": N(r),
                                                  "border-bottom-color": N(r),
                                              },
                                },
                                {
                                    values: (({ DEFAULT: r, ...n }) => n)(
                                        re(e("borderColor"))
                                    ),
                                    type: ["color", "any"],
                                }
                            ),
                            i(
                                {
                                    "border-s": (r) =>
                                        t("borderOpacity")
                                            ? se({
                                                  color: r,
                                                  property:
                                                      "border-inline-start-color",
                                                  variable:
                                                      "--tw-border-opacity",
                                              })
                                            : {
                                                  "border-inline-start-color":
                                                      N(r),
                                              },
                                    "border-e": (r) =>
                                        t("borderOpacity")
                                            ? se({
                                                  color: r,
                                                  property:
                                                      "border-inline-end-color",
                                                  variable:
                                                      "--tw-border-opacity",
                                              })
                                            : {
                                                  "border-inline-end-color":
                                                      N(r),
                                              },
                                    "border-t": (r) =>
                                        t("borderOpacity")
                                            ? se({
                                                  color: r,
                                                  property: "border-top-color",
                                                  variable:
                                                      "--tw-border-opacity",
                                              })
                                            : { "border-top-color": N(r) },
                                    "border-r": (r) =>
                                        t("borderOpacity")
                                            ? se({
                                                  color: r,
                                                  property:
                                                      "border-right-color",
                                                  variable:
                                                      "--tw-border-opacity",
                                              })
                                            : { "border-right-color": N(r) },
                                    "border-b": (r) =>
                                        t("borderOpacity")
                                            ? se({
                                                  color: r,
                                                  property:
                                                      "border-bottom-color",
                                                  variable:
                                                      "--tw-border-opacity",
                                              })
                                            : { "border-bottom-color": N(r) },
                                    "border-l": (r) =>
                                        t("borderOpacity")
                                            ? se({
                                                  color: r,
                                                  property: "border-left-color",
                                                  variable:
                                                      "--tw-border-opacity",
                                              })
                                            : { "border-left-color": N(r) },
                                },
                                {
                                    values: (({ DEFAULT: r, ...n }) => n)(
                                        re(e("borderColor"))
                                    ),
                                    type: ["color", "any"],
                                }
                            );
                    },
                    borderOpacity: P("borderOpacity", [
                        ["border-opacity", ["--tw-border-opacity"]],
                    ]),
                    backgroundColor: ({
                        matchUtilities: i,
                        theme: e,
                        corePlugins: t,
                    }) => {
                        i(
                            {
                                bg: (r) =>
                                    t("backgroundOpacity")
                                        ? se({
                                              color: r,
                                              property: "background-color",
                                              variable: "--tw-bg-opacity",
                                          })
                                        : { "background-color": N(r) },
                            },
                            {
                                values: re(e("backgroundColor")),
                                type: ["color", "any"],
                            }
                        );
                    },
                    backgroundOpacity: P("backgroundOpacity", [
                        ["bg-opacity", ["--tw-bg-opacity"]],
                    ]),
                    backgroundImage: P(
                        "backgroundImage",
                        [["bg", ["background-image"]]],
                        { type: ["lookup", "image", "url"] }
                    ),
                    gradientColorStops: (() => {
                        function i(e) {
                            return Ie(e, 0, "rgb(255 255 255 / 0)");
                        }
                        return function ({
                            matchUtilities: e,
                            theme: t,
                            addDefaults: r,
                        }) {
                            r("gradient-color-stops", {
                                "--tw-gradient-from-position": " ",
                                "--tw-gradient-via-position": " ",
                                "--tw-gradient-to-position": " ",
                            });
                            let n = {
                                    values: re(t("gradientColorStops")),
                                    type: ["color", "any"],
                                },
                                a = {
                                    values: t("gradientColorStopPositions"),
                                    type: ["length", "percentage"],
                                };
                            e(
                                {
                                    from: (s) => {
                                        let o = i(s);
                                        return {
                                            "@defaults gradient-color-stops":
                                                {},
                                            "--tw-gradient-from": `${N(
                                                s
                                            )} var(--tw-gradient-from-position)`,
                                            "--tw-gradient-to": `${o} var(--tw-gradient-to-position)`,
                                            "--tw-gradient-stops":
                                                "var(--tw-gradient-from), var(--tw-gradient-to)",
                                        };
                                    },
                                },
                                n
                            ),
                                e(
                                    {
                                        from: (s) => ({
                                            "--tw-gradient-from-position": s,
                                        }),
                                    },
                                    a
                                ),
                                e(
                                    {
                                        via: (s) => {
                                            let o = i(s);
                                            return {
                                                "@defaults gradient-color-stops":
                                                    {},
                                                "--tw-gradient-to": `${o}  var(--tw-gradient-to-position)`,
                                                "--tw-gradient-stops": `var(--tw-gradient-from), ${N(
                                                    s
                                                )} var(--tw-gradient-via-position), var(--tw-gradient-to)`,
                                            };
                                        },
                                    },
                                    n
                                ),
                                e(
                                    {
                                        via: (s) => ({
                                            "--tw-gradient-via-position": s,
                                        }),
                                    },
                                    a
                                ),
                                e(
                                    {
                                        to: (s) => ({
                                            "@defaults gradient-color-stops":
                                                {},
                                            "--tw-gradient-to": `${N(
                                                s
                                            )} var(--tw-gradient-to-position)`,
                                        }),
                                    },
                                    n
                                ),
                                e(
                                    {
                                        to: (s) => ({
                                            "--tw-gradient-to-position": s,
                                        }),
                                    },
                                    a
                                );
                        };
                    })(),
                    boxDecorationBreak: ({ addUtilities: i }) => {
                        i({
                            ".decoration-slice": {
                                "box-decoration-break": "slice",
                            },
                            ".decoration-clone": {
                                "box-decoration-break": "clone",
                            },
                            ".box-decoration-slice": {
                                "box-decoration-break": "slice",
                            },
                            ".box-decoration-clone": {
                                "box-decoration-break": "clone",
                            },
                        });
                    },
                    backgroundSize: P(
                        "backgroundSize",
                        [["bg", ["background-size"]]],
                        { type: ["lookup", "length", "percentage", "size"] }
                    ),
                    backgroundAttachment: ({ addUtilities: i }) => {
                        i({
                            ".bg-fixed": { "background-attachment": "fixed" },
                            ".bg-local": { "background-attachment": "local" },
                            ".bg-scroll": { "background-attachment": "scroll" },
                        });
                    },
                    backgroundClip: ({ addUtilities: i }) => {
                        i({
                            ".bg-clip-border": {
                                "background-clip": "border-box",
                            },
                            ".bg-clip-padding": {
                                "background-clip": "padding-box",
                            },
                            ".bg-clip-content": {
                                "background-clip": "content-box",
                            },
                            ".bg-clip-text": { "background-clip": "text" },
                        });
                    },
                    backgroundPosition: P(
                        "backgroundPosition",
                        [["bg", ["background-position"]]],
                        {
                            type: [
                                "lookup",
                                ["position", { preferOnConflict: !0 }],
                            ],
                        }
                    ),
                    backgroundRepeat: ({ addUtilities: i }) => {
                        i({
                            ".bg-repeat": { "background-repeat": "repeat" },
                            ".bg-no-repeat": {
                                "background-repeat": "no-repeat",
                            },
                            ".bg-repeat-x": { "background-repeat": "repeat-x" },
                            ".bg-repeat-y": { "background-repeat": "repeat-y" },
                            ".bg-repeat-round": {
                                "background-repeat": "round",
                            },
                            ".bg-repeat-space": {
                                "background-repeat": "space",
                            },
                        });
                    },
                    backgroundOrigin: ({ addUtilities: i }) => {
                        i({
                            ".bg-origin-border": {
                                "background-origin": "border-box",
                            },
                            ".bg-origin-padding": {
                                "background-origin": "padding-box",
                            },
                            ".bg-origin-content": {
                                "background-origin": "content-box",
                            },
                        });
                    },
                    fill: ({ matchUtilities: i, theme: e }) => {
                        i(
                            { fill: (t) => ({ fill: N(t) }) },
                            { values: re(e("fill")), type: ["color", "any"] }
                        );
                    },
                    stroke: ({ matchUtilities: i, theme: e }) => {
                        i(
                            { stroke: (t) => ({ stroke: N(t) }) },
                            {
                                values: re(e("stroke")),
                                type: ["color", "url", "any"],
                            }
                        );
                    },
                    strokeWidth: P(
                        "strokeWidth",
                        [["stroke", ["stroke-width"]]],
                        { type: ["length", "number", "percentage"] }
                    ),
                    objectFit: ({ addUtilities: i }) => {
                        i({
                            ".object-contain": { "object-fit": "contain" },
                            ".object-cover": { "object-fit": "cover" },
                            ".object-fill": { "object-fit": "fill" },
                            ".object-none": { "object-fit": "none" },
                            ".object-scale-down": {
                                "object-fit": "scale-down",
                            },
                        });
                    },
                    objectPosition: P("objectPosition", [
                        ["object", ["object-position"]],
                    ]),
                    padding: P("padding", [
                        ["p", ["padding"]],
                        [
                            ["px", ["padding-left", "padding-right"]],
                            ["py", ["padding-top", "padding-bottom"]],
                        ],
                        [
                            ["ps", ["padding-inline-start"]],
                            ["pe", ["padding-inline-end"]],
                            ["pt", ["padding-top"]],
                            ["pr", ["padding-right"]],
                            ["pb", ["padding-bottom"]],
                            ["pl", ["padding-left"]],
                        ],
                    ]),
                    textAlign: ({ addUtilities: i }) => {
                        i({
                            ".text-left": { "text-align": "left" },
                            ".text-center": { "text-align": "center" },
                            ".text-right": { "text-align": "right" },
                            ".text-justify": { "text-align": "justify" },
                            ".text-start": { "text-align": "start" },
                            ".text-end": { "text-align": "end" },
                        });
                    },
                    textIndent: P("textIndent", [["indent", ["text-indent"]]], {
                        supportsNegativeValues: !0,
                    }),
                    verticalAlign: ({ addUtilities: i, matchUtilities: e }) => {
                        i({
                            ".align-baseline": { "vertical-align": "baseline" },
                            ".align-top": { "vertical-align": "top" },
                            ".align-middle": { "vertical-align": "middle" },
                            ".align-bottom": { "vertical-align": "bottom" },
                            ".align-text-top": { "vertical-align": "text-top" },
                            ".align-text-bottom": {
                                "vertical-align": "text-bottom",
                            },
                            ".align-sub": { "vertical-align": "sub" },
                            ".align-super": { "vertical-align": "super" },
                        }),
                            e({ align: (t) => ({ "vertical-align": t }) });
                    },
                    fontFamily: ({ matchUtilities: i, theme: e }) => {
                        i(
                            {
                                font: (t) => {
                                    let [r, n = {}] =
                                            Array.isArray(t) && ie(t[1])
                                                ? t
                                                : [t],
                                        {
                                            fontFeatureSettings: a,
                                            fontVariationSettings: s,
                                        } = n;
                                    return {
                                        "font-family": Array.isArray(r)
                                            ? r.join(", ")
                                            : r,
                                        ...(a === void 0
                                            ? {}
                                            : { "font-feature-settings": a }),
                                        ...(s === void 0
                                            ? {}
                                            : { "font-variation-settings": s }),
                                    };
                                },
                            },
                            {
                                values: e("fontFamily"),
                                type: ["lookup", "generic-name", "family-name"],
                            }
                        );
                    },
                    fontSize: ({ matchUtilities: i, theme: e }) => {
                        i(
                            {
                                text: (t, { modifier: r }) => {
                                    let [n, a] = Array.isArray(t) ? t : [t];
                                    if (r)
                                        return {
                                            "font-size": n,
                                            "line-height": r,
                                        };
                                    let {
                                        lineHeight: s,
                                        letterSpacing: o,
                                        fontWeight: u,
                                    } = ie(a) ? a : { lineHeight: a };
                                    return {
                                        "font-size": n,
                                        ...(s === void 0
                                            ? {}
                                            : { "line-height": s }),
                                        ...(o === void 0
                                            ? {}
                                            : { "letter-spacing": o }),
                                        ...(u === void 0
                                            ? {}
                                            : { "font-weight": u }),
                                    };
                                },
                            },
                            {
                                values: e("fontSize"),
                                modifiers: e("lineHeight"),
                                type: [
                                    "absolute-size",
                                    "relative-size",
                                    "length",
                                    "percentage",
                                ],
                            }
                        );
                    },
                    fontWeight: P("fontWeight", [["font", ["fontWeight"]]], {
                        type: ["lookup", "number", "any"],
                    }),
                    textTransform: ({ addUtilities: i }) => {
                        i({
                            ".uppercase": { "text-transform": "uppercase" },
                            ".lowercase": { "text-transform": "lowercase" },
                            ".capitalize": { "text-transform": "capitalize" },
                            ".normal-case": { "text-transform": "none" },
                        });
                    },
                    fontStyle: ({ addUtilities: i }) => {
                        i({
                            ".italic": { "font-style": "italic" },
                            ".not-italic": { "font-style": "normal" },
                        });
                    },
                    fontVariantNumeric: ({
                        addDefaults: i,
                        addUtilities: e,
                    }) => {
                        let t =
                            "var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction)";
                        i("font-variant-numeric", {
                            "--tw-ordinal": " ",
                            "--tw-slashed-zero": " ",
                            "--tw-numeric-figure": " ",
                            "--tw-numeric-spacing": " ",
                            "--tw-numeric-fraction": " ",
                        }),
                            e({
                                ".normal-nums": {
                                    "font-variant-numeric": "normal",
                                },
                                ".ordinal": {
                                    "@defaults font-variant-numeric": {},
                                    "--tw-ordinal": "ordinal",
                                    "font-variant-numeric": t,
                                },
                                ".slashed-zero": {
                                    "@defaults font-variant-numeric": {},
                                    "--tw-slashed-zero": "slashed-zero",
                                    "font-variant-numeric": t,
                                },
                                ".lining-nums": {
                                    "@defaults font-variant-numeric": {},
                                    "--tw-numeric-figure": "lining-nums",
                                    "font-variant-numeric": t,
                                },
                                ".oldstyle-nums": {
                                    "@defaults font-variant-numeric": {},
                                    "--tw-numeric-figure": "oldstyle-nums",
                                    "font-variant-numeric": t,
                                },
                                ".proportional-nums": {
                                    "@defaults font-variant-numeric": {},
                                    "--tw-numeric-spacing": "proportional-nums",
                                    "font-variant-numeric": t,
                                },
                                ".tabular-nums": {
                                    "@defaults font-variant-numeric": {},
                                    "--tw-numeric-spacing": "tabular-nums",
                                    "font-variant-numeric": t,
                                },
                                ".diagonal-fractions": {
                                    "@defaults font-variant-numeric": {},
                                    "--tw-numeric-fraction":
                                        "diagonal-fractions",
                                    "font-variant-numeric": t,
                                },
                                ".stacked-fractions": {
                                    "@defaults font-variant-numeric": {},
                                    "--tw-numeric-fraction":
                                        "stacked-fractions",
                                    "font-variant-numeric": t,
                                },
                            });
                    },
                    lineHeight: P("lineHeight", [["leading", ["lineHeight"]]]),
                    letterSpacing: P(
                        "letterSpacing",
                        [["tracking", ["letterSpacing"]]],
                        { supportsNegativeValues: !0 }
                    ),
                    textColor: ({
                        matchUtilities: i,
                        theme: e,
                        corePlugins: t,
                    }) => {
                        i(
                            {
                                text: (r) =>
                                    t("textOpacity")
                                        ? se({
                                              color: r,
                                              property: "color",
                                              variable: "--tw-text-opacity",
                                          })
                                        : { color: N(r) },
                            },
                            {
                                values: re(e("textColor")),
                                type: ["color", "any"],
                            }
                        );
                    },
                    textOpacity: P("textOpacity", [
                        ["text-opacity", ["--tw-text-opacity"]],
                    ]),
                    textDecoration: ({ addUtilities: i }) => {
                        i({
                            ".underline": {
                                "text-decoration-line": "underline",
                            },
                            ".overline": { "text-decoration-line": "overline" },
                            ".line-through": {
                                "text-decoration-line": "line-through",
                            },
                            ".no-underline": { "text-decoration-line": "none" },
                        });
                    },
                    textDecorationColor: ({ matchUtilities: i, theme: e }) => {
                        i(
                            {
                                decoration: (t) => ({
                                    "text-decoration-color": N(t),
                                }),
                            },
                            {
                                values: re(e("textDecorationColor")),
                                type: ["color", "any"],
                            }
                        );
                    },
                    textDecorationStyle: ({ addUtilities: i }) => {
                        i({
                            ".decoration-solid": {
                                "text-decoration-style": "solid",
                            },
                            ".decoration-double": {
                                "text-decoration-style": "double",
                            },
                            ".decoration-dotted": {
                                "text-decoration-style": "dotted",
                            },
                            ".decoration-dashed": {
                                "text-decoration-style": "dashed",
                            },
                            ".decoration-wavy": {
                                "text-decoration-style": "wavy",
                            },
                        });
                    },
                    textDecorationThickness: P(
                        "textDecorationThickness",
                        [["decoration", ["text-decoration-thickness"]]],
                        { type: ["length", "percentage"] }
                    ),
                    textUnderlineOffset: P(
                        "textUnderlineOffset",
                        [["underline-offset", ["text-underline-offset"]]],
                        { type: ["length", "percentage", "any"] }
                    ),
                    fontSmoothing: ({ addUtilities: i }) => {
                        i({
                            ".antialiased": {
                                "-webkit-font-smoothing": "antialiased",
                                "-moz-osx-font-smoothing": "grayscale",
                            },
                            ".subpixel-antialiased": {
                                "-webkit-font-smoothing": "auto",
                                "-moz-osx-font-smoothing": "auto",
                            },
                        });
                    },
                    placeholderColor: ({
                        matchUtilities: i,
                        theme: e,
                        corePlugins: t,
                    }) => {
                        i(
                            {
                                placeholder: (r) =>
                                    t("placeholderOpacity")
                                        ? {
                                              "&::placeholder": se({
                                                  color: r,
                                                  property: "color",
                                                  variable:
                                                      "--tw-placeholder-opacity",
                                              }),
                                          }
                                        : { "&::placeholder": { color: N(r) } },
                            },
                            {
                                values: re(e("placeholderColor")),
                                type: ["color", "any"],
                            }
                        );
                    },
                    placeholderOpacity: ({ matchUtilities: i, theme: e }) => {
                        i(
                            {
                                "placeholder-opacity": (t) => ({
                                    ["&::placeholder"]: {
                                        "--tw-placeholder-opacity": t,
                                    },
                                }),
                            },
                            { values: e("placeholderOpacity") }
                        );
                    },
                    caretColor: ({ matchUtilities: i, theme: e }) => {
                        i(
                            { caret: (t) => ({ "caret-color": N(t) }) },
                            {
                                values: re(e("caretColor")),
                                type: ["color", "any"],
                            }
                        );
                    },
                    accentColor: ({ matchUtilities: i, theme: e }) => {
                        i(
                            { accent: (t) => ({ "accent-color": N(t) }) },
                            {
                                values: re(e("accentColor")),
                                type: ["color", "any"],
                            }
                        );
                    },
                    opacity: P("opacity", [["opacity", ["opacity"]]]),
                    backgroundBlendMode: ({ addUtilities: i }) => {
                        i({
                            ".bg-blend-normal": {
                                "background-blend-mode": "normal",
                            },
                            ".bg-blend-multiply": {
                                "background-blend-mode": "multiply",
                            },
                            ".bg-blend-screen": {
                                "background-blend-mode": "screen",
                            },
                            ".bg-blend-overlay": {
                                "background-blend-mode": "overlay",
                            },
                            ".bg-blend-darken": {
                                "background-blend-mode": "darken",
                            },
                            ".bg-blend-lighten": {
                                "background-blend-mode": "lighten",
                            },
                            ".bg-blend-color-dodge": {
                                "background-blend-mode": "color-dodge",
                            },
                            ".bg-blend-color-burn": {
                                "background-blend-mode": "color-burn",
                            },
                            ".bg-blend-hard-light": {
                                "background-blend-mode": "hard-light",
                            },
                            ".bg-blend-soft-light": {
                                "background-blend-mode": "soft-light",
                            },
                            ".bg-blend-difference": {
                                "background-blend-mode": "difference",
                            },
                            ".bg-blend-exclusion": {
                                "background-blend-mode": "exclusion",
                            },
                            ".bg-blend-hue": { "background-blend-mode": "hue" },
                            ".bg-blend-saturation": {
                                "background-blend-mode": "saturation",
                            },
                            ".bg-blend-color": {
                                "background-blend-mode": "color",
                            },
                            ".bg-blend-luminosity": {
                                "background-blend-mode": "luminosity",
                            },
                        });
                    },
                    mixBlendMode: ({ addUtilities: i }) => {
                        i({
                            ".mix-blend-normal": { "mix-blend-mode": "normal" },
                            ".mix-blend-multiply": {
                                "mix-blend-mode": "multiply",
                            },
                            ".mix-blend-screen": { "mix-blend-mode": "screen" },
                            ".mix-blend-overlay": {
                                "mix-blend-mode": "overlay",
                            },
                            ".mix-blend-darken": { "mix-blend-mode": "darken" },
                            ".mix-blend-lighten": {
                                "mix-blend-mode": "lighten",
                            },
                            ".mix-blend-color-dodge": {
                                "mix-blend-mode": "color-dodge",
                            },
                            ".mix-blend-color-burn": {
                                "mix-blend-mode": "color-burn",
                            },
                            ".mix-blend-hard-light": {
                                "mix-blend-mode": "hard-light",
                            },
                            ".mix-blend-soft-light": {
                                "mix-blend-mode": "soft-light",
                            },
                            ".mix-blend-difference": {
                                "mix-blend-mode": "difference",
                            },
                            ".mix-blend-exclusion": {
                                "mix-blend-mode": "exclusion",
                            },
                            ".mix-blend-hue": { "mix-blend-mode": "hue" },
                            ".mix-blend-saturation": {
                                "mix-blend-mode": "saturation",
                            },
                            ".mix-blend-color": { "mix-blend-mode": "color" },
                            ".mix-blend-luminosity": {
                                "mix-blend-mode": "luminosity",
                            },
                            ".mix-blend-plus-lighter": {
                                "mix-blend-mode": "plus-lighter",
                            },
                        });
                    },
                    boxShadow: (() => {
                        let i = Ge("boxShadow"),
                            e = [
                                "var(--tw-ring-offset-shadow, 0 0 #0000)",
                                "var(--tw-ring-shadow, 0 0 #0000)",
                                "var(--tw-shadow)",
                            ].join(", ");
                        return function ({
                            matchUtilities: t,
                            addDefaults: r,
                            theme: n,
                        }) {
                            r(" box-shadow", {
                                "--tw-ring-offset-shadow": "0 0 #0000",
                                "--tw-ring-shadow": "0 0 #0000",
                                "--tw-shadow": "0 0 #0000",
                                "--tw-shadow-colored": "0 0 #0000",
                            }),
                                t(
                                    {
                                        shadow: (a) => {
                                            a = i(a);
                                            let s = yi(a);
                                            for (let o of s)
                                                !o.valid ||
                                                    (o.color =
                                                        "var(--tw-shadow-color)");
                                            return {
                                                "@defaults box-shadow": {},
                                                "--tw-shadow":
                                                    a === "none"
                                                        ? "0 0 #0000"
                                                        : a,
                                                "--tw-shadow-colored":
                                                    a === "none"
                                                        ? "0 0 #0000"
                                                        : Iu(s),
                                                "box-shadow": e,
                                            };
                                        },
                                    },
                                    { values: n("boxShadow"), type: ["shadow"] }
                                );
                        };
                    })(),
                    boxShadowColor: ({ matchUtilities: i, theme: e }) => {
                        i(
                            {
                                shadow: (t) => ({
                                    "--tw-shadow-color": N(t),
                                    "--tw-shadow": "var(--tw-shadow-colored)",
                                }),
                            },
                            {
                                values: re(e("boxShadowColor")),
                                type: ["color", "any"],
                            }
                        );
                    },
                    outlineStyle: ({ addUtilities: i }) => {
                        i({
                            ".outline-none": {
                                outline: "2px solid transparent",
                                "outline-offset": "2px",
                            },
                            ".outline": { "outline-style": "solid" },
                            ".outline-dashed": { "outline-style": "dashed" },
                            ".outline-dotted": { "outline-style": "dotted" },
                            ".outline-double": { "outline-style": "double" },
                        });
                    },
                    outlineWidth: P(
                        "outlineWidth",
                        [["outline", ["outline-width"]]],
                        { type: ["length", "number", "percentage"] }
                    ),
                    outlineOffset: P(
                        "outlineOffset",
                        [["outline-offset", ["outline-offset"]]],
                        {
                            type: ["length", "number", "percentage", "any"],
                            supportsNegativeValues: !0,
                        }
                    ),
                    outlineColor: ({ matchUtilities: i, theme: e }) => {
                        i(
                            { outline: (t) => ({ "outline-color": N(t) }) },
                            {
                                values: re(e("outlineColor")),
                                type: ["color", "any"],
                            }
                        );
                    },
                    ringWidth: ({
                        matchUtilities: i,
                        addDefaults: e,
                        addUtilities: t,
                        theme: r,
                        config: n,
                    }) => {
                        let a = (() => {
                            if (J(n(), "respectDefaultRingColorOpacity"))
                                return r("ringColor.DEFAULT");
                            let s = r("ringOpacity.DEFAULT", "0.5");
                            return r("ringColor")?.DEFAULT
                                ? Ie(
                                      r("ringColor")?.DEFAULT,
                                      s,
                                      `rgb(147 197 253 / ${s})`
                                  )
                                : `rgb(147 197 253 / ${s})`;
                        })();
                        e("ring-width", {
                            "--tw-ring-inset": " ",
                            "--tw-ring-offset-width": r(
                                "ringOffsetWidth.DEFAULT",
                                "0px"
                            ),
                            "--tw-ring-offset-color": r(
                                "ringOffsetColor.DEFAULT",
                                "#fff"
                            ),
                            "--tw-ring-color": a,
                            "--tw-ring-offset-shadow": "0 0 #0000",
                            "--tw-ring-shadow": "0 0 #0000",
                            "--tw-shadow": "0 0 #0000",
                            "--tw-shadow-colored": "0 0 #0000",
                        }),
                            i(
                                {
                                    ring: (s) => ({
                                        "@defaults ring-width": {},
                                        "--tw-ring-offset-shadow":
                                            "var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color)",
                                        "--tw-ring-shadow": `var(--tw-ring-inset) 0 0 0 calc(${s} + var(--tw-ring-offset-width)) var(--tw-ring-color)`,
                                        "box-shadow": [
                                            "var(--tw-ring-offset-shadow)",
                                            "var(--tw-ring-shadow)",
                                            "var(--tw-shadow, 0 0 #0000)",
                                        ].join(", "),
                                    }),
                                },
                                { values: r("ringWidth"), type: "length" }
                            ),
                            t({
                                ".ring-inset": {
                                    "@defaults ring-width": {},
                                    "--tw-ring-inset": "inset",
                                },
                            });
                    },
                    ringColor: ({
                        matchUtilities: i,
                        theme: e,
                        corePlugins: t,
                    }) => {
                        i(
                            {
                                ring: (r) =>
                                    t("ringOpacity")
                                        ? se({
                                              color: r,
                                              property: "--tw-ring-color",
                                              variable: "--tw-ring-opacity",
                                          })
                                        : { "--tw-ring-color": N(r) },
                            },
                            {
                                values: Object.fromEntries(
                                    Object.entries(re(e("ringColor"))).filter(
                                        ([r]) => r !== "DEFAULT"
                                    )
                                ),
                                type: ["color", "any"],
                            }
                        );
                    },
                    ringOpacity: (i) => {
                        let { config: e } = i;
                        return P(
                            "ringOpacity",
                            [["ring-opacity", ["--tw-ring-opacity"]]],
                            {
                                filterDefault: !J(
                                    e(),
                                    "respectDefaultRingColorOpacity"
                                ),
                            }
                        )(i);
                    },
                    ringOffsetWidth: P(
                        "ringOffsetWidth",
                        [["ring-offset", ["--tw-ring-offset-width"]]],
                        { type: "length" }
                    ),
                    ringOffsetColor: ({ matchUtilities: i, theme: e }) => {
                        i(
                            {
                                "ring-offset": (t) => ({
                                    "--tw-ring-offset-color": N(t),
                                }),
                            },
                            {
                                values: re(e("ringOffsetColor")),
                                type: ["color", "any"],
                            }
                        );
                    },
                    blur: ({ matchUtilities: i, theme: e }) => {
                        i(
                            {
                                blur: (t) => ({
                                    "--tw-blur": `blur(${t})`,
                                    "@defaults filter": {},
                                    filter: Be,
                                }),
                            },
                            { values: e("blur") }
                        );
                    },
                    brightness: ({ matchUtilities: i, theme: e }) => {
                        i(
                            {
                                brightness: (t) => ({
                                    "--tw-brightness": `brightness(${t})`,
                                    "@defaults filter": {},
                                    filter: Be,
                                }),
                            },
                            { values: e("brightness") }
                        );
                    },
                    contrast: ({ matchUtilities: i, theme: e }) => {
                        i(
                            {
                                contrast: (t) => ({
                                    "--tw-contrast": `contrast(${t})`,
                                    "@defaults filter": {},
                                    filter: Be,
                                }),
                            },
                            { values: e("contrast") }
                        );
                    },
                    dropShadow: ({ matchUtilities: i, theme: e }) => {
                        i(
                            {
                                "drop-shadow": (t) => ({
                                    "--tw-drop-shadow": Array.isArray(t)
                                        ? t
                                              .map((r) => `drop-shadow(${r})`)
                                              .join(" ")
                                        : `drop-shadow(${t})`,
                                    "@defaults filter": {},
                                    filter: Be,
                                }),
                            },
                            { values: e("dropShadow") }
                        );
                    },
                    grayscale: ({ matchUtilities: i, theme: e }) => {
                        i(
                            {
                                grayscale: (t) => ({
                                    "--tw-grayscale": `grayscale(${t})`,
                                    "@defaults filter": {},
                                    filter: Be,
                                }),
                            },
                            { values: e("grayscale") }
                        );
                    },
                    hueRotate: ({ matchUtilities: i, theme: e }) => {
                        i(
                            {
                                "hue-rotate": (t) => ({
                                    "--tw-hue-rotate": `hue-rotate(${t})`,
                                    "@defaults filter": {},
                                    filter: Be,
                                }),
                            },
                            {
                                values: e("hueRotate"),
                                supportsNegativeValues: !0,
                            }
                        );
                    },
                    invert: ({ matchUtilities: i, theme: e }) => {
                        i(
                            {
                                invert: (t) => ({
                                    "--tw-invert": `invert(${t})`,
                                    "@defaults filter": {},
                                    filter: Be,
                                }),
                            },
                            { values: e("invert") }
                        );
                    },
                    saturate: ({ matchUtilities: i, theme: e }) => {
                        i(
                            {
                                saturate: (t) => ({
                                    "--tw-saturate": `saturate(${t})`,
                                    "@defaults filter": {},
                                    filter: Be,
                                }),
                            },
                            { values: e("saturate") }
                        );
                    },
                    sepia: ({ matchUtilities: i, theme: e }) => {
                        i(
                            {
                                sepia: (t) => ({
                                    "--tw-sepia": `sepia(${t})`,
                                    "@defaults filter": {},
                                    filter: Be,
                                }),
                            },
                            { values: e("sepia") }
                        );
                    },
                    filter: ({ addDefaults: i, addUtilities: e }) => {
                        i("filter", {
                            "--tw-blur": " ",
                            "--tw-brightness": " ",
                            "--tw-contrast": " ",
                            "--tw-grayscale": " ",
                            "--tw-hue-rotate": " ",
                            "--tw-invert": " ",
                            "--tw-saturate": " ",
                            "--tw-sepia": " ",
                            "--tw-drop-shadow": " ",
                        }),
                            e({
                                ".filter": {
                                    "@defaults filter": {},
                                    filter: Be,
                                },
                                ".filter-none": { filter: "none" },
                            });
                    },
                    backdropBlur: ({ matchUtilities: i, theme: e }) => {
                        i(
                            {
                                "backdrop-blur": (t) => ({
                                    "--tw-backdrop-blur": `blur(${t})`,
                                    "@defaults backdrop-filter": {},
                                    "backdrop-filter": Fe,
                                }),
                            },
                            { values: e("backdropBlur") }
                        );
                    },
                    backdropBrightness: ({ matchUtilities: i, theme: e }) => {
                        i(
                            {
                                "backdrop-brightness": (t) => ({
                                    "--tw-backdrop-brightness": `brightness(${t})`,
                                    "@defaults backdrop-filter": {},
                                    "backdrop-filter": Fe,
                                }),
                            },
                            { values: e("backdropBrightness") }
                        );
                    },
                    backdropContrast: ({ matchUtilities: i, theme: e }) => {
                        i(
                            {
                                "backdrop-contrast": (t) => ({
                                    "--tw-backdrop-contrast": `contrast(${t})`,
                                    "@defaults backdrop-filter": {},
                                    "backdrop-filter": Fe,
                                }),
                            },
                            { values: e("backdropContrast") }
                        );
                    },
                    backdropGrayscale: ({ matchUtilities: i, theme: e }) => {
                        i(
                            {
                                "backdrop-grayscale": (t) => ({
                                    "--tw-backdrop-grayscale": `grayscale(${t})`,
                                    "@defaults backdrop-filter": {},
                                    "backdrop-filter": Fe,
                                }),
                            },
                            { values: e("backdropGrayscale") }
                        );
                    },
                    backdropHueRotate: ({ matchUtilities: i, theme: e }) => {
                        i(
                            {
                                "backdrop-hue-rotate": (t) => ({
                                    "--tw-backdrop-hue-rotate": `hue-rotate(${t})`,
                                    "@defaults backdrop-filter": {},
                                    "backdrop-filter": Fe,
                                }),
                            },
                            {
                                values: e("backdropHueRotate"),
                                supportsNegativeValues: !0,
                            }
                        );
                    },
                    backdropInvert: ({ matchUtilities: i, theme: e }) => {
                        i(
                            {
                                "backdrop-invert": (t) => ({
                                    "--tw-backdrop-invert": `invert(${t})`,
                                    "@defaults backdrop-filter": {},
                                    "backdrop-filter": Fe,
                                }),
                            },
                            { values: e("backdropInvert") }
                        );
                    },
                    backdropOpacity: ({ matchUtilities: i, theme: e }) => {
                        i(
                            {
                                "backdrop-opacity": (t) => ({
                                    "--tw-backdrop-opacity": `opacity(${t})`,
                                    "@defaults backdrop-filter": {},
                                    "backdrop-filter": Fe,
                                }),
                            },
                            { values: e("backdropOpacity") }
                        );
                    },
                    backdropSaturate: ({ matchUtilities: i, theme: e }) => {
                        i(
                            {
                                "backdrop-saturate": (t) => ({
                                    "--tw-backdrop-saturate": `saturate(${t})`,
                                    "@defaults backdrop-filter": {},
                                    "backdrop-filter": Fe,
                                }),
                            },
                            { values: e("backdropSaturate") }
                        );
                    },
                    backdropSepia: ({ matchUtilities: i, theme: e }) => {
                        i(
                            {
                                "backdrop-sepia": (t) => ({
                                    "--tw-backdrop-sepia": `sepia(${t})`,
                                    "@defaults backdrop-filter": {},
                                    "backdrop-filter": Fe,
                                }),
                            },
                            { values: e("backdropSepia") }
                        );
                    },
                    backdropFilter: ({ addDefaults: i, addUtilities: e }) => {
                        i("backdrop-filter", {
                            "--tw-backdrop-blur": " ",
                            "--tw-backdrop-brightness": " ",
                            "--tw-backdrop-contrast": " ",
                            "--tw-backdrop-grayscale": " ",
                            "--tw-backdrop-hue-rotate": " ",
                            "--tw-backdrop-invert": " ",
                            "--tw-backdrop-opacity": " ",
                            "--tw-backdrop-saturate": " ",
                            "--tw-backdrop-sepia": " ",
                        }),
                            e({
                                ".backdrop-filter": {
                                    "@defaults backdrop-filter": {},
                                    "backdrop-filter": Fe,
                                },
                                ".backdrop-filter-none": {
                                    "backdrop-filter": "none",
                                },
                            });
                    },
                    transitionProperty: ({ matchUtilities: i, theme: e }) => {
                        let t = e("transitionTimingFunction.DEFAULT"),
                            r = e("transitionDuration.DEFAULT");
                        i(
                            {
                                transition: (n) => ({
                                    "transition-property": n,
                                    ...(n === "none"
                                        ? {}
                                        : {
                                              "transition-timing-function": t,
                                              "transition-duration": r,
                                          }),
                                }),
                            },
                            { values: e("transitionProperty") }
                        );
                    },
                    transitionDelay: P("transitionDelay", [
                        ["delay", ["transitionDelay"]],
                    ]),
                    transitionDuration: P(
                        "transitionDuration",
                        [["duration", ["transitionDuration"]]],
                        { filterDefault: !0 }
                    ),
                    transitionTimingFunction: P(
                        "transitionTimingFunction",
                        [["ease", ["transitionTimingFunction"]]],
                        { filterDefault: !0 }
                    ),
                    willChange: P("willChange", [
                        ["will-change", ["will-change"]],
                    ]),
                    content: P("content", [
                        [
                            "content",
                            ["--tw-content", ["content", "var(--tw-content)"]],
                        ],
                    ]),
                });
        });
    function bC(i) {
        if (i === void 0) return !1;
        if (i === "true" || i === "1") return !0;
        if (i === "false" || i === "0") return !1;
        if (i === "*") return !0;
        let e = i.split(",").map((t) => t.split(":")[0]);
        return e.includes("-tailwindcss") ? !1 : !!e.includes("tailwindcss");
    }
    var Pe,
        wd,
        bd,
        gn,
        Xa,
        He,
        Kr,
        ot = C(() => {
            l();
            Ya();
            (Pe =
                typeof m != "undefined"
                    ? {
                          NODE_ENV: "production",
                          DEBUG: bC(m.env.DEBUG),
                          ENGINE: Ja.tailwindcss.engine,
                      }
                    : {
                          NODE_ENV: "production",
                          DEBUG: !1,
                          ENGINE: Ja.tailwindcss.engine,
                      }),
                (wd = new Map()),
                (bd = new Map()),
                (gn = new Map()),
                (Xa = new Map()),
                (He = new String("*")),
                (Kr = Symbol("__NONE__"));
        });
    function Bt(i) {
        let e = [],
            t = !1;
        for (let r = 0; r < i.length; r++) {
            let n = i[r];
            if (n === ":" && !t && e.length === 0) return !1;
            if (
                (vC.has(n) && i[r - 1] !== "\\" && (t = !t),
                !t && i[r - 1] !== "\\")
            ) {
                if (vd.has(n)) e.push(n);
                else if (xd.has(n)) {
                    let a = xd.get(n);
                    if (e.length <= 0 || e.pop() !== a) return !1;
                }
            }
        }
        return !(e.length > 0);
    }
    var vd,
        xd,
        vC,
        Ka = C(() => {
            l();
            (vd = new Map([
                ["{", "}"],
                ["[", "]"],
                ["(", ")"],
            ])),
                (xd = new Map(
                    Array.from(vd.entries()).map(([i, e]) => [e, i])
                )),
                (vC = new Set(['"', "'", "`"]));
        });
    function Ft(i) {
        let [e] = kd(i);
        return (
            e.forEach(([t, r]) => t.removeChild(r)),
            i.nodes.push(...e.map(([, t]) => t)),
            i
        );
    }
    function kd(i) {
        let e = [],
            t = null;
        for (let r of i.nodes)
            if (r.type === "combinator")
                (e = e.filter(([, n]) => eo(n).includes("jumpable"))),
                    (t = null);
            else if (r.type === "pseudo") {
                xC(r)
                    ? ((t = r), e.push([i, r, null]))
                    : t && kC(r, t)
                    ? e.push([i, r, t])
                    : (t = null);
                for (let n of r.nodes ?? []) {
                    let [a, s] = kd(n);
                    (t = s || t), e.push(...a);
                }
            }
        return [e, t];
    }
    function Sd(i) {
        return i.value.startsWith("::") || Za[i.value] !== void 0;
    }
    function xC(i) {
        return Sd(i) && eo(i).includes("terminal");
    }
    function kC(i, e) {
        return i.type !== "pseudo" || Sd(i) ? !1 : eo(e).includes("actionable");
    }
    function eo(i) {
        return Za[i.value] ?? Za.__default__;
    }
    var Za,
        yn = C(() => {
            l();
            Za = {
                "::after": ["terminal", "jumpable"],
                "::backdrop": ["terminal", "jumpable"],
                "::before": ["terminal", "jumpable"],
                "::cue": ["terminal"],
                "::cue-region": ["terminal"],
                "::first-letter": ["terminal", "jumpable"],
                "::first-line": ["terminal", "jumpable"],
                "::grammar-error": ["terminal"],
                "::marker": ["terminal", "jumpable"],
                "::part": ["terminal", "actionable"],
                "::placeholder": ["terminal", "jumpable"],
                "::selection": ["terminal", "jumpable"],
                "::slotted": ["terminal"],
                "::spelling-error": ["terminal"],
                "::target-text": ["terminal"],
                "::file-selector-button": ["terminal", "actionable"],
                "::deep": ["actionable"],
                "::v-deep": ["actionable"],
                "::ng-deep": ["actionable"],
                ":after": ["terminal", "jumpable"],
                ":before": ["terminal", "jumpable"],
                ":first-letter": ["terminal", "jumpable"],
                ":first-line": ["terminal", "jumpable"],
                __default__: ["terminal", "actionable"],
            };
        });
    function Nt(i, { context: e, candidate: t }) {
        let r = e?.tailwindConfig.prefix ?? "",
            n = i.map((s) => {
                let o = (0, Ne.default)().astSync(s.format);
                return { ...s, ast: s.respectPrefix ? Rt(r, o) : o };
            }),
            a = Ne.default.root({
                nodes: [
                    Ne.default.selector({
                        nodes: [Ne.default.className({ value: ce(t) })],
                    }),
                ],
            });
        for (let { ast: s } of n)
            ([a, s] = CC(a, s)),
                s.walkNesting((o) => o.replaceWith(...a.nodes[0].nodes)),
                (a = s);
        return a;
    }
    function Ad(i) {
        let e = [];
        for (; i.prev() && i.prev().type !== "combinator"; ) i = i.prev();
        for (; i && i.type !== "combinator"; ) e.push(i), (i = i.next());
        return e;
    }
    function SC(i) {
        return (
            i.sort((e, t) =>
                e.type === "tag" && t.type === "class"
                    ? -1
                    : e.type === "class" && t.type === "tag"
                    ? 1
                    : e.type === "class" &&
                      t.type === "pseudo" &&
                      t.value.startsWith("::")
                    ? -1
                    : e.type === "pseudo" &&
                      e.value.startsWith("::") &&
                      t.type === "class"
                    ? 1
                    : i.index(e) - i.index(t)
            ),
            i
        );
    }
    function ro(i, e) {
        let t = !1;
        i.walk((r) => {
            if (r.type === "class" && r.value === e) return (t = !0), !1;
        }),
            t || i.remove();
    }
    function wn(i, e, { context: t, candidate: r, base: n }) {
        let a = t?.tailwindConfig?.separator ?? ":";
        n = n ?? r.split(new RegExp(`\\${a}(?![^[]*\\])`)).pop();
        let s = (0, Ne.default)().astSync(i);
        s.walkClasses((f) => {
            f.raws &&
                f.value.includes(n) &&
                (f.raws.value = ce((0, Cd.default)(f.raws.value)));
        }),
            s.each((f) => ro(f, n));
        let o = Array.isArray(e) ? Nt(e, { context: t, candidate: r }) : e;
        if (o === null) return s.toString();
        let u = Ne.default.comment({ value: "/*__simple__*/" }),
            c = Ne.default.comment({ value: "/*__simple__*/" });
        return (
            s.walkClasses((f) => {
                if (f.value !== n) return;
                let p = f.parent,
                    d = o.nodes[0].nodes;
                if (p.nodes.length === 1) {
                    f.replaceWith(...d);
                    return;
                }
                let h = Ad(f);
                p.insertBefore(h[0], u), p.insertAfter(h[h.length - 1], c);
                for (let x of d) p.insertBefore(h[0], x.clone());
                f.remove(), (h = Ad(u));
                let y = p.index(u);
                p.nodes.splice(
                    y,
                    h.length,
                    ...SC(Ne.default.selector({ nodes: h })).nodes
                ),
                    u.remove(),
                    c.remove();
            }),
            s.walkPseudos((f) => {
                f.value === to && f.replaceWith(f.nodes);
            }),
            s.each((f) => Ft(f)),
            s.toString()
        );
    }
    function CC(i, e) {
        let t = [];
        return (
            i.walkPseudos((r) => {
                r.value === to &&
                    t.push({ pseudo: r, value: r.nodes[0].toString() });
            }),
            e.walkPseudos((r) => {
                if (r.value !== to) return;
                let n = r.nodes[0].toString(),
                    a = t.find((c) => c.value === n);
                if (!a) return;
                let s = [],
                    o = r.next();
                for (; o && o.type !== "combinator"; )
                    s.push(o), (o = o.next());
                let u = o;
                a.pseudo.parent.insertAfter(
                    a.pseudo,
                    Ne.default.selector({ nodes: s.map((c) => c.clone()) })
                ),
                    r.remove(),
                    s.forEach((c) => c.remove()),
                    u && u.type === "combinator" && u.remove();
            }),
            [i, e]
        );
    }
    var Ne,
        Cd,
        to,
        io = C(() => {
            l();
            (Ne = K(Me())), (Cd = K(Yi()));
            Mt();
            un();
            yn();
            to = ":merge";
        });
    function bn(i, e) {
        let t = (0, no.default)().astSync(i);
        return (
            t.each((r) => {
                (r.nodes[0].type === "pseudo" &&
                    r.nodes[0].value === ":is" &&
                    r.nodes.every((a) => a.type !== "combinator")) ||
                    (r.nodes = [
                        no.default.pseudo({ value: ":is", nodes: [r.clone()] }),
                    ]),
                    Ft(r);
            }),
            `${e} ${t.toString()}`
        );
    }
    var no,
        so = C(() => {
            l();
            no = K(Me());
            yn();
        });
    function ao(i) {
        return AC.transformSync(i);
    }
    function* _C(i) {
        let e = 1 / 0;
        for (; e >= 0; ) {
            let t,
                r = !1;
            if (e === 1 / 0 && i.endsWith("]")) {
                let s = i.indexOf("[");
                i[s - 1] === "-"
                    ? (t = s - 1)
                    : i[s - 1] === "/"
                    ? ((t = s - 1), (r = !0))
                    : (t = -1);
            } else
                e === 1 / 0 && i.includes("/")
                    ? ((t = i.lastIndexOf("/")), (r = !0))
                    : (t = i.lastIndexOf("-", e));
            if (t < 0) break;
            let n = i.slice(0, t),
                a = i.slice(r ? t : t + 1);
            (e = t - 1), !(n === "" || a === "/") && (yield [n, a]);
        }
    }
    function EC(i, e) {
        if (i.length === 0 || e.tailwindConfig.prefix === "") return i;
        for (let t of i) {
            let [r] = t;
            if (r.options.respectPrefix) {
                let n = z.root({ nodes: [t[1].clone()] }),
                    a = t[1].raws.tailwind.classCandidate;
                n.walkRules((s) => {
                    let o = a.startsWith("-");
                    s.selector = Rt(e.tailwindConfig.prefix, s.selector, o);
                }),
                    (t[1] = n.nodes[0]);
            }
        }
        return i;
    }
    function OC(i, e) {
        if (i.length === 0) return i;
        let t = [];
        for (let [r, n] of i) {
            let a = z.root({ nodes: [n.clone()] });
            a.walkRules((s) => {
                let o = (0, vn.default)().astSync(s.selector);
                o.each((u) => ro(u, e)),
                    Wu(o, (u) => (u === e ? `!${u}` : u)),
                    (s.selector = o.toString()),
                    s.walkDecls((u) => (u.important = !0));
            }),
                t.push([{ ...r, important: !0 }, a.nodes[0]]);
        }
        return t;
    }
    function TC(i, e, t) {
        if (e.length === 0) return e;
        let r = { modifier: null, value: Kr };
        {
            let [n, ...a] = le(i, "/");
            if (
                (a.length > 1 &&
                    ((n = n + "/" + a.slice(0, -1).join("/")),
                    (a = a.slice(-1))),
                a.length &&
                    !t.variantMap.has(i) &&
                    ((i = n),
                    (r.modifier = a[0]),
                    !J(t.tailwindConfig, "generalizedModifiers")))
            )
                return [];
        }
        if (i.endsWith("]") && !i.startsWith("[")) {
            let n = /(.)(-?)\[(.*)\]/g.exec(i);
            if (n) {
                let [, a, s, o] = n;
                if (a === "@" && s === "-") return [];
                if (a !== "@" && s === "") return [];
                (i = i.replace(`${s}[${o}]`, "")), (r.value = o);
            }
        }
        if (lo(i) && !t.variantMap.has(i)) {
            let n = t.offsets.recordVariant(i),
                a = U(i.slice(1, -1)),
                s = le(a, ",");
            if (s.length > 1) return [];
            if (!s.every(An)) return [];
            let o = s.map((u, c) => [
                t.offsets.applyParallelOffset(n, c),
                Zr(u.trim()),
            ]);
            t.variantMap.set(i, o);
        }
        if (t.variantMap.has(i)) {
            let n = lo(i),
                a = t.variantOptions.get(i)?.[Jr] ?? {},
                s = t.variantMap.get(i).slice(),
                o = [],
                u = (() => !(n || a.respectPrefix === !1))();
            for (let [c, f] of e) {
                if (c.layer === "user") continue;
                let p = z.root({ nodes: [f.clone()] });
                for (let [d, h, y] of s) {
                    let b = function () {
                            x.raws.neededBackup ||
                                ((x.raws.neededBackup = !0),
                                x.walkRules(
                                    (E) =>
                                        (E.raws.originalSelector = E.selector)
                                ));
                        },
                        k = function (E) {
                            return (
                                b(),
                                x.each((I) => {
                                    I.type === "rule" &&
                                        (I.selectors = I.selectors.map((B) =>
                                            E({
                                                get className() {
                                                    return ao(B);
                                                },
                                                selector: B,
                                            })
                                        ));
                                }),
                                x
                            );
                        },
                        x = (y ?? p).clone(),
                        w = [],
                        S = h({
                            get container() {
                                return b(), x;
                            },
                            separator: t.tailwindConfig.separator,
                            modifySelectors: k,
                            wrap(E) {
                                let I = x.nodes;
                                x.removeAll(), E.append(I), x.append(E);
                            },
                            format(E) {
                                w.push({ format: E, respectPrefix: u });
                            },
                            args: r,
                        });
                    if (Array.isArray(S)) {
                        for (let [E, I] of S.entries())
                            s.push([
                                t.offsets.applyParallelOffset(d, E),
                                I,
                                x.clone(),
                            ]);
                        continue;
                    }
                    if (
                        (typeof S == "string" &&
                            w.push({ format: S, respectPrefix: u }),
                        S === null)
                    )
                        continue;
                    x.raws.neededBackup &&
                        (delete x.raws.neededBackup,
                        x.walkRules((E) => {
                            let I = E.raws.originalSelector;
                            if (
                                !I ||
                                (delete E.raws.originalSelector,
                                I === E.selector)
                            )
                                return;
                            let B = E.selector,
                                q = (0, vn.default)((X) => {
                                    X.walkClasses((ae) => {
                                        ae.value = `${i}${t.tailwindConfig.separator}${ae.value}`;
                                    });
                                }).processSync(I);
                            w.push({
                                format: B.replace(q, "&"),
                                respectPrefix: u,
                            }),
                                (E.selector = I);
                        })),
                        (x.nodes[0].raws.tailwind = {
                            ...x.nodes[0].raws.tailwind,
                            parentLayer: c.layer,
                        });
                    let _ = [
                        {
                            ...c,
                            sort: t.offsets.applyVariantOffset(
                                c.sort,
                                d,
                                Object.assign(r, t.variantOptions.get(i))
                            ),
                            collectedFormats: (c.collectedFormats ?? []).concat(
                                w
                            ),
                        },
                        x.nodes[0],
                    ];
                    o.push(_);
                }
            }
            return o;
        }
        return [];
    }
    function oo(i, e, t = {}) {
        return !ie(i) && !Array.isArray(i)
            ? [[i], t]
            : Array.isArray(i)
            ? oo(i[0], e, i[1])
            : (e.has(i) || e.set(i, qt(i)), [e.get(i), t]);
    }
    function DC(i) {
        return PC.test(i);
    }
    function IC(i) {
        if (!i.includes("://")) return !1;
        try {
            let e = new URL(i);
            return e.scheme !== "" && e.host !== "";
        } catch (e) {
            return !1;
        }
    }
    function _d(i) {
        let e = !0;
        return (
            i.walkDecls((t) => {
                if (!Ed(t.prop, t.value)) return (e = !1), !1;
            }),
            e
        );
    }
    function Ed(i, e) {
        if (IC(`${i}:${e}`)) return !1;
        try {
            return z.parse(`a{${i}:${e}}`).toResult(), !0;
        } catch (t) {
            return !1;
        }
    }
    function qC(i, e) {
        let [, t, r] = i.match(/^\[([a-zA-Z0-9-_]+):(\S+)\]$/) ?? [];
        if (r === void 0 || !DC(t) || !Bt(r)) return null;
        let n = U(r);
        return Ed(t, n)
            ? [
                  [
                      {
                          sort: e.offsets.arbitraryProperty(),
                          layer: "utilities",
                      },
                      () => ({ [Wa(i)]: { [t]: n } }),
                  ],
              ]
            : null;
    }
    function* RC(i, e) {
        e.candidateRuleMap.has(i) &&
            (yield [e.candidateRuleMap.get(i), "DEFAULT"]),
            yield* (function* (o) {
                o !== null && (yield [o, "DEFAULT"]);
            })(qC(i, e));
        let t = i,
            r = !1,
            n = e.tailwindConfig.prefix,
            a = n.length,
            s = t.startsWith(n) || t.startsWith(`-${n}`);
        t[a] === "-" && s && ((r = !0), (t = n + t.slice(a + 1))),
            r &&
                e.candidateRuleMap.has(t) &&
                (yield [e.candidateRuleMap.get(t), "-DEFAULT"]);
        for (let [o, u] of _C(t))
            e.candidateRuleMap.has(o) &&
                (yield [e.candidateRuleMap.get(o), r ? `-${u}` : u]);
    }
    function MC(i, e) {
        return i === He ? [He] : le(i, e);
    }
    function* BC(i, e) {
        for (let t of i)
            (t[1].raws.tailwind = {
                ...t[1].raws.tailwind,
                classCandidate: e,
                preserveSource: t[0].options?.preserveSource ?? !1,
            }),
                yield t;
    }
    function* xn(i, e, t = i) {
        let r = e.tailwindConfig.separator,
            [n, ...a] = MC(i, r).reverse(),
            s = !1;
        if (
            (n.startsWith("!") && ((s = !0), (n = n.slice(1))),
            J(e.tailwindConfig, "variantGrouping") &&
                n.startsWith("(") &&
                n.endsWith(")"))
        ) {
            let o = a.slice().reverse().join(r);
            for (let u of le(n.slice(1, -1), ",")) yield* xn(o + r + u, e, t);
        }
        for (let o of RC(n, e)) {
            let u = [],
                c = new Map(),
                [f, p] = o,
                d = f.length === 1;
            for (let [h, y] of f) {
                let x = [];
                if (typeof y == "function")
                    for (let w of [].concat(y(p, { isOnlyPlugin: d }))) {
                        let [b, k] = oo(w, e.postCssNodeCache);
                        for (let S of b)
                            x.push([
                                { ...h, options: { ...h.options, ...k } },
                                S,
                            ]);
                    }
                else if (p === "DEFAULT" || p === "-DEFAULT") {
                    let w = y,
                        [b, k] = oo(w, e.postCssNodeCache);
                    for (let S of b)
                        x.push([{ ...h, options: { ...h.options, ...k } }, S]);
                }
                if (x.length > 0) {
                    let w = Array.from(
                        ps(
                            h.options?.types ?? [],
                            p,
                            h.options ?? {},
                            e.tailwindConfig
                        )
                    ).map(([b, k]) => k);
                    w.length > 0 && c.set(x, w), u.push(x);
                }
            }
            if (lo(p)) {
                if (u.length > 1) {
                    let x = function (b) {
                            return b.length === 1
                                ? b[0]
                                : b.find((k) => {
                                      let S = c.get(k);
                                      return k.some(([{ options: _ }, E]) =>
                                          _d(E)
                                              ? _.types.some(
                                                    ({
                                                        type: I,
                                                        preferOnConflict: B,
                                                    }) => S.includes(I) && B
                                                )
                                              : !1
                                      );
                                  });
                        },
                        [h, y] = u.reduce(
                            (b, k) => (
                                k.some(([{ options: _ }]) =>
                                    _.types.some(({ type: E }) => E === "any")
                                )
                                    ? b[0].push(k)
                                    : b[1].push(k),
                                b
                            ),
                            [[], []]
                        ),
                        w = x(y) ?? x(h);
                    if (w) u = [w];
                    else {
                        let b = u.map((S) => new Set([...(c.get(S) ?? [])]));
                        for (let S of b)
                            for (let _ of S) {
                                let E = !1;
                                for (let I of b)
                                    S !== I &&
                                        I.has(_) &&
                                        (I.delete(_), (E = !0));
                                E && S.delete(_);
                            }
                        let k = [];
                        for (let [S, _] of b.entries())
                            for (let E of _) {
                                let I = u[S].map(([, B]) => B)
                                    .flat()
                                    .map((B) =>
                                        B.toString()
                                            .split(
                                                `
`
                                            )
                                            .slice(1, -1)
                                            .map((q) => q.trim())
                                            .map((q) => `      ${q}`).join(`
`)
                                    ).join(`

`);
                                k.push(
                                    `  Use \`${i.replace(
                                        "[",
                                        `[${E}:`
                                    )}\` for \`${I.trim()}\``
                                );
                                break;
                            }
                        F.warn([
                            `The class \`${i}\` is ambiguous and matches multiple utilities.`,
                            ...k,
                            `If this is content and not a class, replace it with \`${i
                                .replace("[", "&lsqb;")
                                .replace(
                                    "]",
                                    "&rsqb;"
                                )}\` to silence this warning.`,
                        ]);
                        continue;
                    }
                }
                u = u.map((h) => h.filter((y) => _d(y[1])));
            }
            (u = u.flat()),
                (u = Array.from(BC(u, n))),
                (u = EC(u, e)),
                s && (u = OC(u, n));
            for (let h of a) u = TC(h, u, e);
            for (let h of u)
                (h[1].raws.tailwind = { ...h[1].raws.tailwind, candidate: i }),
                    (h = FC(h, { context: e, candidate: i, original: t })),
                    h !== null && (yield h);
        }
    }
    function FC(i, { context: e, candidate: t, original: r }) {
        if (!i[0].collectedFormats) return i;
        let n = !0,
            a;
        try {
            a = Nt(i[0].collectedFormats, { context: e, candidate: t });
        } catch {
            return null;
        }
        let s = z.root({ nodes: [i[1].clone()] });
        return (
            s.walkRules((o) => {
                if (!kn(o))
                    try {
                        o.selector = wn(o.selector, a, {
                            candidate: r,
                            context: e,
                        });
                    } catch {
                        return (n = !1), !1;
                    }
            }),
            n ? ((i[1] = s.nodes[0]), i) : null
        );
    }
    function kn(i) {
        return (
            i.parent &&
            i.parent.type === "atrule" &&
            i.parent.name === "keyframes"
        );
    }
    function NC(i) {
        if (i === !0)
            return (e) => {
                kn(e) ||
                    e.walkDecls((t) => {
                        t.parent.type === "rule" &&
                            !kn(t.parent) &&
                            (t.important = !0);
                    });
            };
        if (typeof i == "string")
            return (e) => {
                kn(e) || (e.selectors = e.selectors.map((t) => bn(t, i)));
            };
    }
    function Sn(i, e) {
        let t = [],
            r = NC(e.tailwindConfig.important);
        for (let n of i) {
            if (e.notClassCache.has(n)) continue;
            if (e.candidateRuleCache.has(n)) {
                t = t.concat(Array.from(e.candidateRuleCache.get(n)));
                continue;
            }
            let a = Array.from(xn(n, e));
            if (a.length === 0) {
                e.notClassCache.add(n);
                continue;
            }
            e.classCache.set(n, a);
            let s = e.candidateRuleCache.get(n) ?? new Set();
            e.candidateRuleCache.set(n, s);
            for (let o of a) {
                let [{ sort: u, options: c }, f] = o;
                if (c.respectImportant && r) {
                    let d = z.root({ nodes: [f.clone()] });
                    d.walkRules(r), (f = d.nodes[0]);
                }
                let p = [u, f];
                s.add(p), e.ruleCache.add(p), t.push(p);
            }
        }
        return t;
    }
    function lo(i) {
        return i.startsWith("[") && i.endsWith("]");
    }
    var vn,
        AC,
        PC,
        Cn = C(() => {
            l();
            nt();
            vn = K(Me());
            Ua();
            xt();
            un();
            cr();
            Ee();
            ot();
            io();
            Ga();
            fr();
            Xr();
            Ka();
            or();
            De();
            so();
            AC = (0, vn.default)(
                (i) =>
                    i.first.filter(({ type: e }) => e === "class").pop().value
            );
            PC = /^[a-z_-]/;
        });
    var Od,
        Td = C(() => {
            l();
            Od = {};
        });
    function LC(i) {
        try {
            return Od.createHash("md5").update(i, "utf-8").digest("binary");
        } catch (e) {
            return "";
        }
    }
    function Pd(i, e) {
        let t = e.toString();
        if (!t.includes("@tailwind")) return !1;
        let r = Xa.get(i),
            n = LC(t),
            a = r !== n;
        return Xa.set(i, n), a;
    }
    var Dd = C(() => {
        l();
        Td();
        ot();
    });
    function _n(i) {
        return (i > 0n) - (i < 0n);
    }
    var Id = C(() => {
        l();
    });
    function qd(i, e) {
        let t = 0n,
            r = 0n;
        for (let [n, a] of e) i & n && ((t = t | n), (r = r | a));
        return (i & ~t) | r;
    }
    var Rd = C(() => {
        l();
    });
    function Md(i) {
        let e = null;
        for (let t of i) (e = e ?? t), (e = e > t ? e : t);
        return e;
    }
    function $C(i, e) {
        let t = i.length,
            r = e.length,
            n = t < r ? t : r;
        for (let a = 0; a < n; a++) {
            let s = i.charCodeAt(a) - e.charCodeAt(a);
            if (s !== 0) return s;
        }
        return t - r;
    }
    var uo,
        Bd = C(() => {
            l();
            Id();
            Rd();
            uo = class {
                constructor() {
                    (this.offsets = {
                        defaults: 0n,
                        base: 0n,
                        components: 0n,
                        utilities: 0n,
                        variants: 0n,
                        user: 0n,
                    }),
                        (this.layerPositions = {
                            defaults: 0n,
                            base: 1n,
                            components: 2n,
                            utilities: 3n,
                            user: 4n,
                            variants: 5n,
                        }),
                        (this.reservedVariantBits = 0n),
                        (this.variantOffsets = new Map());
                }
                create(e) {
                    return {
                        layer: e,
                        parentLayer: e,
                        arbitrary: 0n,
                        variants: 0n,
                        parallelIndex: 0n,
                        index: this.offsets[e]++,
                        options: [],
                    };
                }
                arbitraryProperty() {
                    return { ...this.create("utilities"), arbitrary: 1n };
                }
                forVariant(e, t = 0) {
                    let r = this.variantOffsets.get(e);
                    if (r === void 0)
                        throw new Error(
                            `Cannot find offset for unknown variant ${e}`
                        );
                    return {
                        ...this.create("variants"),
                        variants: r << BigInt(t),
                    };
                }
                applyVariantOffset(e, t, r) {
                    return (
                        (r.variant = t.variants),
                        {
                            ...e,
                            layer: "variants",
                            parentLayer:
                                e.layer === "variants"
                                    ? e.parentLayer
                                    : e.layer,
                            variants: e.variants | t.variants,
                            options: r.sort
                                ? [].concat(r, e.options)
                                : e.options,
                            parallelIndex: Md([
                                e.parallelIndex,
                                t.parallelIndex,
                            ]),
                        }
                    );
                }
                applyParallelOffset(e, t) {
                    return { ...e, parallelIndex: BigInt(t) };
                }
                recordVariants(e, t) {
                    for (let r of e) this.recordVariant(r, t(r));
                }
                recordVariant(e, t = 1) {
                    return (
                        this.variantOffsets.set(
                            e,
                            1n << this.reservedVariantBits
                        ),
                        (this.reservedVariantBits += BigInt(t)),
                        {
                            ...this.create("variants"),
                            variants: this.variantOffsets.get(e),
                        }
                    );
                }
                compare(e, t) {
                    if (e.layer !== t.layer)
                        return (
                            this.layerPositions[e.layer] -
                            this.layerPositions[t.layer]
                        );
                    if (e.parentLayer !== t.parentLayer)
                        return (
                            this.layerPositions[e.parentLayer] -
                            this.layerPositions[t.parentLayer]
                        );
                    for (let r of e.options)
                        for (let n of t.options) {
                            if (r.id !== n.id || !r.sort || !n.sort) continue;
                            let a = Md([r.variant, n.variant]) ?? 0n,
                                s = ~(a | (a - 1n)),
                                o = e.variants & s,
                                u = t.variants & s;
                            if (o !== u) continue;
                            let c = r.sort(
                                { value: r.value, modifier: r.modifier },
                                { value: n.value, modifier: n.modifier }
                            );
                            if (c !== 0) return c;
                        }
                    return e.variants !== t.variants
                        ? e.variants - t.variants
                        : e.parallelIndex !== t.parallelIndex
                        ? e.parallelIndex - t.parallelIndex
                        : e.arbitrary !== t.arbitrary
                        ? e.arbitrary - t.arbitrary
                        : e.index - t.index;
                }
                recalculateVariantOffsets() {
                    let e = Array.from(this.variantOffsets.entries())
                            .filter(([n]) => n.startsWith("["))
                            .sort(([n], [a]) => $C(n, a)),
                        t = e.map(([, n]) => n).sort((n, a) => _n(n - a));
                    return e
                        .map(([, n], a) => [n, t[a]])
                        .filter(([n, a]) => n !== a);
                }
                remapArbitraryVariantOffsets(e) {
                    let t = this.recalculateVariantOffsets();
                    return t.length === 0
                        ? e
                        : e.map((r) => {
                              let [n, a] = r;
                              return (
                                  (n = { ...n, variants: qd(n.variants, t) }),
                                  [n, a]
                              );
                          });
                }
                sort(e) {
                    return (
                        (e = this.remapArbitraryVariantOffsets(e)),
                        e.sort(([t], [r]) => _n(this.compare(t, r)))
                    );
                }
            };
        });
    function ho(i, e) {
        let t = i.tailwindConfig.prefix;
        return typeof t == "function" ? t(e) : t + e;
    }
    function Nd({ type: i = "any", ...e }) {
        let t = [].concat(i);
        return {
            ...e,
            types: t.map((r) =>
                Array.isArray(r)
                    ? { type: r[0], ...r[1] }
                    : { type: r, preferOnConflict: !1 }
            ),
        };
    }
    function jC(i) {
        let e = [],
            t = "",
            r = 0;
        for (let n = 0; n < i.length; n++) {
            let a = i[n];
            if (a === "\\") t += "\\" + i[++n];
            else if (a === "{") ++r, e.push(t.trim()), (t = "");
            else if (a === "}") {
                if (--r < 0) throw new Error("Your { and } are unbalanced.");
                e.push(t.trim()), (t = "");
            } else t += a;
        }
        return (
            t.length > 0 && e.push(t.trim()), (e = e.filter((n) => n !== "")), e
        );
    }
    function zC(i, e, { before: t = [] } = {}) {
        if (((t = [].concat(t)), t.length <= 0)) {
            i.push(e);
            return;
        }
        let r = i.length - 1;
        for (let n of t) {
            let a = i.indexOf(n);
            a !== -1 && (r = Math.min(r, a));
        }
        i.splice(r, 0, e);
    }
    function Ld(i) {
        return Array.isArray(i)
            ? i.flatMap((e) => (!Array.isArray(e) && !ie(e) ? e : qt(e)))
            : Ld([i]);
    }
    function $d(i, e) {
        return (0, fo.default)((r) => {
            let n = [];
            return (
                e && e(r),
                r.walkClasses((a) => {
                    n.push(a.value);
                }),
                n
            );
        }).transformSync(i);
    }
    function VC(i, e = { containsNonOnDemandable: !1 }, t = 0) {
        let r = [];
        if (i.type === "rule") {
            let n = function (a) {
                a.walkPseudos((s) => {
                    s.value === ":not" && s.remove();
                });
            };
            for (let a of i.selectors) {
                let s = $d(a, n);
                s.length === 0 && (e.containsNonOnDemandable = !0);
                for (let o of s) r.push(o);
            }
        } else
            i.type === "atrule" &&
                i.walkRules((n) => {
                    for (let a of n.selectors.flatMap((s) => $d(s))) r.push(a);
                });
        return t === 0 ? [e.containsNonOnDemandable || r.length === 0, r] : r;
    }
    function En(i) {
        return Ld(i).flatMap((e) => {
            let t = new Map(),
                [r, n] = VC(e);
            return (
                r && n.unshift(He),
                n.map((a) => (t.has(e) || t.set(e, e), [a, t.get(e)]))
            );
        });
    }
    function An(i) {
        return i.startsWith("@") || i.includes("&");
    }
    function Zr(i) {
        i = i
            .replace(/\n+/g, "")
            .replace(/\s{1,}/g, " ")
            .trim();
        let e = jC(i)
            .map((t) => {
                if (!t.startsWith("@")) return ({ format: a }) => a(t);
                let [, r, n] = /@(\S*)( .+|[({].*)?/g.exec(t);
                return ({ wrap: a }) =>
                    a(z.atRule({ name: r, params: n?.trim() ?? "" }));
            })
            .reverse();
        return (t) => {
            for (let r of e) r(t);
        };
    }
    function UC(
        i,
        e,
        { variantList: t, variantMap: r, offsets: n, classList: a }
    ) {
        function s(d, h) {
            return d ? (0, Fd.default)(i, d, h) : i;
        }
        function o(d) {
            return Rt(i.prefix, d);
        }
        function u(d, h) {
            return d === He
                ? He
                : h.respectPrefix
                ? e.tailwindConfig.prefix + d
                : d;
        }
        function c(d, h, y = {}) {
            let x = Ke(d),
                w = s(["theme", ...x], h);
            return Ge(x[0])(w, y);
        }
        let f = 0,
            p = {
                postcss: z,
                prefix: o,
                e: ce,
                config: s,
                theme: c,
                corePlugins: (d) =>
                    Array.isArray(i.corePlugins)
                        ? i.corePlugins.includes(d)
                        : s(["corePlugins", d], !0),
                variants: () => [],
                addBase(d) {
                    for (let [h, y] of En(d)) {
                        let x = u(h, {}),
                            w = n.create("base");
                        e.candidateRuleMap.has(x) ||
                            e.candidateRuleMap.set(x, []),
                            e.candidateRuleMap
                                .get(x)
                                .push([{ sort: w, layer: "base" }, y]);
                    }
                },
                addDefaults(d, h) {
                    let y = { [`@defaults ${d}`]: h };
                    for (let [x, w] of En(y)) {
                        let b = u(x, {});
                        e.candidateRuleMap.has(b) ||
                            e.candidateRuleMap.set(b, []),
                            e.candidateRuleMap
                                .get(b)
                                .push([
                                    {
                                        sort: n.create("defaults"),
                                        layer: "defaults",
                                    },
                                    w,
                                ]);
                    }
                },
                addComponents(d, h) {
                    h = Object.assign(
                        {},
                        {
                            preserveSource: !1,
                            respectPrefix: !0,
                            respectImportant: !1,
                        },
                        Array.isArray(h) ? {} : h
                    );
                    for (let [x, w] of En(d)) {
                        let b = u(x, h);
                        a.add(b),
                            e.candidateRuleMap.has(b) ||
                                e.candidateRuleMap.set(b, []),
                            e.candidateRuleMap
                                .get(b)
                                .push([
                                    {
                                        sort: n.create("components"),
                                        layer: "components",
                                        options: h,
                                    },
                                    w,
                                ]);
                    }
                },
                addUtilities(d, h) {
                    h = Object.assign(
                        {},
                        {
                            preserveSource: !1,
                            respectPrefix: !0,
                            respectImportant: !0,
                        },
                        Array.isArray(h) ? {} : h
                    );
                    for (let [x, w] of En(d)) {
                        let b = u(x, h);
                        a.add(b),
                            e.candidateRuleMap.has(b) ||
                                e.candidateRuleMap.set(b, []),
                            e.candidateRuleMap
                                .get(b)
                                .push([
                                    {
                                        sort: n.create("utilities"),
                                        layer: "utilities",
                                        options: h,
                                    },
                                    w,
                                ]);
                    }
                },
                matchUtilities: function (d, h) {
                    h = Nd({
                        ...{
                            respectPrefix: !0,
                            respectImportant: !0,
                            modifiers: !1,
                        },
                        ...h,
                    });
                    let x = n.create("utilities");
                    for (let w in d) {
                        let S = function (E, { isOnlyPlugin: I }) {
                                let [B, q, X] = cs(h.types, E, h, i);
                                if (B === void 0) return [];
                                if (!h.types.some(({ type: $ }) => $ === q))
                                    if (I)
                                        F.warn([
                                            `Unnecessary typehint \`${q}\` in \`${w}-${E}\`.`,
                                            `You can safely update it to \`${w}-${E.replace(
                                                q + ":",
                                                ""
                                            )}\`.`,
                                        ]);
                                    else return [];
                                if (!Bt(B)) return [];
                                let ae = {
                                        get modifier() {
                                            return (
                                                h.modifiers ||
                                                    F.warn(
                                                        `modifier-used-without-options-for-${w}`,
                                                        [
                                                            "Your plugin must set `modifiers: true` in its options to support modifiers.",
                                                        ]
                                                    ),
                                                X
                                            );
                                        },
                                    },
                                    ge = J(i, "generalizedModifiers");
                                return []
                                    .concat(ge ? k(B, ae) : k(B))
                                    .filter(Boolean)
                                    .map(($) => ({ [fn(w, E)]: $ }));
                            },
                            b = u(w, h),
                            k = d[w];
                        a.add([b, h]);
                        let _ = [
                            { sort: x, layer: "utilities", options: h },
                            S,
                        ];
                        e.candidateRuleMap.has(b) ||
                            e.candidateRuleMap.set(b, []),
                            e.candidateRuleMap.get(b).push(_);
                    }
                },
                matchComponents: function (d, h) {
                    h = Nd({
                        ...{
                            respectPrefix: !0,
                            respectImportant: !1,
                            modifiers: !1,
                        },
                        ...h,
                    });
                    let x = n.create("components");
                    for (let w in d) {
                        let S = function (E, { isOnlyPlugin: I }) {
                                let [B, q, X] = cs(h.types, E, h, i);
                                if (B === void 0) return [];
                                if (!h.types.some(({ type: $ }) => $ === q))
                                    if (I)
                                        F.warn([
                                            `Unnecessary typehint \`${q}\` in \`${w}-${E}\`.`,
                                            `You can safely update it to \`${w}-${E.replace(
                                                q + ":",
                                                ""
                                            )}\`.`,
                                        ]);
                                    else return [];
                                if (!Bt(B)) return [];
                                let ae = {
                                        get modifier() {
                                            return (
                                                h.modifiers ||
                                                    F.warn(
                                                        `modifier-used-without-options-for-${w}`,
                                                        [
                                                            "Your plugin must set `modifiers: true` in its options to support modifiers.",
                                                        ]
                                                    ),
                                                X
                                            );
                                        },
                                    },
                                    ge = J(i, "generalizedModifiers");
                                return []
                                    .concat(ge ? k(B, ae) : k(B))
                                    .filter(Boolean)
                                    .map(($) => ({ [fn(w, E)]: $ }));
                            },
                            b = u(w, h),
                            k = d[w];
                        a.add([b, h]);
                        let _ = [
                            { sort: x, layer: "components", options: h },
                            S,
                        ];
                        e.candidateRuleMap.has(b) ||
                            e.candidateRuleMap.set(b, []),
                            e.candidateRuleMap.get(b).push(_);
                    }
                },
                addVariant(d, h, y = {}) {
                    (h = [].concat(h).map((x) => {
                        if (typeof x != "string")
                            return (w = {}) => {
                                let {
                                        args: b,
                                        modifySelectors: k,
                                        container: S,
                                        separator: _,
                                        wrap: E,
                                        format: I,
                                    } = w,
                                    B = x(
                                        Object.assign(
                                            {
                                                modifySelectors: k,
                                                container: S,
                                                separator: _,
                                            },
                                            y.type === co.MatchVariant && {
                                                args: b,
                                                wrap: E,
                                                format: I,
                                            }
                                        )
                                    );
                                if (typeof B == "string" && !An(B))
                                    throw new Error(
                                        `Your custom variant \`${d}\` has an invalid format string. Make sure it's an at-rule or contains a \`&\` placeholder.`
                                    );
                                return Array.isArray(B)
                                    ? B.filter((q) => typeof q == "string").map(
                                          (q) => Zr(q)
                                      )
                                    : B && typeof B == "string" && Zr(B)(w);
                            };
                        if (!An(x))
                            throw new Error(
                                `Your custom variant \`${d}\` has an invalid format string. Make sure it's an at-rule or contains a \`&\` placeholder.`
                            );
                        return Zr(x);
                    })),
                        zC(t, d, y),
                        r.set(d, h),
                        e.variantOptions.set(d, y);
                },
                matchVariant(d, h, y) {
                    let x = y?.id ?? ++f,
                        w = d === "@",
                        b = J(i, "generalizedModifiers");
                    for (let [S, _] of Object.entries(y?.values ?? {}))
                        S !== "DEFAULT" &&
                            p.addVariant(
                                w ? `${d}${S}` : `${d}-${S}`,
                                ({ args: E, container: I }) =>
                                    h(
                                        _,
                                        b
                                            ? {
                                                  modifier: E?.modifier,
                                                  container: I,
                                              }
                                            : { container: I }
                                    ),
                                {
                                    ...y,
                                    value: _,
                                    id: x,
                                    type: co.MatchVariant,
                                    variantInfo: po.Base,
                                }
                            );
                    let k = "DEFAULT" in (y?.values ?? {});
                    p.addVariant(
                        d,
                        ({ args: S, container: _ }) =>
                            S?.value === Kr && !k
                                ? null
                                : h(
                                      S?.value === Kr
                                          ? y.values.DEFAULT
                                          : S?.value ??
                                                (typeof S == "string" ? S : ""),
                                      b
                                          ? {
                                                modifier: S?.modifier,
                                                container: _,
                                            }
                                          : { container: _ }
                                  ),
                        {
                            ...y,
                            id: x,
                            type: co.MatchVariant,
                            variantInfo: po.Dynamic,
                        }
                    );
                },
            };
        return p;
    }
    function On(i) {
        return mo.has(i) || mo.set(i, new Map()), mo.get(i);
    }
    function jd(i, e) {
        let t = !1,
            r = new Map();
        for (let n of i) {
            if (!n) continue;
            let a = ws.parse(n),
                s = a.hash ? a.href.replace(a.hash, "") : a.href;
            s = a.search ? s.replace(a.search, "") : s;
            let o = te.statSync(decodeURIComponent(s), {
                throwIfNoEntry: !1,
            })?.mtimeMs;
            !o || ((!e.has(n) || o > e.get(n)) && (t = !0), r.set(n, o));
        }
        return [t, r];
    }
    function zd(i) {
        i.walkAtRules((e) => {
            ["responsive", "variants"].includes(e.name) &&
                (zd(e), e.before(e.nodes), e.remove());
        });
    }
    function WC(i) {
        let e = [];
        return (
            i.each((t) => {
                t.type === "atrule" &&
                    ["responsive", "variants"].includes(t.name) &&
                    ((t.name = "layer"), (t.params = "utilities"));
            }),
            i.walkAtRules("layer", (t) => {
                if ((zd(t), t.params === "base")) {
                    for (let r of t.nodes)
                        e.push(function ({ addBase: n }) {
                            n(r, { respectPrefix: !1 });
                        });
                    t.remove();
                } else if (t.params === "components") {
                    for (let r of t.nodes)
                        e.push(function ({ addComponents: n }) {
                            n(r, { respectPrefix: !1, preserveSource: !0 });
                        });
                    t.remove();
                } else if (t.params === "utilities") {
                    for (let r of t.nodes)
                        e.push(function ({ addUtilities: n }) {
                            n(r, { respectPrefix: !1, preserveSource: !0 });
                        });
                    t.remove();
                }
            }),
            e
        );
    }
    function GC(i, e) {
        let t = Object.entries({ ...pe, ...gd })
                .map(([o, u]) =>
                    i.tailwindConfig.corePlugins.includes(o) ? u : null
                )
                .filter(Boolean),
            r = i.tailwindConfig.plugins.map(
                (o) => (
                    o.__isOptionsFunction && (o = o()),
                    typeof o == "function" ? o : o.handler
                )
            ),
            n = WC(e),
            a = [
                pe.pseudoElementVariants,
                pe.pseudoClassVariants,
                pe.ariaVariants,
                pe.dataVariants,
            ],
            s = [
                pe.supportsVariants,
                pe.directionVariants,
                pe.reducedMotionVariants,
                pe.prefersContrastVariants,
                pe.darkVariants,
                pe.printVariant,
                pe.screenVariants,
                pe.orientationVariants,
            ];
        return [...t, ...a, ...r, ...s, ...n];
    }
    function HC(i, e) {
        let t = [],
            r = new Map();
        e.variantMap = r;
        let n = new uo();
        e.offsets = n;
        let a = new Set(),
            s = UC(e.tailwindConfig, e, {
                variantList: t,
                variantMap: r,
                offsets: n,
                classList: a,
            });
        for (let f of i)
            if (Array.isArray(f)) for (let p of f) p(s);
            else f?.(s);
        n.recordVariants(t, (f) => r.get(f).length);
        for (let [f, p] of r.entries())
            e.variantMap.set(
                f,
                p.map((d, h) => [n.forVariant(f, h), d])
            );
        let o = (e.tailwindConfig.safelist ?? []).filter(Boolean);
        if (o.length > 0) {
            let f = [];
            for (let p of o) {
                if (typeof p == "string") {
                    e.changedContent.push({ content: p, extension: "html" });
                    continue;
                }
                if (p instanceof RegExp) {
                    F.warn("root-regex", [
                        "Regular expressions in `safelist` work differently in Tailwind CSS v3.0.",
                        "Update your `safelist` configuration to eliminate this warning.",
                        "https://tailwindcss.com/docs/content-configuration#safelisting-classes",
                    ]);
                    continue;
                }
                f.push(p);
            }
            if (f.length > 0) {
                let p = new Map(),
                    d = e.tailwindConfig.prefix.length,
                    h = f.some((y) => y.pattern.source.includes("!"));
                for (let y of a) {
                    let x = Array.isArray(y)
                        ? (() => {
                              let [w, b] = y,
                                  S = Object.keys(b?.values ?? {}).map((_) =>
                                      Qr(w, _)
                                  );
                              return (
                                  b?.supportsNegativeValues &&
                                      ((S = [...S, ...S.map((_) => "-" + _)]),
                                      (S = [
                                          ...S,
                                          ...S.map(
                                              (_) =>
                                                  _.slice(0, d) +
                                                  "-" +
                                                  _.slice(d)
                                          ),
                                      ])),
                                  b.types.some(
                                      ({ type: _ }) => _ === "color"
                                  ) &&
                                      (S = [
                                          ...S,
                                          ...S.flatMap((_) =>
                                              Object.keys(
                                                  e.tailwindConfig.theme.opacity
                                              ).map((E) => `${_}/${E}`)
                                          ),
                                      ]),
                                  h &&
                                      b?.respectImportant &&
                                      (S = [...S, ...S.map((_) => "!" + _)]),
                                  S
                              );
                          })()
                        : [y];
                    for (let w of x)
                        for (let { pattern: b, variants: k = [] } of f)
                            if (
                                ((b.lastIndex = 0),
                                p.has(b) || p.set(b, 0),
                                !!b.test(w))
                            ) {
                                p.set(b, p.get(b) + 1),
                                    e.changedContent.push({
                                        content: w,
                                        extension: "html",
                                    });
                                for (let S of k)
                                    e.changedContent.push({
                                        content:
                                            S + e.tailwindConfig.separator + w,
                                        extension: "html",
                                    });
                            }
                }
                for (let [y, x] of p.entries())
                    x === 0 &&
                        F.warn([
                            `The safelist pattern \`${y}\` doesn't match any Tailwind CSS classes.`,
                            "Fix this pattern or remove it from your `safelist` configuration.",
                            "https://tailwindcss.com/docs/content-configuration#safelisting-classes",
                        ]);
            }
        }
        let u = [].concat(e.tailwindConfig.darkMode ?? "media")[1] ?? "dark",
            c = [ho(e, u), ho(e, "group"), ho(e, "peer")];
        (e.getClassOrder = function (p) {
            let d = [...p].sort((w, b) => (w === b ? 0 : w < b ? -1 : 1)),
                h = new Map(d.map((w) => [w, null])),
                y = Sn(new Set(d), e);
            y = e.offsets.sort(y);
            let x = BigInt(c.length);
            for (let [, w] of y) {
                let b = w.raws.tailwind.candidate;
                h.set(b, h.get(b) ?? x++);
            }
            return p.map((w) => {
                let b = h.get(w) ?? null,
                    k = c.indexOf(w);
                return b === null && k !== -1 && (b = BigInt(k)), [w, b];
            });
        }),
            (e.getClassList = function (p = {}) {
                let d = [];
                for (let h of a)
                    if (Array.isArray(h)) {
                        let [y, x] = h,
                            w = [],
                            b = Object.keys(x?.modifiers ?? {});
                        x?.types?.some(({ type: _ }) => _ === "color") &&
                            b.push(
                                ...Object.keys(
                                    e.tailwindConfig.theme.opacity ?? {}
                                )
                            );
                        let k = { modifiers: b },
                            S = p.includeMetadata && b.length > 0;
                        for (let [_, E] of Object.entries(x?.values ?? {})) {
                            if (E == null) continue;
                            let I = Qr(y, _);
                            if (
                                (d.push(S ? [I, k] : I),
                                x?.supportsNegativeValues && Xe(E))
                            ) {
                                let B = Qr(y, `-${_}`);
                                w.push(S ? [B, k] : B);
                            }
                        }
                        d.push(...w);
                    } else d.push(h);
                return d;
            }),
            (e.getVariants = function () {
                let p = [];
                for (let [d, h] of e.variantOptions.entries())
                    h.variantInfo !== po.Base &&
                        p.push({
                            name: d,
                            isArbitrary: h.type === Symbol.for("MATCH_VARIANT"),
                            values: Object.keys(h.values ?? {}),
                            hasDash: d !== "@",
                            selectors({ modifier: y, value: x } = {}) {
                                let w = "__TAILWIND_PLACEHOLDER__",
                                    b = z.rule({ selector: `.${w}` }),
                                    k = z.root({ nodes: [b.clone()] }),
                                    S = k.toString(),
                                    _ = (e.variantMap.get(d) ?? []).flatMap(
                                        ([$, oe]) => oe
                                    ),
                                    E = [];
                                for (let $ of _) {
                                    let oe = [],
                                        ai = {
                                            args: {
                                                modifier: y,
                                                value: h.values?.[x] ?? x,
                                            },
                                            separator:
                                                e.tailwindConfig.separator,
                                            modifySelectors(Ce) {
                                                return (
                                                    k.each((Jn) => {
                                                        Jn.type === "rule" &&
                                                            (Jn.selectors =
                                                                Jn.selectors.map(
                                                                    (lu) =>
                                                                        Ce({
                                                                            get className() {
                                                                                return ao(
                                                                                    lu
                                                                                );
                                                                            },
                                                                            selector:
                                                                                lu,
                                                                        })
                                                                ));
                                                    }),
                                                    k
                                                );
                                            },
                                            format(Ce) {
                                                oe.push(Ce);
                                            },
                                            wrap(Ce) {
                                                oe.push(
                                                    `@${Ce.name} ${Ce.params} { & }`
                                                );
                                            },
                                            container: k,
                                        },
                                        oi = $(ai);
                                    if (
                                        (oe.length > 0 && E.push(oe),
                                        Array.isArray(oi))
                                    )
                                        for (let Ce of oi)
                                            (oe = []), Ce(ai), E.push(oe);
                                }
                                let I = [],
                                    B = k.toString();
                                S !== B &&
                                    (k.walkRules(($) => {
                                        let oe = $.selector,
                                            ai = (0, fo.default)((oi) => {
                                                oi.walkClasses((Ce) => {
                                                    Ce.value = `${d}${e.tailwindConfig.separator}${Ce.value}`;
                                                });
                                            }).processSync(oe);
                                        I.push(
                                            oe.replace(ai, "&").replace(w, "&")
                                        );
                                    }),
                                    k.walkAtRules(($) => {
                                        I.push(
                                            `@${$.name} (${$.params}) { & }`
                                        );
                                    }));
                                let q = !(x in (h.values ?? {})),
                                    X = h[Jr] ?? {},
                                    ae = (() =>
                                        !(q || X.respectPrefix === !1))();
                                (E = E.map(($) =>
                                    $.map((oe) => ({
                                        format: oe,
                                        respectPrefix: ae,
                                    }))
                                )),
                                    (I = I.map(($) => ({
                                        format: $,
                                        respectPrefix: ae,
                                    })));
                                let ge = { candidate: w, context: e },
                                    je = E.map(($) =>
                                        wn(`.${w}`, Nt($, ge), ge)
                                            .replace(`.${w}`, "&")
                                            .replace("{ & }", "")
                                            .trim()
                                    );
                                return (
                                    I.length > 0 &&
                                        je.push(
                                            Nt(I, ge)
                                                .toString()
                                                .replace(`.${w}`, "&")
                                        ),
                                    je
                                );
                            },
                        });
                return p;
            });
    }
    function Vd(i, e) {
        !i.classCache.has(e) ||
            (i.notClassCache.add(e),
            i.classCache.delete(e),
            i.applyClassCache.delete(e),
            i.candidateRuleMap.delete(e),
            i.candidateRuleCache.delete(e),
            (i.stylesheetCache = null));
    }
    function YC(i, e) {
        let t = e.raws.tailwind.candidate;
        if (!!t) {
            for (let r of i.ruleCache)
                r[1].raws.tailwind.candidate === t && i.ruleCache.delete(r);
            Vd(i, t);
        }
    }
    function go(i, e = [], t = z.root()) {
        let r = {
                disposables: [],
                ruleCache: new Set(),
                candidateRuleCache: new Map(),
                classCache: new Map(),
                applyClassCache: new Map(),
                notClassCache: new Set(i.blocklist ?? []),
                postCssNodeCache: new Map(),
                candidateRuleMap: new Map(),
                tailwindConfig: i,
                changedContent: e,
                variantMap: new Map(),
                stylesheetCache: null,
                variantOptions: new Map(),
                markInvalidUtilityCandidate: (a) => Vd(r, a),
                markInvalidUtilityNode: (a) => YC(r, a),
            },
            n = GC(r, t);
        return HC(n, r), r;
    }
    function Ud(i, e, t, r, n, a) {
        let s = e.opts.from,
            o = r !== null;
        Pe.DEBUG && console.log("Source path:", s);
        let u;
        if (o && Lt.has(s)) u = Lt.get(s);
        else if (ei.has(n)) {
            let d = ei.get(n);
            lt.get(d).add(s), Lt.set(s, d), (u = d);
        }
        let c = Pd(s, i);
        if (u) {
            let [d, h] = jd([...a], On(u));
            if (!d && !c) return [u, !1, h];
        }
        if (Lt.has(s)) {
            let d = Lt.get(s);
            if (lt.has(d) && (lt.get(d).delete(s), lt.get(d).size === 0)) {
                lt.delete(d);
                for (let [h, y] of ei) y === d && ei.delete(h);
                for (let h of d.disposables.splice(0)) h(d);
            }
        }
        Pe.DEBUG && console.log("Setting up new context...");
        let f = go(t, [], i);
        Object.assign(f, { userConfigPath: r });
        let [, p] = jd([...a], On(f));
        return (
            ei.set(n, f),
            Lt.set(s, f),
            lt.has(f) || lt.set(f, new Set()),
            lt.get(f).add(s),
            [f, !0, p]
        );
    }
    var Fd,
        fo,
        Jr,
        co,
        po,
        mo,
        Lt,
        ei,
        lt,
        Xr = C(() => {
            l();
            ze();
            bs();
            nt();
            (Fd = K(js())), (fo = K(Me()));
            Hr();
            Ua();
            un();
            xt();
            Mt();
            Ga();
            cr();
            yd();
            ot();
            ot();
            pi();
            Ee();
            fi();
            Ka();
            Cn();
            Dd();
            Bd();
            De();
            io();
            (Jr = Symbol()),
                (co = {
                    AddVariant: Symbol.for("ADD_VARIANT"),
                    MatchVariant: Symbol.for("MATCH_VARIANT"),
                }),
                (po = { Base: 1 << 0, Dynamic: 1 << 1 });
            mo = new WeakMap();
            (Lt = wd), (ei = bd), (lt = gn);
        });
    function yo(i) {
        return i.ignore
            ? []
            : i.glob
            ? m.env.ROLLUP_WATCH === "true"
                ? [{ type: "dependency", file: i.base }]
                : [{ type: "dir-dependency", dir: i.base, glob: i.glob }]
            : [{ type: "dependency", file: i.base }];
    }
    var Wd = C(() => {
        l();
    });
    function Gd(i, e) {
        return { handler: i, config: e };
    }
    var Hd,
        Yd = C(() => {
            l();
            Gd.withOptions = function (i, e = () => ({})) {
                let t = function (r) {
                    return { __options: r, handler: i(r), config: e(r) };
                };
                return (
                    (t.__isOptionsFunction = !0),
                    (t.__pluginFunction = i),
                    (t.__configFunction = e),
                    t
                );
            };
            Hd = Gd;
        });
    var wo = {};
    Ae(wo, { default: () => QC });
    var QC,
        bo = C(() => {
            l();
            Yd();
            QC = Hd;
        });
    var Jd = v((ID, Qd) => {
        l();
        var JC = (bo(), wo).default,
            XC = {
                overflow: "hidden",
                display: "-webkit-box",
                "-webkit-box-orient": "vertical",
            },
            KC = JC(
                function ({
                    matchUtilities: i,
                    addUtilities: e,
                    theme: t,
                    variants: r,
                }) {
                    let n = t("lineClamp");
                    i(
                        {
                            "line-clamp": (a) => ({
                                ...XC,
                                "-webkit-line-clamp": `${a}`,
                            }),
                        },
                        { values: n }
                    ),
                        e(
                            [
                                {
                                    ".line-clamp-none": {
                                        "-webkit-line-clamp": "unset",
                                    },
                                },
                            ],
                            r("lineClamp")
                        );
                },
                {
                    theme: {
                        lineClamp: {
                            1: "1",
                            2: "2",
                            3: "3",
                            4: "4",
                            5: "5",
                            6: "6",
                        },
                    },
                    variants: { lineClamp: ["responsive"] },
                }
            );
        Qd.exports = KC;
    });
    function vo(i) {
        i.content.files.length === 0 &&
            F.warn("content-problems", [
                "The `content` option in your Tailwind CSS configuration is missing or empty.",
                "Configure your content sources or your generated CSS will be missing styles.",
                "https://tailwindcss.com/docs/content-configuration",
            ]);
        try {
            let e = Jd();
            i.plugins.includes(e) &&
                (F.warn("line-clamp-in-core", [
                    "As of Tailwind CSS v3.3, the `@tailwindcss/line-clamp` plugin is now included by default.",
                    "Remove it from the `plugins` array in your configuration to eliminate this warning.",
                ]),
                (i.plugins = i.plugins.filter((t) => t !== e)));
        } catch {}
        return i;
    }
    var Xd = C(() => {
        l();
        Ee();
    });
    var Kd,
        Zd = C(() => {
            l();
            Kd = () => !1;
        });
    var Tn,
        eh = C(() => {
            l();
            Tn = {
                sync: (i) => [].concat(i),
                generateTasks: (i) => [
                    {
                        dynamic: !1,
                        base: ".",
                        negative: [],
                        positive: [].concat(i),
                        patterns: [].concat(i),
                    },
                ],
                escapePath: (i) => i,
            };
        });
    var xo,
        th = C(() => {
            l();
            xo = (i) => i;
        });
    var rh,
        ih = C(() => {
            l();
            rh = () => "";
        });
    function nh(i) {
        let e = i,
            t = rh(i);
        return (
            t !== "." &&
                ((e = i.substr(t.length)),
                e.charAt(0) === "/" && (e = e.substr(1))),
            e.substr(0, 2) === "./" && (e = e.substr(2)),
            e.charAt(0) === "/" && (e = e.substr(1)),
            { base: t, glob: e }
        );
    }
    var sh = C(() => {
        l();
        ih();
    });
    function ah(i, e) {
        let t = e.content.files;
        (t = t.filter((o) => typeof o == "string")), (t = t.map(xo));
        let r = Tn.generateTasks(t),
            n = [],
            a = [];
        for (let o of r)
            n.push(...o.positive.map((u) => oh(u, !1))),
                a.push(...o.negative.map((u) => oh(u, !0)));
        let s = [...n, ...a];
        return (s = e2(i, s)), (s = s.flatMap(t2)), (s = s.map(ZC)), s;
    }
    function oh(i, e) {
        let t = { original: i, base: i, ignore: e, pattern: i, glob: null };
        return Kd(i) && Object.assign(t, nh(i)), t;
    }
    function ZC(i) {
        let e = xo(i.base);
        return (
            (e = Tn.escapePath(e)),
            (i.pattern = i.glob ? `${e}/${i.glob}` : e),
            (i.pattern = i.ignore ? `!${i.pattern}` : i.pattern),
            i
        );
    }
    function e2(i, e) {
        let t = [];
        return (
            i.userConfigPath &&
                i.tailwindConfig.content.relative &&
                (t = [Z.dirname(i.userConfigPath)]),
            e.map((r) => ((r.base = Z.resolve(...t, r.base)), r))
        );
    }
    function t2(i) {
        let e = [i];
        try {
            let t = te.realpathSync(i.base);
            t !== i.base && e.push({ ...i, base: t });
        } catch {}
        return e;
    }
    function lh(i, e, t) {
        let r = i.tailwindConfig.content.files
                .filter((s) => typeof s.raw == "string")
                .map(({ raw: s, extension: o = "html" }) => ({
                    content: s,
                    extension: o,
                })),
            [n, a] = r2(e, t);
        for (let s of n) {
            let o = Z.extname(s).slice(1);
            r.push({ file: s, extension: o });
        }
        return [r, a];
    }
    function r2(i, e) {
        let t = i.map((s) => s.pattern),
            r = new Map(),
            n = new Set();
        Pe.DEBUG && console.time("Finding changed files");
        let a = Tn.sync(t, { absolute: !0 });
        for (let s of a) {
            let o = e.get(s) || -1 / 0,
                u = te.statSync(s).mtimeMs;
            u > o && (n.add(s), r.set(s, u));
        }
        return Pe.DEBUG && console.timeEnd("Finding changed files"), [n, r];
    }
    var uh = C(() => {
        l();
        ze();
        mt();
        Zd();
        eh();
        th();
        sh();
        ot();
    });
    function fh() {}
    var ch = C(() => {
        l();
    });
    function a2(i, e) {
        for (let t of e) {
            let r = `${i}${t}`;
            if (te.existsSync(r) && te.statSync(r).isFile()) return r;
        }
        for (let t of e) {
            let r = `${i}/index${t}`;
            if (te.existsSync(r)) return r;
        }
        return null;
    }
    function* ph(i, e, t, r = Z.extname(i)) {
        let n = a2(Z.resolve(e, i), i2.includes(r) ? n2 : s2);
        if (n === null || t.has(n)) return;
        t.add(n), yield n, (e = Z.dirname(n)), (r = Z.extname(n));
        let a = te.readFileSync(n, "utf-8");
        for (let s of [
            ...a.matchAll(/import[\s\S]*?['"](.{3,}?)['"]/gi),
            ...a.matchAll(/import[\s\S]*from[\s\S]*?['"](.{3,}?)['"]/gi),
            ...a.matchAll(/require\(['"`](.+)['"`]\)/gi),
        ])
            !s[1].startsWith(".") || (yield* ph(s[1], e, t, r));
    }
    function ko(i) {
        return i === null ? new Set() : new Set(ph(i, Z.dirname(i), new Set()));
    }
    var i2,
        n2,
        s2,
        dh = C(() => {
            l();
            ze();
            mt();
            (i2 = [".js", ".cjs", ".mjs"]),
                (n2 = [
                    "",
                    ".js",
                    ".cjs",
                    ".mjs",
                    ".ts",
                    ".cts",
                    ".mts",
                    ".jsx",
                    ".tsx",
                ]),
                (s2 = [
                    "",
                    ".ts",
                    ".cts",
                    ".mts",
                    ".tsx",
                    ".js",
                    ".cjs",
                    ".mjs",
                    ".jsx",
                ]);
        });
    function o2(i, e) {
        if (So.has(i)) return So.get(i);
        let t = ah(i, e);
        return So.set(i, t).get(i);
    }
    function l2(i) {
        let e = ys(i);
        if (e !== null) {
            let [r, n, a, s] = mh.get(e) || [],
                o = ko(e),
                u = !1,
                c = new Map();
            for (let d of o) {
                let h = te.statSync(d).mtimeMs;
                c.set(d, h), (!s || !s.has(d) || h > s.get(d)) && (u = !0);
            }
            if (!u) return [r, e, n, a];
            for (let d of o) delete fu.cache[d];
            let f = vo(dr(fh(e))),
                p = ui(f);
            return mh.set(e, [f, p, o, c]), [f, e, p, o];
        }
        let t = dr(i?.config ?? i ?? {});
        return (t = vo(t)), [t, null, ui(t), []];
    }
    function Co(i) {
        return ({ tailwindDirectives: e, registerDependency: t }) =>
            (r, n) => {
                let [a, s, o, u] = l2(i),
                    c = new Set(u);
                if (e.size > 0) {
                    c.add(n.opts.from);
                    for (let y of n.messages)
                        y.type === "dependency" && c.add(y.file);
                }
                let [f, , p] = Ud(r, n, a, s, o, c),
                    d = On(f),
                    h = o2(f, a);
                if (e.size > 0) {
                    for (let w of h) for (let b of yo(w)) t(b);
                    let [y, x] = lh(f, h, d);
                    for (let w of y) f.changedContent.push(w);
                    for (let [w, b] of x.entries()) p.set(w, b);
                }
                for (let y of u) t({ type: "dependency", file: y });
                for (let [y, x] of p.entries()) d.set(y, x);
                return f;
            };
    }
    var hh,
        mh,
        So,
        gh = C(() => {
            l();
            ze();
            hh = K(Xn());
            mu();
            gs();
            af();
            Xr();
            Wd();
            Xd();
            uh();
            ch();
            dh();
            (mh = new hh.default({ maxSize: 100 })), (So = new WeakMap());
        });
    function Ao(i) {
        let e = new Set(),
            t = new Set(),
            r = new Set();
        if (
            (i.walkAtRules((n) => {
                n.name === "apply" && r.add(n),
                    n.name === "import" &&
                        (n.params === '"tailwindcss/base"' ||
                        n.params === "'tailwindcss/base'"
                            ? ((n.name = "tailwind"), (n.params = "base"))
                            : n.params === '"tailwindcss/components"' ||
                              n.params === "'tailwindcss/components'"
                            ? ((n.name = "tailwind"), (n.params = "components"))
                            : n.params === '"tailwindcss/utilities"' ||
                              n.params === "'tailwindcss/utilities'"
                            ? ((n.name = "tailwind"), (n.params = "utilities"))
                            : (n.params === '"tailwindcss/screens"' ||
                                  n.params === "'tailwindcss/screens'" ||
                                  n.params === '"tailwindcss/variants"' ||
                                  n.params === "'tailwindcss/variants'") &&
                              ((n.name = "tailwind"), (n.params = "variants"))),
                    n.name === "tailwind" &&
                        (n.params === "screens" && (n.params = "variants"),
                        e.add(n.params)),
                    ["layer", "responsive", "variants"].includes(n.name) &&
                        (["responsive", "variants"].includes(n.name) &&
                            F.warn(`${n.name}-at-rule-deprecated`, [
                                `The \`@${n.name}\` directive has been deprecated in Tailwind CSS v3.0.`,
                                "Use `@layer utilities` or `@layer components` instead.",
                                "https://tailwindcss.com/docs/upgrade-guide#replace-variants-with-layer",
                            ]),
                        t.add(n));
            }),
            !e.has("base") || !e.has("components") || !e.has("utilities"))
        ) {
            for (let n of t)
                if (
                    n.name === "layer" &&
                    ["base", "components", "utilities"].includes(n.params)
                ) {
                    if (!e.has(n.params))
                        throw n.error(
                            `\`@layer ${n.params}\` is used but no matching \`@tailwind ${n.params}\` directive is present.`
                        );
                } else if (n.name === "responsive") {
                    if (!e.has("utilities"))
                        throw n.error(
                            "`@responsive` is used but `@tailwind utilities` is missing."
                        );
                } else if (n.name === "variants" && !e.has("utilities"))
                    throw n.error(
                        "`@variants` is used but `@tailwind utilities` is missing."
                    );
        }
        return { tailwindDirectives: e, applyDirectives: r };
    }
    var yh = C(() => {
        l();
        Ee();
    });
    function bt(i, e = void 0, t = void 0) {
        return i.map((r) => {
            let n = r.clone(),
                a = r.raws.tailwind?.preserveSource !== !0 || !n.source;
            return (
                e !== void 0 &&
                    a &&
                    ((n.source = e),
                    "walk" in n &&
                        n.walk((s) => {
                            s.source = e;
                        })),
                t !== void 0 &&
                    (n.raws.tailwind = { ...n.raws.tailwind, ...t }),
                n
            );
        });
    }
    var wh = C(() => {
        l();
    });
    function Pn(i) {
        return (
            (i = Array.isArray(i) ? i : [i]),
            (i = i.map((e) => (e instanceof RegExp ? e.source : e))),
            i.join("")
        );
    }
    function xe(i) {
        return new RegExp(Pn(i), "g");
    }
    function $t(i) {
        return `(?:${i.map(Pn).join("|")})`;
    }
    function _o(i) {
        return `(?:${Pn(i)})?`;
    }
    function vh(i) {
        return `(?:${Pn(i)})*`;
    }
    function xh(i) {
        return i && u2.test(i) ? i.replace(bh, "\\$&") : i || "";
    }
    var bh,
        u2,
        kh = C(() => {
            l();
            (bh = /[\\^$.*+?()[\]{}|]/g), (u2 = RegExp(bh.source));
        });
    function Sh(i) {
        let e = Array.from(f2(i));
        return (t) => {
            let r = [];
            for (let n of e) r = [...r, ...(t.match(n) ?? [])];
            return r.filter((n) => n !== void 0).map(d2);
        };
    }
    function* f2(i) {
        let e = i.tailwindConfig.separator,
            t = J(i.tailwindConfig, "variantGrouping"),
            r =
                i.tailwindConfig.prefix !== ""
                    ? _o(xe([/-?/, xh(i.tailwindConfig.prefix)]))
                    : "",
            n = $t([
                /\[[^\s:'"`]+:[^\s\[\]]+\]/,
                /\[[^\s:'"`]+:[^\s]+?\[[^\s]+\][^\s]+?\]/,
                xe([
                    /-?(?:\w+)/,
                    _o(
                        $t([
                            xe([
                                /-(?:\w+-)*\[[^\s:]+\]/,
                                /(?![{([]])/,
                                /(?:\/[^\s'"`\\><$]*)?/,
                            ]),
                            xe([
                                /-(?:\w+-)*\[[^\s]+\]/,
                                /(?![{([]])/,
                                /(?:\/[^\s'"`\\$]*)?/,
                            ]),
                            /[-\/][^\s'"`\\$={><]*/,
                        ])
                    ),
                ]),
            ]),
            a = [
                $t([
                    xe([/@\[[^\s"'`]+\](\/[^\s"'`]+)?/, e]),
                    xe([/([^\s"'`\[\\]+-)?\[[^\s"'`]+\]/, e]),
                    xe([/[^\s"'`\[\\]+/, e]),
                ]),
                $t([
                    xe([/([^\s"'`\[\\]+-)?\[[^\s`]+\]/, e]),
                    xe([/[^\s`\[\\]+/, e]),
                ]),
            ];
        for (let s of a)
            yield xe([
                "((?=((",
                s,
                ")+))\\2)?",
                /!?/,
                r,
                t ? $t([xe([/\(/, n, vh([/,/, n]), /\)/]), n]) : n,
            ]);
        yield /[^<>"'`\s.(){}[\]#=%$]*[^<>"'`\s.(){}[\]#=%:$]/g;
    }
    function d2(i) {
        if (!i.includes("-[")) return i;
        let e = 0,
            t = [],
            r = i.matchAll(c2);
        r = Array.from(r).flatMap((n) => {
            let [, ...a] = n;
            return a.map((s, o) =>
                Object.assign([], n, { index: n.index + o, 0: s })
            );
        });
        for (let n of r) {
            let a = n[0],
                s = t[t.length - 1];
            if (
                (a === s
                    ? t.pop()
                    : (a === "'" || a === '"' || a === "`") && t.push(a),
                !s)
            ) {
                if (a === "[") {
                    e++;
                    continue;
                } else if (a === "]") {
                    e--;
                    continue;
                }
                if (e < 0) return i.substring(0, n.index - 1);
                if (e === 0 && !p2.test(a)) return i.substring(0, n.index);
            }
        }
        return i;
    }
    var c2,
        p2,
        Ch = C(() => {
            l();
            De();
            kh();
            (c2 = /([\[\]'"`])([^\[\]'"`])?/g), (p2 = /[^"'`\s<>\]]+/);
        });
    function h2(i, e) {
        let t = i.tailwindConfig.content.extract;
        return t[e] || t.DEFAULT || _h[e] || _h.DEFAULT(i);
    }
    function m2(i, e) {
        let t = i.content.transform;
        return t[e] || t.DEFAULT || Eh[e] || Eh.DEFAULT;
    }
    function g2(i, e, t, r) {
        ti.has(e) || ti.set(e, new Ah.default({ maxSize: 25e3 }));
        for (let n of i.split(`
`))
            if (((n = n.trim()), !r.has(n)))
                if ((r.add(n), ti.get(e).has(n)))
                    for (let a of ti.get(e).get(n)) t.add(a);
                else {
                    let a = e(n).filter((o) => o !== "!*"),
                        s = new Set(a);
                    for (let o of s) t.add(o);
                    ti.get(e).set(n, s);
                }
    }
    function y2(i, e) {
        let t = e.offsets.sort(i),
            r = {
                base: new Set(),
                defaults: new Set(),
                components: new Set(),
                utilities: new Set(),
                variants: new Set(),
            };
        for (let [n, a] of t) r[n.layer].add(a);
        return r;
    }
    function Eo(i) {
        return async (e) => {
            let t = {
                base: null,
                components: null,
                utilities: null,
                variants: null,
            };
            if (
                (e.walkAtRules((y) => {
                    y.name === "tailwind" &&
                        Object.keys(t).includes(y.params) &&
                        (t[y.params] = y);
                }),
                Object.values(t).every((y) => y === null))
            )
                return e;
            let r = new Set([...(i.candidates ?? []), He]),
                n = new Set();
            Ye.DEBUG && console.time("Reading changed files"),
                await Promise.all(
                    i.changedContent.map(
                        async ({ file: y, content: x, extension: w }) => {
                            let b = m2(i.tailwindConfig, w),
                                k = h2(i, w);
                            (x = y ? await te.promises.readFile(y, "utf8") : x),
                                g2(b(x), k, r, n);
                        }
                    )
                ),
                Ye.DEBUG && console.timeEnd("Reading changed files");
            let a = i.classCache.size;
            Ye.DEBUG && console.time("Generate rules"),
                Ye.DEBUG && console.time("Sorting candidates");
            let s = new Set(
                [...r].sort((y, x) => (y === x ? 0 : y < x ? -1 : 1))
            );
            Ye.DEBUG && console.timeEnd("Sorting candidates"),
                Sn(s, i),
                Ye.DEBUG && console.timeEnd("Generate rules"),
                Ye.DEBUG && console.time("Build stylesheet"),
                (i.stylesheetCache === null || i.classCache.size !== a) &&
                    (i.stylesheetCache = y2([...i.ruleCache], i)),
                Ye.DEBUG && console.timeEnd("Build stylesheet");
            let {
                defaults: o,
                base: u,
                components: c,
                utilities: f,
                variants: p,
            } = i.stylesheetCache;
            t.base &&
                (t.base.before(
                    bt([...u, ...o], t.base.source, { layer: "base" })
                ),
                t.base.remove()),
                t.components &&
                    (t.components.before(
                        bt([...c], t.components.source, { layer: "components" })
                    ),
                    t.components.remove()),
                t.utilities &&
                    (t.utilities.before(
                        bt([...f], t.utilities.source, { layer: "utilities" })
                    ),
                    t.utilities.remove());
            let d = Array.from(p).filter((y) => {
                let x = y.raws.tailwind?.parentLayer;
                return x === "components"
                    ? t.components !== null
                    : x === "utilities"
                    ? t.utilities !== null
                    : !0;
            });
            t.variants
                ? (t.variants.before(
                      bt(d, t.variants.source, { layer: "variants" })
                  ),
                  t.variants.remove())
                : d.length > 0 &&
                  e.append(bt(d, e.source, { layer: "variants" }));
            let h = d.some((y) => y.raws.tailwind?.parentLayer === "utilities");
            t.utilities &&
                f.size === 0 &&
                !h &&
                F.warn("content-problems", [
                    "No utility classes were detected in your source files. If this is unexpected, double-check the `content` option in your Tailwind CSS configuration.",
                    "https://tailwindcss.com/docs/content-configuration",
                ]),
                Ye.DEBUG &&
                    (console.log("Potential classes: ", r.size),
                    console.log("Active contexts: ", gn.size)),
                (i.changedContent = []),
                e.walkAtRules("layer", (y) => {
                    Object.keys(t).includes(y.params) && y.remove();
                });
        };
    }
    var Ah,
        Ye,
        _h,
        Eh,
        ti,
        Oh = C(() => {
            l();
            ze();
            Ah = K(Xn());
            ot();
            Cn();
            Ee();
            wh();
            Ch();
            (Ye = Pe),
                (_h = { DEFAULT: Sh }),
                (Eh = {
                    DEFAULT: (i) => i,
                    svelte: (i) => i.replace(/(?:^|\s)class:/g, " "),
                });
            ti = new WeakMap();
        });
    function In(i) {
        let e = new Map();
        z.root({ nodes: [i.clone()] }).walkRules((a) => {
            (0, Dn.default)((s) => {
                s.walkClasses((o) => {
                    let u = o.parent.toString(),
                        c = e.get(u);
                    c || e.set(u, (c = new Set())), c.add(o.value);
                });
            }).processSync(a.selector);
        });
        let r = Array.from(e.values(), (a) => Array.from(a)),
            n = r.flat();
        return Object.assign(n, { groups: r });
    }
    function Oo(i) {
        return w2.astSync(i);
    }
    function Th(i, e) {
        let t = new Set();
        for (let r of i) t.add(r.split(e).pop());
        return Array.from(t);
    }
    function Ph(i, e) {
        let t = i.tailwindConfig.prefix;
        return typeof t == "function" ? t(e) : t + e;
    }
    function* Dh(i) {
        for (yield i; i.parent; ) yield i.parent, (i = i.parent);
    }
    function b2(i, e = {}) {
        let t = i.nodes;
        i.nodes = [];
        let r = i.clone(e);
        return (i.nodes = t), r;
    }
    function v2(i) {
        for (let e of Dh(i))
            if (i !== e) {
                if (e.type === "root") break;
                i = b2(e, { nodes: [i] });
            }
        return i;
    }
    function x2(i, e) {
        let t = new Map();
        return (
            i.walkRules((r) => {
                for (let s of Dh(r))
                    if (s.raws.tailwind?.layer !== void 0) return;
                let n = v2(r),
                    a = e.offsets.create("user");
                for (let s of In(r)) {
                    let o = t.get(s) || [];
                    t.set(s, o),
                        o.push([{ layer: "user", sort: a, important: !1 }, n]);
                }
            }),
            t
        );
    }
    function k2(i, e) {
        for (let t of i) {
            if (e.notClassCache.has(t) || e.applyClassCache.has(t)) continue;
            if (e.classCache.has(t)) {
                e.applyClassCache.set(
                    t,
                    e.classCache.get(t).map(([n, a]) => [n, a.clone()])
                );
                continue;
            }
            let r = Array.from(xn(t, e));
            if (r.length === 0) {
                e.notClassCache.add(t);
                continue;
            }
            e.applyClassCache.set(t, r);
        }
        return e.applyClassCache;
    }
    function S2(i) {
        let e = null;
        return {
            get: (t) => ((e = e || i()), e.get(t)),
            has: (t) => ((e = e || i()), e.has(t)),
        };
    }
    function C2(i) {
        return {
            get: (e) => i.flatMap((t) => t.get(e) || []),
            has: (e) => i.some((t) => t.has(e)),
        };
    }
    function Ih(i) {
        let e = i.split(/[\s\t\n]+/g);
        return e[e.length - 1] === "!important"
            ? [e.slice(0, -1), !0]
            : [e, !1];
    }
    function qh(i, e, t) {
        let r = new Set(),
            n = [];
        if (
            (i.walkAtRules("apply", (u) => {
                let [c] = Ih(u.params);
                for (let f of c) r.add(f);
                n.push(u);
            }),
            n.length === 0)
        )
            return;
        let a = C2([t, k2(r, e)]);
        function s(u, c, f) {
            let p = Oo(u),
                d = Oo(c),
                y = Oo(`.${ce(f)}`).nodes[0].nodes[0];
            return (
                p.each((x) => {
                    let w = new Set();
                    d.each((b) => {
                        let k = !1;
                        (b = b.clone()),
                            b.walkClasses((S) => {
                                S.value === y.value &&
                                    (k ||
                                        (S.replaceWith(
                                            ...x.nodes.map((_) => _.clone())
                                        ),
                                        w.add(b),
                                        (k = !0)));
                            });
                    });
                    for (let b of w) {
                        let k = [[]];
                        for (let S of b.nodes)
                            S.type === "combinator"
                                ? (k.push(S), k.push([]))
                                : k[k.length - 1].push(S);
                        b.nodes = [];
                        for (let S of k)
                            Array.isArray(S) &&
                                S.sort((_, E) =>
                                    _.type === "tag" && E.type === "class"
                                        ? -1
                                        : _.type === "class" && E.type === "tag"
                                        ? 1
                                        : _.type === "class" &&
                                          E.type === "pseudo" &&
                                          E.value.startsWith("::")
                                        ? -1
                                        : _.type === "pseudo" &&
                                          _.value.startsWith("::") &&
                                          E.type === "class"
                                        ? 1
                                        : 0
                                ),
                                (b.nodes = b.nodes.concat(S));
                    }
                    x.replaceWith(...w);
                }),
                p.toString()
            );
        }
        let o = new Map();
        for (let u of n) {
            let [c] = o.get(u.parent) || [[], u.source];
            o.set(u.parent, [c, u.source]);
            let [f, p] = Ih(u.params);
            if (u.parent.type === "atrule") {
                if (u.parent.name === "screen") {
                    let d = u.parent.params;
                    throw u.error(
                        `@apply is not supported within nested at-rules like @screen. We suggest you write this as @apply ${f
                            .map((h) => `${d}:${h}`)
                            .join(" ")} instead.`
                    );
                }
                throw u.error(
                    `@apply is not supported within nested at-rules like @${u.parent.name}. You can fix this by un-nesting @${u.parent.name}.`
                );
            }
            for (let d of f) {
                if ([Ph(e, "group"), Ph(e, "peer")].includes(d))
                    throw u.error(
                        `@apply should not be used with the '${d}' utility`
                    );
                if (!a.has(d))
                    throw u.error(
                        `The \`${d}\` class does not exist. If \`${d}\` is a custom class, make sure it is defined within a \`@layer\` directive.`
                    );
                let h = a.get(d);
                c.push([d, p, h]);
            }
        }
        for (let [u, [c, f]] of o) {
            let p = [];
            for (let [h, y, x] of c) {
                let w = [h, ...Th([h], e.tailwindConfig.separator)];
                for (let [b, k] of x) {
                    let S = In(u),
                        _ = In(k);
                    if (
                        ((_ = _.groups
                            .filter((q) => q.some((X) => w.includes(X)))
                            .flat()),
                        (_ = _.concat(Th(_, e.tailwindConfig.separator))),
                        S.some((q) => _.includes(q)))
                    )
                        throw k.error(
                            `You cannot \`@apply\` the \`${h}\` utility here because it creates a circular dependency.`
                        );
                    let I = z.root({ nodes: [k.clone()] });
                    I.walk((q) => {
                        q.source = f;
                    }),
                        (k.type !== "atrule" ||
                            (k.type === "atrule" && k.name !== "keyframes")) &&
                            I.walkRules((q) => {
                                if (!In(q).some(($) => $ === h)) {
                                    q.remove();
                                    return;
                                }
                                let X =
                                        typeof e.tailwindConfig.important ==
                                        "string"
                                            ? e.tailwindConfig.important
                                            : null,
                                    ge =
                                        u.raws.tailwind !== void 0 &&
                                        X &&
                                        u.selector.indexOf(X) === 0
                                            ? u.selector.slice(X.length)
                                            : u.selector;
                                (q.selector = s(ge, q.selector, h)),
                                    X &&
                                        ge !== u.selector &&
                                        (q.selector = bn(q.selector, X)),
                                    q.walkDecls(($) => {
                                        $.important = b.important || y;
                                    });
                                let je = (0, Dn.default)().astSync(q.selector);
                                je.each(($) => Ft($)),
                                    (q.selector = je.toString());
                            }),
                        !!I.nodes[0] && p.push([b.sort, I.nodes[0]]);
                }
            }
            let d = e.offsets.sort(p).map((h) => h[1]);
            u.after(d);
        }
        for (let u of n)
            u.parent.nodes.length > 1 ? u.remove() : u.parent.remove();
        qh(i, e, t);
    }
    function To(i) {
        return (e) => {
            let t = S2(() => x2(e, i));
            qh(e, i, t);
        };
    }
    var Dn,
        w2,
        Rh = C(() => {
            l();
            nt();
            Dn = K(Me());
            Cn();
            Mt();
            so();
            yn();
            w2 = (0, Dn.default)();
        });
    var Mh = v((PI, qn) => {
        l();
        (function () {
            "use strict";
            function i(r, n, a) {
                if (!r) return null;
                i.caseSensitive || (r = r.toLowerCase());
                var s = i.threshold === null ? null : i.threshold * r.length,
                    o = i.thresholdAbsolute,
                    u;
                s !== null && o !== null
                    ? (u = Math.min(s, o))
                    : s !== null
                    ? (u = s)
                    : o !== null
                    ? (u = o)
                    : (u = null);
                var c,
                    f,
                    p,
                    d,
                    h,
                    y = n.length;
                for (h = 0; h < y; h++)
                    if (
                        ((f = n[h]),
                        a && (f = f[a]),
                        !!f &&
                            (i.caseSensitive ? (p = f) : (p = f.toLowerCase()),
                            (d = t(r, p, u)),
                            (u === null || d < u) &&
                                ((u = d),
                                a && i.returnWinningObject
                                    ? (c = n[h])
                                    : (c = f),
                                i.returnFirstMatch)))
                    )
                        return c;
                return c || i.nullResultValue;
            }
            (i.threshold = 0.4),
                (i.thresholdAbsolute = 20),
                (i.caseSensitive = !1),
                (i.nullResultValue = null),
                (i.returnWinningObject = null),
                (i.returnFirstMatch = !1),
                typeof qn != "undefined" && qn.exports
                    ? (qn.exports = i)
                    : (window.didYouMean = i);
            var e = Math.pow(2, 32) - 1;
            function t(r, n, a) {
                a = a || a === 0 ? a : e;
                var s = r.length,
                    o = n.length;
                if (s === 0) return Math.min(a + 1, o);
                if (o === 0) return Math.min(a + 1, s);
                if (Math.abs(s - o) > a) return a + 1;
                var u = [],
                    c,
                    f,
                    p,
                    d,
                    h;
                for (c = 0; c <= o; c++) u[c] = [c];
                for (f = 0; f <= s; f++) u[0][f] = f;
                for (c = 1; c <= o; c++) {
                    for (
                        p = e,
                            d = 1,
                            c > a && (d = c - a),
                            h = o + 1,
                            h > a + c && (h = a + c),
                            f = 1;
                        f <= s;
                        f++
                    )
                        f < d || f > h
                            ? (u[c][f] = a + 1)
                            : n.charAt(c - 1) === r.charAt(f - 1)
                            ? (u[c][f] = u[c - 1][f - 1])
                            : (u[c][f] = Math.min(
                                  u[c - 1][f - 1] + 1,
                                  Math.min(u[c][f - 1] + 1, u[c - 1][f] + 1)
                              )),
                            u[c][f] < p && (p = u[c][f]);
                    if (p > a) return a + 1;
                }
                return u[o][s];
            }
        })();
    });
    var Fh = v((DI, Bh) => {
        l();
        var Po = "(".charCodeAt(0),
            Do = ")".charCodeAt(0),
            Rn = "'".charCodeAt(0),
            Io = '"'.charCodeAt(0),
            qo = "\\".charCodeAt(0),
            jt = "/".charCodeAt(0),
            Ro = ",".charCodeAt(0),
            Mo = ":".charCodeAt(0),
            Mn = "*".charCodeAt(0),
            A2 = "u".charCodeAt(0),
            _2 = "U".charCodeAt(0),
            E2 = "+".charCodeAt(0),
            O2 = /^[a-f0-9?-]+$/i;
        Bh.exports = function (i) {
            for (
                var e = [],
                    t = i,
                    r,
                    n,
                    a,
                    s,
                    o,
                    u,
                    c,
                    f,
                    p = 0,
                    d = t.charCodeAt(p),
                    h = t.length,
                    y = [{ nodes: e }],
                    x = 0,
                    w,
                    b = "",
                    k = "",
                    S = "";
                p < h;

            )
                if (d <= 32) {
                    r = p;
                    do (r += 1), (d = t.charCodeAt(r));
                    while (d <= 32);
                    (s = t.slice(p, r)),
                        (a = e[e.length - 1]),
                        d === Do && x
                            ? (S = s)
                            : a && a.type === "div"
                            ? ((a.after = s), (a.sourceEndIndex += s.length))
                            : d === Ro ||
                              d === Mo ||
                              (d === jt &&
                                  t.charCodeAt(r + 1) !== Mn &&
                                  (!w || (w && w.type === "function" && !1)))
                            ? (k = s)
                            : e.push({
                                  type: "space",
                                  sourceIndex: p,
                                  sourceEndIndex: r,
                                  value: s,
                              }),
                        (p = r);
                } else if (d === Rn || d === Io) {
                    (r = p),
                        (n = d === Rn ? "'" : '"'),
                        (s = { type: "string", sourceIndex: p, quote: n });
                    do
                        if (((o = !1), (r = t.indexOf(n, r + 1)), ~r))
                            for (u = r; t.charCodeAt(u - 1) === qo; )
                                (u -= 1), (o = !o);
                        else (t += n), (r = t.length - 1), (s.unclosed = !0);
                    while (o);
                    (s.value = t.slice(p + 1, r)),
                        (s.sourceEndIndex = s.unclosed ? r : r + 1),
                        e.push(s),
                        (p = r + 1),
                        (d = t.charCodeAt(p));
                } else if (d === jt && t.charCodeAt(p + 1) === Mn)
                    (r = t.indexOf("*/", p)),
                        (s = {
                            type: "comment",
                            sourceIndex: p,
                            sourceEndIndex: r + 2,
                        }),
                        r === -1 &&
                            ((s.unclosed = !0),
                            (r = t.length),
                            (s.sourceEndIndex = r)),
                        (s.value = t.slice(p + 2, r)),
                        e.push(s),
                        (p = r + 2),
                        (d = t.charCodeAt(p));
                else if ((d === jt || d === Mn) && w && w.type === "function")
                    (s = t[p]),
                        e.push({
                            type: "word",
                            sourceIndex: p - k.length,
                            sourceEndIndex: p + s.length,
                            value: s,
                        }),
                        (p += 1),
                        (d = t.charCodeAt(p));
                else if (d === jt || d === Ro || d === Mo)
                    (s = t[p]),
                        e.push({
                            type: "div",
                            sourceIndex: p - k.length,
                            sourceEndIndex: p + s.length,
                            value: s,
                            before: k,
                            after: "",
                        }),
                        (k = ""),
                        (p += 1),
                        (d = t.charCodeAt(p));
                else if (Po === d) {
                    r = p;
                    do (r += 1), (d = t.charCodeAt(r));
                    while (d <= 32);
                    if (
                        ((f = p),
                        (s = {
                            type: "function",
                            sourceIndex: p - b.length,
                            value: b,
                            before: t.slice(f + 1, r),
                        }),
                        (p = r),
                        b === "url" && d !== Rn && d !== Io)
                    ) {
                        r -= 1;
                        do
                            if (((o = !1), (r = t.indexOf(")", r + 1)), ~r))
                                for (u = r; t.charCodeAt(u - 1) === qo; )
                                    (u -= 1), (o = !o);
                            else
                                (t += ")"),
                                    (r = t.length - 1),
                                    (s.unclosed = !0);
                        while (o);
                        c = r;
                        do (c -= 1), (d = t.charCodeAt(c));
                        while (d <= 32);
                        f < c
                            ? (p !== c + 1
                                  ? (s.nodes = [
                                        {
                                            type: "word",
                                            sourceIndex: p,
                                            sourceEndIndex: c + 1,
                                            value: t.slice(p, c + 1),
                                        },
                                    ])
                                  : (s.nodes = []),
                              s.unclosed && c + 1 !== r
                                  ? ((s.after = ""),
                                    s.nodes.push({
                                        type: "space",
                                        sourceIndex: c + 1,
                                        sourceEndIndex: r,
                                        value: t.slice(c + 1, r),
                                    }))
                                  : ((s.after = t.slice(c + 1, r)),
                                    (s.sourceEndIndex = r)))
                            : ((s.after = ""), (s.nodes = [])),
                            (p = r + 1),
                            (s.sourceEndIndex = s.unclosed ? r : p),
                            (d = t.charCodeAt(p)),
                            e.push(s);
                    } else
                        (x += 1),
                            (s.after = ""),
                            (s.sourceEndIndex = p + 1),
                            e.push(s),
                            y.push(s),
                            (e = s.nodes = []),
                            (w = s);
                    b = "";
                } else if (Do === d && x)
                    (p += 1),
                        (d = t.charCodeAt(p)),
                        (w.after = S),
                        (w.sourceEndIndex += S.length),
                        (S = ""),
                        (x -= 1),
                        (y[y.length - 1].sourceEndIndex = p),
                        y.pop(),
                        (w = y[x]),
                        (e = w.nodes);
                else {
                    r = p;
                    do d === qo && (r += 1), (r += 1), (d = t.charCodeAt(r));
                    while (
                        r < h &&
                        !(
                            d <= 32 ||
                            d === Rn ||
                            d === Io ||
                            d === Ro ||
                            d === Mo ||
                            d === jt ||
                            d === Po ||
                            (d === Mn && w && w.type === "function" && !0) ||
                            (d === jt && w.type === "function" && !0) ||
                            (d === Do && x)
                        )
                    );
                    (s = t.slice(p, r)),
                        Po === d
                            ? (b = s)
                            : (A2 === s.charCodeAt(0) ||
                                  _2 === s.charCodeAt(0)) &&
                              E2 === s.charCodeAt(1) &&
                              O2.test(s.slice(2))
                            ? e.push({
                                  type: "unicode-range",
                                  sourceIndex: p,
                                  sourceEndIndex: r,
                                  value: s,
                              })
                            : e.push({
                                  type: "word",
                                  sourceIndex: p,
                                  sourceEndIndex: r,
                                  value: s,
                              }),
                        (p = r);
                }
            for (p = y.length - 1; p; p -= 1)
                (y[p].unclosed = !0), (y[p].sourceEndIndex = t.length);
            return y[0].nodes;
        };
    });
    var Lh = v((II, Nh) => {
        l();
        Nh.exports = function i(e, t, r) {
            var n, a, s, o;
            for (n = 0, a = e.length; n < a; n += 1)
                (s = e[n]),
                    r || (o = t(s, n, e)),
                    o !== !1 &&
                        s.type === "function" &&
                        Array.isArray(s.nodes) &&
                        i(s.nodes, t, r),
                    r && t(s, n, e);
        };
    });
    var Vh = v((qI, zh) => {
        l();
        function $h(i, e) {
            var t = i.type,
                r = i.value,
                n,
                a;
            return e && (a = e(i)) !== void 0
                ? a
                : t === "word" || t === "space"
                ? r
                : t === "string"
                ? ((n = i.quote || ""), n + r + (i.unclosed ? "" : n))
                : t === "comment"
                ? "/*" + r + (i.unclosed ? "" : "*/")
                : t === "div"
                ? (i.before || "") + r + (i.after || "")
                : Array.isArray(i.nodes)
                ? ((n = jh(i.nodes, e)),
                  t !== "function"
                      ? n
                      : r +
                        "(" +
                        (i.before || "") +
                        n +
                        (i.after || "") +
                        (i.unclosed ? "" : ")"))
                : r;
        }
        function jh(i, e) {
            var t, r;
            if (Array.isArray(i)) {
                for (t = "", r = i.length - 1; ~r; r -= 1) t = $h(i[r], e) + t;
                return t;
            }
            return $h(i, e);
        }
        zh.exports = jh;
    });
    var Wh = v((RI, Uh) => {
        l();
        var Bn = "-".charCodeAt(0),
            Fn = "+".charCodeAt(0),
            Bo = ".".charCodeAt(0),
            T2 = "e".charCodeAt(0),
            P2 = "E".charCodeAt(0);
        function D2(i) {
            var e = i.charCodeAt(0),
                t;
            if (e === Fn || e === Bn) {
                if (((t = i.charCodeAt(1)), t >= 48 && t <= 57)) return !0;
                var r = i.charCodeAt(2);
                return t === Bo && r >= 48 && r <= 57;
            }
            return e === Bo
                ? ((t = i.charCodeAt(1)), t >= 48 && t <= 57)
                : e >= 48 && e <= 57;
        }
        Uh.exports = function (i) {
            var e = 0,
                t = i.length,
                r,
                n,
                a;
            if (t === 0 || !D2(i)) return !1;
            for (
                r = i.charCodeAt(e), (r === Fn || r === Bn) && e++;
                e < t && ((r = i.charCodeAt(e)), !(r < 48 || r > 57));

            )
                e += 1;
            if (
                ((r = i.charCodeAt(e)),
                (n = i.charCodeAt(e + 1)),
                r === Bo && n >= 48 && n <= 57)
            )
                for (
                    e += 2;
                    e < t && ((r = i.charCodeAt(e)), !(r < 48 || r > 57));

                )
                    e += 1;
            if (
                ((r = i.charCodeAt(e)),
                (n = i.charCodeAt(e + 1)),
                (a = i.charCodeAt(e + 2)),
                (r === T2 || r === P2) &&
                    ((n >= 48 && n <= 57) ||
                        ((n === Fn || n === Bn) && a >= 48 && a <= 57)))
            )
                for (
                    e += n === Fn || n === Bn ? 3 : 2;
                    e < t && ((r = i.charCodeAt(e)), !(r < 48 || r > 57));

                )
                    e += 1;
            return { number: i.slice(0, e), unit: i.slice(e) };
        };
    });
    var Qh = v((MI, Yh) => {
        l();
        var I2 = Fh(),
            Gh = Lh(),
            Hh = Vh();
        function ut(i) {
            return this instanceof ut
                ? ((this.nodes = I2(i)), this)
                : new ut(i);
        }
        ut.prototype.toString = function () {
            return Array.isArray(this.nodes) ? Hh(this.nodes) : "";
        };
        ut.prototype.walk = function (i, e) {
            return Gh(this.nodes, i, e), this;
        };
        ut.unit = Wh();
        ut.walk = Gh;
        ut.stringify = Hh;
        Yh.exports = ut;
    });
    function No(i) {
        return typeof i == "object" && i !== null;
    }
    function q2(i, e) {
        let t = Ke(e);
        do if ((t.pop(), (0, ri.default)(i, t) !== void 0)) break;
        while (t.length);
        return t.length ? t : void 0;
    }
    function zt(i) {
        return typeof i == "string"
            ? i
            : i.reduce(
                  (e, t, r) =>
                      t.includes(".")
                          ? `${e}[${t}]`
                          : r === 0
                          ? t
                          : `${e}.${t}`,
                  ""
              );
    }
    function Xh(i) {
        return i.map((e) => `'${e}'`).join(", ");
    }
    function Kh(i) {
        return Xh(Object.keys(i));
    }
    function Lo(i, e, t, r = {}) {
        let n = Array.isArray(e) ? zt(e) : e.replace(/^['"]+|['"]+$/g, ""),
            a = Array.isArray(e) ? e : Ke(n),
            s = (0, ri.default)(i.theme, a, t);
        if (s === void 0) {
            let u = `'${n}' does not exist in your theme config.`,
                c = a.slice(0, -1),
                f = (0, ri.default)(i.theme, c);
            if (No(f)) {
                let p = Object.keys(f).filter((h) => Lo(i, [...c, h]).isValid),
                    d = (0, Jh.default)(a[a.length - 1], p);
                d
                    ? (u += ` Did you mean '${zt([...c, d])}'?`)
                    : p.length > 0 &&
                      (u += ` '${zt(c)}' has the following valid keys: ${Xh(
                          p
                      )}`);
            } else {
                let p = q2(i.theme, n);
                if (p) {
                    let d = (0, ri.default)(i.theme, p);
                    No(d)
                        ? (u += ` '${zt(p)}' has the following keys: ${Kh(d)}`)
                        : (u += ` '${zt(p)}' is not an object.`);
                } else
                    u += ` Your theme has the following top-level keys: ${Kh(
                        i.theme
                    )}`;
            }
            return { isValid: !1, error: u };
        }
        if (
            !(
                typeof s == "string" ||
                typeof s == "number" ||
                typeof s == "function" ||
                s instanceof String ||
                s instanceof Number ||
                Array.isArray(s)
            )
        ) {
            let u = `'${n}' was found but does not resolve to a string.`;
            if (No(s)) {
                let c = Object.keys(s).filter((f) => Lo(i, [...a, f]).isValid);
                c.length &&
                    (u += ` Did you mean something like '${zt([
                        ...a,
                        c[0],
                    ])}'?`);
            }
            return { isValid: !1, error: u };
        }
        let [o] = a;
        return { isValid: !0, value: Ge(o)(s, r) };
    }
    function R2(i, e, t) {
        e = e.map((n) => Zh(i, n, t));
        let r = [""];
        for (let n of e)
            n.type === "div" && n.value === ","
                ? r.push("")
                : (r[r.length - 1] += Fo.default.stringify(n));
        return r;
    }
    function Zh(i, e, t) {
        if (e.type === "function" && t[e.value] !== void 0) {
            let r = R2(i, e.nodes, t);
            (e.type = "word"), (e.value = t[e.value](i, ...r));
        }
        return e;
    }
    function M2(i, e, t) {
        return Object.keys(t).some((n) => e.includes(`${n}(`))
            ? (0, Fo.default)(e)
                  .walk((n) => {
                      Zh(i, n, t);
                  })
                  .toString()
            : e;
    }
    function* F2(i) {
        i = i.replace(/^['"]+|['"]+$/g, "");
        let e = i.match(/^([^\s]+)(?![^\[]*\])(?:\s*\/\s*([^\/\s]+))$/),
            t;
        yield [i, void 0], e && ((i = e[1]), (t = e[2]), yield [i, t]);
    }
    function N2(i, e, t) {
        let r = Array.from(F2(e)).map(([n, a]) =>
            Object.assign(Lo(i, n, t, { opacityValue: a }), {
                resolvedPath: n,
                alpha: a,
            })
        );
        return r.find((n) => n.isValid) ?? r[0];
    }
    function em(i) {
        let e = i.tailwindConfig,
            t = {
                theme: (r, n, ...a) => {
                    let {
                        isValid: s,
                        value: o,
                        error: u,
                        alpha: c,
                    } = N2(e, n, a.length ? a : void 0);
                    if (!s) {
                        let d = r.parent,
                            h = d?.raws.tailwind?.candidate;
                        if (d && h !== void 0) {
                            i.markInvalidUtilityNode(d),
                                d.remove(),
                                F.warn("invalid-theme-key-in-class", [
                                    `The utility \`${h}\` contains an invalid theme value and was not generated.`,
                                ]);
                            return;
                        }
                        throw r.error(u);
                    }
                    let f = kt(o),
                        p = f !== void 0 && typeof f == "function";
                    return (
                        (c !== void 0 || p) &&
                            (c === void 0 && (c = 1), (o = Ie(f, c, f))),
                        o
                    );
                },
                screen: (r, n) => {
                    n = n.replace(/^['"]+/g, "").replace(/['"]+$/g, "");
                    let s = at(e.theme.screens).find(({ name: o }) => o === n);
                    if (!s)
                        throw r.error(
                            `The '${n}' screen does not exist in your theme.`
                        );
                    return st(s);
                },
            };
        return (r) => {
            r.walk((n) => {
                let a = B2[n.type];
                a !== void 0 && (n[a] = M2(n, n[a], t));
            });
        };
    }
    var ri,
        Jh,
        Fo,
        B2,
        tm = C(() => {
            l();
            (ri = K(js())), (Jh = K(Mh()));
            Hr();
            Fo = K(Qh());
            hn();
            cn();
            pi();
            ar();
            cr();
            Ee();
            B2 = { atrule: "params", decl: "value" };
        });
    function rm({ tailwindConfig: { theme: i } }) {
        return function (e) {
            e.walkAtRules("screen", (t) => {
                let r = t.params,
                    a = at(i.screens).find(({ name: s }) => s === r);
                if (!a) throw t.error(`No \`${r}\` screen found.`);
                (t.name = "media"), (t.params = st(a));
            });
        };
    }
    var im = C(() => {
        l();
        hn();
        cn();
    });
    function L2(i) {
        let e = i
                .filter((o) =>
                    o.type !== "pseudo" || o.nodes.length > 0
                        ? !0
                        : o.value.startsWith("::") ||
                          [
                              ":before",
                              ":after",
                              ":first-line",
                              ":first-letter",
                          ].includes(o.value)
                )
                .reverse(),
            t = new Set(["tag", "class", "id", "attribute"]),
            r = e.findIndex((o) => t.has(o.type));
        if (r === -1) return e.reverse().join("").trim();
        let n = e[r],
            a = nm[n.type] ? nm[n.type](n) : n;
        e = e.slice(0, r);
        let s = e.findIndex((o) => o.type === "combinator" && o.value === ">");
        return (
            s !== -1 && (e.splice(0, s), e.unshift(Nn.default.universal())),
            [a, ...e.reverse()].join("").trim()
        );
    }
    function j2(i) {
        return $o.has(i) || $o.set(i, $2.transformSync(i)), $o.get(i);
    }
    function jo({ tailwindConfig: i }) {
        return (e) => {
            let t = new Map(),
                r = new Set();
            if (
                (e.walkAtRules("defaults", (n) => {
                    if (n.nodes && n.nodes.length > 0) {
                        r.add(n);
                        return;
                    }
                    let a = n.params;
                    t.has(a) || t.set(a, new Set()),
                        t.get(a).add(n.parent),
                        n.remove();
                }),
                J(i, "optimizeUniversalDefaults"))
            )
                for (let n of r) {
                    let a = new Map(),
                        s = t.get(n.params) ?? [];
                    for (let o of s)
                        for (let u of j2(o.selector)) {
                            let c =
                                    u.includes(":-") || u.includes("::-")
                                        ? u
                                        : "__DEFAULT__",
                                f = a.get(c) ?? new Set();
                            a.set(c, f), f.add(u);
                        }
                    if (J(i, "optimizeUniversalDefaults")) {
                        if (a.size === 0) {
                            n.remove();
                            continue;
                        }
                        for (let [, o] of a) {
                            let u = z.rule({ source: n.source });
                            (u.selectors = [...o]),
                                u.append(n.nodes.map((c) => c.clone())),
                                n.before(u);
                        }
                    }
                    n.remove();
                }
            else if (r.size) {
                let n = z.rule({ selectors: ["*", "::before", "::after"] });
                for (let s of r)
                    n.append(s.nodes),
                        n.parent || s.before(n),
                        n.source || (n.source = s.source),
                        s.remove();
                let a = n.clone({ selectors: ["::backdrop"] });
                n.after(a);
            }
        };
    }
    var Nn,
        nm,
        $2,
        $o,
        sm = C(() => {
            l();
            nt();
            Nn = K(Me());
            De();
            nm = {
                id(i) {
                    return Nn.default.attribute({
                        attribute: "id",
                        operator: "=",
                        value: i.value,
                        quoteMark: '"',
                    });
                },
            };
            ($2 = (0, Nn.default)((i) =>
                i.map((e) => {
                    let t = e
                        .split(
                            (r) => r.type === "combinator" && r.value === " "
                        )
                        .pop();
                    return L2(t);
                })
            )),
                ($o = new Map());
        });
    function zo() {
        function i(e) {
            let t = null;
            e.each((r) => {
                if (!z2.has(r.type)) {
                    t = null;
                    return;
                }
                if (t === null) {
                    t = r;
                    return;
                }
                let n = am[r.type];
                r.type === "atrule" && r.name === "font-face"
                    ? (t = r)
                    : n.every(
                          (a) =>
                              (r[a] ?? "").replace(/\s+/g, " ") ===
                              (t[a] ?? "").replace(/\s+/g, " ")
                      )
                    ? (r.nodes && t.append(r.nodes), r.remove())
                    : (t = r);
            }),
                e.each((r) => {
                    r.type === "atrule" && i(r);
                });
        }
        return (e) => {
            i(e);
        };
    }
    var am,
        z2,
        om = C(() => {
            l();
            (am = { atrule: ["name", "params"], rule: ["selector"] }),
                (z2 = new Set(Object.keys(am)));
        });
    function Vo() {
        return (i) => {
            i.walkRules((e) => {
                let t = new Map(),
                    r = new Set([]),
                    n = new Map();
                e.walkDecls((a) => {
                    if (a.parent === e) {
                        if (t.has(a.prop)) {
                            if (t.get(a.prop).value === a.value) {
                                r.add(t.get(a.prop)), t.set(a.prop, a);
                                return;
                            }
                            n.has(a.prop) || n.set(a.prop, new Set()),
                                n.get(a.prop).add(t.get(a.prop)),
                                n.get(a.prop).add(a);
                        }
                        t.set(a.prop, a);
                    }
                });
                for (let a of r) a.remove();
                for (let a of n.values()) {
                    let s = new Map();
                    for (let o of a) {
                        let u = U2(o.value);
                        u !== null &&
                            (s.has(u) || s.set(u, new Set()), s.get(u).add(o));
                    }
                    for (let o of s.values()) {
                        let u = Array.from(o).slice(0, -1);
                        for (let c of u) c.remove();
                    }
                }
            });
        };
    }
    function U2(i) {
        let e = /^-?\d*.?\d+([\w%]+)?$/g.exec(i);
        return e ? e[1] ?? V2 : null;
    }
    var V2,
        lm = C(() => {
            l();
            V2 = Symbol("unitless-number");
        });
    function W2(i) {
        if (!i.walkAtRules) return;
        let e = new Set();
        if (
            (i.walkAtRules("apply", (t) => {
                e.add(t.parent);
            }),
            e.size !== 0)
        )
            for (let t of e) {
                let r = [],
                    n = [];
                for (let a of t.nodes)
                    a.type === "atrule" && a.name === "apply"
                        ? (n.length > 0 && (r.push(n), (n = [])), r.push([a]))
                        : n.push(a);
                if ((n.length > 0 && r.push(n), r.length !== 1)) {
                    for (let a of [...r].reverse()) {
                        let s = t.clone({ nodes: [] });
                        s.append(a), t.after(s);
                    }
                    t.remove();
                }
            }
    }
    function Ln() {
        return (i) => {
            W2(i);
        };
    }
    var um = C(() => {
        l();
    });
    function G2(i) {
        return i.type === "root";
    }
    function H2(i) {
        return i.type === "atrule" && i.name === "layer";
    }
    function fm(i) {
        return (e, t) => {
            let r = !1;
            e.walkAtRules("tailwind", (n) => {
                if (r) return !1;
                if (n.parent && !(G2(n.parent) || H2(n.parent)))
                    return (
                        (r = !0),
                        n.warn(
                            t,
                            [
                                "Nested @tailwind rules were detected, but are not supported.",
                                "Consider using a prefix to scope Tailwind's classes: https://tailwindcss.com/docs/configuration#prefix",
                                "Alternatively, use the important selector strategy: https://tailwindcss.com/docs/configuration#selector-strategy",
                            ].join(`
`)
                        ),
                        !1
                    );
            }),
                e.walkRules((n) => {
                    if (r) return !1;
                    n.walkRules(
                        (a) => (
                            (r = !0),
                            a.warn(
                                t,
                                [
                                    "Nested CSS was detected, but CSS nesting has not been configured correctly.",
                                    "Please enable a CSS nesting plugin *before* Tailwind in your configuration.",
                                    "See how here: https://tailwindcss.com/docs/using-with-preprocessors#nesting",
                                ].join(`
`)
                            ),
                            !1
                        )
                    );
                });
        };
    }
    var cm = C(() => {
        l();
    });
    function $n(i) {
        return async function (e, t) {
            let { tailwindDirectives: r, applyDirectives: n } = Ao(e);
            fm()(e, t), Ln()(e, t);
            let a = i({
                tailwindDirectives: r,
                applyDirectives: n,
                registerDependency(s) {
                    t.messages.push({
                        plugin: "tailwindcss",
                        parent: t.opts.from,
                        ...s,
                    });
                },
                createContext(s, o) {
                    return go(s, o, e);
                },
            })(e, t);
            if (a.tailwindConfig.separator === "-")
                throw new Error(
                    "The '-' character cannot be used as a custom separator in JIT mode due to parsing ambiguity. Please use another character like '_' instead."
                );
            _u(a.tailwindConfig),
                await Eo(a)(e, t),
                Ln()(e, t),
                To(a)(e, t),
                em(a)(e, t),
                rm(a)(e, t),
                jo(a)(e, t),
                zo(a)(e, t),
                Vo(a)(e, t);
        };
    }
    var pm = C(() => {
        l();
        yh();
        Oh();
        Rh();
        tm();
        im();
        sm();
        om();
        lm();
        um();
        cm();
        Xr();
        De();
    });
    function dm(i, e) {
        let t = null,
            r = null;
        return (
            i.walkAtRules("config", (n) => {
                if (
                    ((r = n.source?.input.file ?? e.opts.from ?? null),
                    r === null)
                )
                    throw n.error(
                        "The `@config` directive cannot be used without setting `from` in your PostCSS config."
                    );
                if (t)
                    throw n.error(
                        "Only one `@config` directive is allowed per file."
                    );
                let a = n.params.match(/(['"])(.*?)\1/);
                if (!a)
                    throw n.error(
                        "A path is required when using the `@config` directive."
                    );
                let s = a[2];
                if (Z.isAbsolute(s))
                    throw n.error(
                        "The `@config` directive cannot be used with an absolute path."
                    );
                if (((t = Z.resolve(Z.dirname(r), s)), !te.existsSync(t)))
                    throw n.error(
                        `The config file at "${s}" does not exist. Make sure the path is correct and the file exists.`
                    );
                n.remove();
            }),
            t || null
        );
    }
    var hm = C(() => {
        l();
        ze();
        mt();
    });
    var mm = v((v4, Uo) => {
        l();
        gh();
        pm();
        ot();
        hm();
        Uo.exports = function (e) {
            return {
                postcssPlugin: "tailwindcss",
                plugins: [
                    Pe.DEBUG &&
                        function (t) {
                            return (
                                console.log(`
`),
                                console.time("JIT TOTAL"),
                                t
                            );
                        },
                    async function (t, r) {
                        e = dm(t, r) ?? e;
                        let n = Co(e);
                        if (t.type === "document") {
                            let a = t.nodes.filter((s) => s.type === "root");
                            for (let s of a)
                                s.type === "root" && (await $n(n)(s, r));
                            return;
                        }
                        await $n(n)(t, r);
                    },
                    !1,
                    Pe.DEBUG &&
                        function (t) {
                            return (
                                console.timeEnd("JIT TOTAL"),
                                console.log(`
`),
                                t
                            );
                        },
                ].filter(Boolean),
            };
        };
        Uo.exports.postcss = !0;
    });
    var ym = v((x4, gm) => {
        l();
        gm.exports = mm();
    });
    var Wo = v((k4, wm) => {
        l();
        wm.exports = () => [
            "and_chr 114",
            "and_uc 15.5",
            "chrome 114",
            "chrome 113",
            "chrome 109",
            "edge 114",
            "firefox 114",
            "ios_saf 16.5",
            "ios_saf 16.4",
            "ios_saf 16.3",
            "ios_saf 16.1",
            "opera 99",
            "safari 16.5",
            "samsung 21",
        ];
    });
    var jn = {};
    Ae(jn, { agents: () => Y2, feature: () => Q2 });
    function Q2() {
        return {
            status: "cr",
            title: "CSS Feature Queries",
            stats: {
                ie: {
                    6: "n",
                    7: "n",
                    8: "n",
                    9: "n",
                    10: "n",
                    11: "n",
                    5.5: "n",
                },
                edge: {
                    12: "y",
                    13: "y",
                    14: "y",
                    15: "y",
                    16: "y",
                    17: "y",
                    18: "y",
                    79: "y",
                    80: "y",
                    81: "y",
                    83: "y",
                    84: "y",
                    85: "y",
                    86: "y",
                    87: "y",
                    88: "y",
                    89: "y",
                    90: "y",
                    91: "y",
                    92: "y",
                    93: "y",
                    94: "y",
                    95: "y",
                    96: "y",
                    97: "y",
                    98: "y",
                    99: "y",
                    100: "y",
                    101: "y",
                    102: "y",
                    103: "y",
                    104: "y",
                    105: "y",
                    106: "y",
                    107: "y",
                    108: "y",
                    109: "y",
                    110: "y",
                    111: "y",
                    112: "y",
                    113: "y",
                    114: "y",
                },
                firefox: {
                    2: "n",
                    3: "n",
                    4: "n",
                    5: "n",
                    6: "n",
                    7: "n",
                    8: "n",
                    9: "n",
                    10: "n",
                    11: "n",
                    12: "n",
                    13: "n",
                    14: "n",
                    15: "n",
                    16: "n",
                    17: "n",
                    18: "n",
                    19: "n",
                    20: "n",
                    21: "n",
                    22: "y",
                    23: "y",
                    24: "y",
                    25: "y",
                    26: "y",
                    27: "y",
                    28: "y",
                    29: "y",
                    30: "y",
                    31: "y",
                    32: "y",
                    33: "y",
                    34: "y",
                    35: "y",
                    36: "y",
                    37: "y",
                    38: "y",
                    39: "y",
                    40: "y",
                    41: "y",
                    42: "y",
                    43: "y",
                    44: "y",
                    45: "y",
                    46: "y",
                    47: "y",
                    48: "y",
                    49: "y",
                    50: "y",
                    51: "y",
                    52: "y",
                    53: "y",
                    54: "y",
                    55: "y",
                    56: "y",
                    57: "y",
                    58: "y",
                    59: "y",
                    60: "y",
                    61: "y",
                    62: "y",
                    63: "y",
                    64: "y",
                    65: "y",
                    66: "y",
                    67: "y",
                    68: "y",
                    69: "y",
                    70: "y",
                    71: "y",
                    72: "y",
                    73: "y",
                    74: "y",
                    75: "y",
                    76: "y",
                    77: "y",
                    78: "y",
                    79: "y",
                    80: "y",
                    81: "y",
                    82: "y",
                    83: "y",
                    84: "y",
                    85: "y",
                    86: "y",
                    87: "y",
                    88: "y",
                    89: "y",
                    90: "y",
                    91: "y",
                    92: "y",
                    93: "y",
                    94: "y",
                    95: "y",
                    96: "y",
                    97: "y",
                    98: "y",
                    99: "y",
                    100: "y",
                    101: "y",
                    102: "y",
                    103: "y",
                    104: "y",
                    105: "y",
                    106: "y",
                    107: "y",
                    108: "y",
                    109: "y",
                    110: "y",
                    111: "y",
                    112: "y",
                    113: "y",
                    114: "y",
                    115: "y",
                    116: "y",
                    117: "y",
                    3.5: "n",
                    3.6: "n",
                },
                chrome: {
                    4: "n",
                    5: "n",
                    6: "n",
                    7: "n",
                    8: "n",
                    9: "n",
                    10: "n",
                    11: "n",
                    12: "n",
                    13: "n",
                    14: "n",
                    15: "n",
                    16: "n",
                    17: "n",
                    18: "n",
                    19: "n",
                    20: "n",
                    21: "n",
                    22: "n",
                    23: "n",
                    24: "n",
                    25: "n",
                    26: "n",
                    27: "n",
                    28: "y",
                    29: "y",
                    30: "y",
                    31: "y",
                    32: "y",
                    33: "y",
                    34: "y",
                    35: "y",
                    36: "y",
                    37: "y",
                    38: "y",
                    39: "y",
                    40: "y",
                    41: "y",
                    42: "y",
                    43: "y",
                    44: "y",
                    45: "y",
                    46: "y",
                    47: "y",
                    48: "y",
                    49: "y",
                    50: "y",
                    51: "y",
                    52: "y",
                    53: "y",
                    54: "y",
                    55: "y",
                    56: "y",
                    57: "y",
                    58: "y",
                    59: "y",
                    60: "y",
                    61: "y",
                    62: "y",
                    63: "y",
                    64: "y",
                    65: "y",
                    66: "y",
                    67: "y",
                    68: "y",
                    69: "y",
                    70: "y",
                    71: "y",
                    72: "y",
                    73: "y",
                    74: "y",
                    75: "y",
                    76: "y",
                    77: "y",
                    78: "y",
                    79: "y",
                    80: "y",
                    81: "y",
                    83: "y",
                    84: "y",
                    85: "y",
                    86: "y",
                    87: "y",
                    88: "y",
                    89: "y",
                    90: "y",
                    91: "y",
                    92: "y",
                    93: "y",
                    94: "y",
                    95: "y",
                    96: "y",
                    97: "y",
                    98: "y",
                    99: "y",
                    100: "y",
                    101: "y",
                    102: "y",
                    103: "y",
                    104: "y",
                    105: "y",
                    106: "y",
                    107: "y",
                    108: "y",
                    109: "y",
                    110: "y",
                    111: "y",
                    112: "y",
                    113: "y",
                    114: "y",
                    115: "y",
                    116: "y",
                    117: "y",
                },
                safari: {
                    4: "n",
                    5: "n",
                    6: "n",
                    7: "n",
                    8: "n",
                    9: "y",
                    10: "y",
                    11: "y",
                    12: "y",
                    13: "y",
                    14: "y",
                    15: "y",
                    17: "y",
                    9.1: "y",
                    10.1: "y",
                    11.1: "y",
                    12.1: "y",
                    13.1: "y",
                    14.1: "y",
                    15.1: "y",
                    "15.2-15.3": "y",
                    15.4: "y",
                    15.5: "y",
                    15.6: "y",
                    "16.0": "y",
                    16.1: "y",
                    16.2: "y",
                    16.3: "y",
                    16.4: "y",
                    16.5: "y",
                    16.6: "y",
                    TP: "y",
                    3.1: "n",
                    3.2: "n",
                    5.1: "n",
                    6.1: "n",
                    7.1: "n",
                },
                opera: {
                    9: "n",
                    11: "n",
                    12: "n",
                    15: "y",
                    16: "y",
                    17: "y",
                    18: "y",
                    19: "y",
                    20: "y",
                    21: "y",
                    22: "y",
                    23: "y",
                    24: "y",
                    25: "y",
                    26: "y",
                    27: "y",
                    28: "y",
                    29: "y",
                    30: "y",
                    31: "y",
                    32: "y",
                    33: "y",
                    34: "y",
                    35: "y",
                    36: "y",
                    37: "y",
                    38: "y",
                    39: "y",
                    40: "y",
                    41: "y",
                    42: "y",
                    43: "y",
                    44: "y",
                    45: "y",
                    46: "y",
                    47: "y",
                    48: "y",
                    49: "y",
                    50: "y",
                    51: "y",
                    52: "y",
                    53: "y",
                    54: "y",
                    55: "y",
                    56: "y",
                    57: "y",
                    58: "y",
                    60: "y",
                    62: "y",
                    63: "y",
                    64: "y",
                    65: "y",
                    66: "y",
                    67: "y",
                    68: "y",
                    69: "y",
                    70: "y",
                    71: "y",
                    72: "y",
                    73: "y",
                    74: "y",
                    75: "y",
                    76: "y",
                    77: "y",
                    78: "y",
                    79: "y",
                    80: "y",
                    81: "y",
                    82: "y",
                    83: "y",
                    84: "y",
                    85: "y",
                    86: "y",
                    87: "y",
                    88: "y",
                    89: "y",
                    90: "y",
                    91: "y",
                    92: "y",
                    93: "y",
                    94: "y",
                    95: "y",
                    96: "y",
                    97: "y",
                    98: "y",
                    99: "y",
                    100: "y",
                    12.1: "y",
                    "9.5-9.6": "n",
                    "10.0-10.1": "n",
                    10.5: "n",
                    10.6: "n",
                    11.1: "n",
                    11.5: "n",
                    11.6: "n",
                },
                ios_saf: {
                    8: "n",
                    17: "y",
                    "9.0-9.2": "y",
                    9.3: "y",
                    "10.0-10.2": "y",
                    10.3: "y",
                    "11.0-11.2": "y",
                    "11.3-11.4": "y",
                    "12.0-12.1": "y",
                    "12.2-12.5": "y",
                    "13.0-13.1": "y",
                    13.2: "y",
                    13.3: "y",
                    "13.4-13.7": "y",
                    "14.0-14.4": "y",
                    "14.5-14.8": "y",
                    "15.0-15.1": "y",
                    "15.2-15.3": "y",
                    15.4: "y",
                    15.5: "y",
                    15.6: "y",
                    "16.0": "y",
                    16.1: "y",
                    16.2: "y",
                    16.3: "y",
                    16.4: "y",
                    16.5: "y",
                    16.6: "y",
                    3.2: "n",
                    "4.0-4.1": "n",
                    "4.2-4.3": "n",
                    "5.0-5.1": "n",
                    "6.0-6.1": "n",
                    "7.0-7.1": "n",
                    "8.1-8.4": "n",
                },
                op_mini: { all: "y" },
                android: {
                    3: "n",
                    4: "n",
                    114: "y",
                    4.4: "y",
                    "4.4.3-4.4.4": "y",
                    2.1: "n",
                    2.2: "n",
                    2.3: "n",
                    4.1: "n",
                    "4.2-4.3": "n",
                },
                bb: { 7: "n", 10: "n" },
                op_mob: {
                    10: "n",
                    11: "n",
                    12: "n",
                    73: "y",
                    11.1: "n",
                    11.5: "n",
                    12.1: "n",
                },
                and_chr: { 114: "y" },
                and_ff: { 115: "y" },
                ie_mob: { 10: "n", 11: "n" },
                and_uc: { 15.5: "y" },
                samsung: {
                    4: "y",
                    20: "y",
                    21: "y",
                    "5.0-5.4": "y",
                    "6.2-6.4": "y",
                    "7.2-7.4": "y",
                    8.2: "y",
                    9.2: "y",
                    10.1: "y",
                    "11.1-11.2": "y",
                    "12.0": "y",
                    "13.0": "y",
                    "14.0": "y",
                    "15.0": "y",
                    "16.0": "y",
                    "17.0": "y",
                    "18.0": "y",
                    "19.0": "y",
                },
                and_qq: { 13.1: "y" },
                baidu: { 13.18: "y" },
                kaios: { 2.5: "y", "3.0-3.1": "y" },
            },
        };
    }
    var Y2,
        zn = C(() => {
            l();
            Y2 = {
                ie: { prefix: "ms" },
                edge: {
                    prefix: "webkit",
                    prefix_exceptions: {
                        12: "ms",
                        13: "ms",
                        14: "ms",
                        15: "ms",
                        16: "ms",
                        17: "ms",
                        18: "ms",
                    },
                },
                firefox: { prefix: "moz" },
                chrome: { prefix: "webkit" },
                safari: { prefix: "webkit" },
                opera: {
                    prefix: "webkit",
                    prefix_exceptions: {
                        9: "o",
                        11: "o",
                        12: "o",
                        "9.5-9.6": "o",
                        "10.0-10.1": "o",
                        10.5: "o",
                        10.6: "o",
                        11.1: "o",
                        11.5: "o",
                        11.6: "o",
                        12.1: "o",
                    },
                },
                ios_saf: { prefix: "webkit" },
                op_mini: { prefix: "o" },
                android: { prefix: "webkit" },
                bb: { prefix: "webkit" },
                op_mob: { prefix: "o", prefix_exceptions: { 73: "webkit" } },
                and_chr: { prefix: "webkit" },
                and_ff: { prefix: "moz" },
                ie_mob: { prefix: "ms" },
                and_uc: {
                    prefix: "webkit",
                    prefix_exceptions: { 15.5: "webkit" },
                },
                samsung: { prefix: "webkit" },
                and_qq: { prefix: "webkit" },
                baidu: { prefix: "webkit" },
                kaios: { prefix: "moz" },
            };
        });
    var bm = v(() => {
        l();
    });
    var ue = v((A4, ft) => {
        l();
        var { list: Go } = me();
        ft.exports.error = function (i) {
            let e = new Error(i);
            throw ((e.autoprefixer = !0), e);
        };
        ft.exports.uniq = function (i) {
            return [...new Set(i)];
        };
        ft.exports.removeNote = function (i) {
            return i.includes(" ") ? i.split(" ")[0] : i;
        };
        ft.exports.escapeRegexp = function (i) {
            return i.replace(/[$()*+-.?[\\\]^{|}]/g, "\\$&");
        };
        ft.exports.regexp = function (i, e = !0) {
            return (
                e && (i = this.escapeRegexp(i)),
                new RegExp(`(^|[\\s,(])(${i}($|[\\s(,]))`, "gi")
            );
        };
        ft.exports.editList = function (i, e) {
            let t = Go.comma(i),
                r = e(t, []);
            if (t === r) return i;
            let n = i.match(/,\s*/);
            return (n = n ? n[0] : ", "), r.join(n);
        };
        ft.exports.splitSelector = function (i) {
            return Go.comma(i).map((e) =>
                Go.space(e).map((t) => t.split(/(?=\.|#)/g))
            );
        };
    });
    var ct = v((_4, km) => {
        l();
        var J2 = Wo(),
            vm = (zn(), jn).agents,
            X2 = ue(),
            xm = class {
                static prefixes() {
                    if (this.prefixesCache) return this.prefixesCache;
                    this.prefixesCache = [];
                    for (let e in vm)
                        this.prefixesCache.push(`-${vm[e].prefix}-`);
                    return (
                        (this.prefixesCache = X2.uniq(this.prefixesCache).sort(
                            (e, t) => t.length - e.length
                        )),
                        this.prefixesCache
                    );
                }
                static withPrefix(e) {
                    return (
                        this.prefixesRegexp ||
                            (this.prefixesRegexp = new RegExp(
                                this.prefixes().join("|")
                            )),
                        this.prefixesRegexp.test(e)
                    );
                }
                constructor(e, t, r, n) {
                    (this.data = e),
                        (this.options = r || {}),
                        (this.browserslistOpts = n || {}),
                        (this.selected = this.parse(t));
                }
                parse(e) {
                    let t = {};
                    for (let r in this.browserslistOpts)
                        t[r] = this.browserslistOpts[r];
                    return (t.path = this.options.from), J2(e, t);
                }
                prefix(e) {
                    let [t, r] = e.split(" "),
                        n = this.data[t],
                        a = n.prefix_exceptions && n.prefix_exceptions[r];
                    return a || (a = n.prefix), `-${a}-`;
                }
                isSelected(e) {
                    return this.selected.includes(e);
                }
            };
        km.exports = xm;
    });
    var ii = v((E4, Sm) => {
        l();
        Sm.exports = {
            prefix(i) {
                let e = i.match(/^(-\w+-)/);
                return e ? e[0] : "";
            },
            unprefixed(i) {
                return i.replace(/^-\w+-/, "");
            },
        };
    });
    var Vt = v((O4, Am) => {
        l();
        var K2 = ct(),
            Cm = ii(),
            Z2 = ue();
        function Ho(i, e) {
            let t = new i.constructor();
            for (let r of Object.keys(i || {})) {
                let n = i[r];
                r === "parent" && typeof n == "object"
                    ? e && (t[r] = e)
                    : r === "source" || r === null
                    ? (t[r] = n)
                    : Array.isArray(n)
                    ? (t[r] = n.map((a) => Ho(a, t)))
                    : r !== "_autoprefixerPrefix" &&
                      r !== "_autoprefixerValues" &&
                      r !== "proxyCache" &&
                      (typeof n == "object" && n !== null && (n = Ho(n, t)),
                      (t[r] = n));
            }
            return t;
        }
        var Vn = class {
            static hack(e) {
                return (
                    this.hacks || (this.hacks = {}),
                    e.names.map((t) => ((this.hacks[t] = e), this.hacks[t]))
                );
            }
            static load(e, t, r) {
                let n = this.hacks && this.hacks[e];
                return n ? new n(e, t, r) : new this(e, t, r);
            }
            static clone(e, t) {
                let r = Ho(e);
                for (let n in t) r[n] = t[n];
                return r;
            }
            constructor(e, t, r) {
                (this.prefixes = t), (this.name = e), (this.all = r);
            }
            parentPrefix(e) {
                let t;
                return (
                    typeof e._autoprefixerPrefix != "undefined"
                        ? (t = e._autoprefixerPrefix)
                        : e.type === "decl" && e.prop[0] === "-"
                        ? (t = Cm.prefix(e.prop))
                        : e.type === "root"
                        ? (t = !1)
                        : e.type === "rule" &&
                          e.selector.includes(":-") &&
                          /:(-\w+-)/.test(e.selector)
                        ? (t = e.selector.match(/:(-\w+-)/)[1])
                        : e.type === "atrule" && e.name[0] === "-"
                        ? (t = Cm.prefix(e.name))
                        : (t = this.parentPrefix(e.parent)),
                    K2.prefixes().includes(t) || (t = !1),
                    (e._autoprefixerPrefix = t),
                    e._autoprefixerPrefix
                );
            }
            process(e, t) {
                if (!this.check(e)) return;
                let r = this.parentPrefix(e),
                    n = this.prefixes.filter(
                        (s) => !r || r === Z2.removeNote(s)
                    ),
                    a = [];
                for (let s of n) this.add(e, s, a.concat([s]), t) && a.push(s);
                return a;
            }
            clone(e, t) {
                return Vn.clone(e, t);
            }
        };
        Am.exports = Vn;
    });
    var R = v((T4, Om) => {
        l();
        var eA = Vt(),
            tA = ct(),
            _m = ue(),
            Em = class extends eA {
                check() {
                    return !0;
                }
                prefixed(e, t) {
                    return t + e;
                }
                normalize(e) {
                    return e;
                }
                otherPrefixes(e, t) {
                    for (let r of tA.prefixes())
                        if (r !== t && e.includes(r)) return !0;
                    return !1;
                }
                set(e, t) {
                    return (e.prop = this.prefixed(e.prop, t)), e;
                }
                needCascade(e) {
                    return (
                        e._autoprefixerCascade ||
                            (e._autoprefixerCascade =
                                this.all.options.cascade !== !1 &&
                                e.raw("before").includes(`
`)),
                        e._autoprefixerCascade
                    );
                }
                maxPrefixed(e, t) {
                    if (t._autoprefixerMax) return t._autoprefixerMax;
                    let r = 0;
                    for (let n of e)
                        (n = _m.removeNote(n)), n.length > r && (r = n.length);
                    return (t._autoprefixerMax = r), t._autoprefixerMax;
                }
                calcBefore(e, t, r = "") {
                    let a = this.maxPrefixed(e, t) - _m.removeNote(r).length,
                        s = t.raw("before");
                    return a > 0 && (s += Array(a).fill(" ").join("")), s;
                }
                restoreBefore(e) {
                    let t = e.raw("before").split(`
`),
                        r = t[t.length - 1];
                    this.all.group(e).up((n) => {
                        let a = n.raw("before").split(`
`),
                            s = a[a.length - 1];
                        s.length < r.length && (r = s);
                    }),
                        (t[t.length - 1] = r),
                        (e.raws.before = t.join(`
`));
                }
                insert(e, t, r) {
                    let n = this.set(this.clone(e), t);
                    if (
                        !(
                            !n ||
                            e.parent.some(
                                (s) => s.prop === n.prop && s.value === n.value
                            )
                        )
                    )
                        return (
                            this.needCascade(e) &&
                                (n.raws.before = this.calcBefore(r, e, t)),
                            e.parent.insertBefore(e, n)
                        );
                }
                isAlready(e, t) {
                    let r = this.all.group(e).up((n) => n.prop === t);
                    return (
                        r || (r = this.all.group(e).down((n) => n.prop === t)),
                        r
                    );
                }
                add(e, t, r, n) {
                    let a = this.prefixed(e.prop, t);
                    if (
                        !(
                            this.isAlready(e, a) ||
                            this.otherPrefixes(e.value, t)
                        )
                    )
                        return this.insert(e, t, r, n);
                }
                process(e, t) {
                    if (!this.needCascade(e)) {
                        super.process(e, t);
                        return;
                    }
                    let r = super.process(e, t);
                    !r ||
                        !r.length ||
                        (this.restoreBefore(e),
                        (e.raws.before = this.calcBefore(r, e)));
                }
                old(e, t) {
                    return [this.prefixed(e, t)];
                }
            };
        Om.exports = Em;
    });
    var Pm = v((P4, Tm) => {
        l();
        Tm.exports = function i(e) {
            return {
                mul: (t) => new i(e * t),
                div: (t) => new i(e / t),
                simplify: () => new i(e),
                toString: () => e.toString(),
            };
        };
    });
    var qm = v((D4, Im) => {
        l();
        var rA = Pm(),
            iA = Vt(),
            Yo = ue(),
            nA = /(min|max)-resolution\s*:\s*\d*\.?\d+(dppx|dpcm|dpi|x)/gi,
            sA = /(min|max)-resolution(\s*:\s*)(\d*\.?\d+)(dppx|dpcm|dpi|x)/i,
            Dm = class extends iA {
                prefixName(e, t) {
                    return e === "-moz-"
                        ? t + "--moz-device-pixel-ratio"
                        : e + t + "-device-pixel-ratio";
                }
                prefixQuery(e, t, r, n, a) {
                    return (
                        (n = new rA(n)),
                        a === "dpi"
                            ? (n = n.div(96))
                            : a === "dpcm" && (n = n.mul(2.54).div(96)),
                        (n = n.simplify()),
                        e === "-o-" && (n = n.n + "/" + n.d),
                        this.prefixName(e, t) + r + n
                    );
                }
                clean(e) {
                    if (!this.bad) {
                        this.bad = [];
                        for (let t of this.prefixes)
                            this.bad.push(this.prefixName(t, "min")),
                                this.bad.push(this.prefixName(t, "max"));
                    }
                    e.params = Yo.editList(e.params, (t) =>
                        t.filter((r) => this.bad.every((n) => !r.includes(n)))
                    );
                }
                process(e) {
                    let t = this.parentPrefix(e),
                        r = t ? [t] : this.prefixes;
                    e.params = Yo.editList(e.params, (n, a) => {
                        for (let s of n) {
                            if (
                                !s.includes("min-resolution") &&
                                !s.includes("max-resolution")
                            ) {
                                a.push(s);
                                continue;
                            }
                            for (let o of r) {
                                let u = s.replace(nA, (c) => {
                                    let f = c.match(sA);
                                    return this.prefixQuery(
                                        o,
                                        f[1],
                                        f[2],
                                        f[3],
                                        f[4]
                                    );
                                });
                                a.push(u);
                            }
                            a.push(s);
                        }
                        return Yo.uniq(a);
                    });
                }
            };
        Im.exports = Dm;
    });
    var Mm = v((I4, Rm) => {
        l();
        var Qo = "(".charCodeAt(0),
            Jo = ")".charCodeAt(0),
            Un = "'".charCodeAt(0),
            Xo = '"'.charCodeAt(0),
            Ko = "\\".charCodeAt(0),
            Ut = "/".charCodeAt(0),
            Zo = ",".charCodeAt(0),
            el = ":".charCodeAt(0),
            Wn = "*".charCodeAt(0),
            aA = "u".charCodeAt(0),
            oA = "U".charCodeAt(0),
            lA = "+".charCodeAt(0),
            uA = /^[a-f0-9?-]+$/i;
        Rm.exports = function (i) {
            for (
                var e = [],
                    t = i,
                    r,
                    n,
                    a,
                    s,
                    o,
                    u,
                    c,
                    f,
                    p = 0,
                    d = t.charCodeAt(p),
                    h = t.length,
                    y = [{ nodes: e }],
                    x = 0,
                    w,
                    b = "",
                    k = "",
                    S = "";
                p < h;

            )
                if (d <= 32) {
                    r = p;
                    do (r += 1), (d = t.charCodeAt(r));
                    while (d <= 32);
                    (s = t.slice(p, r)),
                        (a = e[e.length - 1]),
                        d === Jo && x
                            ? (S = s)
                            : a && a.type === "div"
                            ? ((a.after = s), (a.sourceEndIndex += s.length))
                            : d === Zo ||
                              d === el ||
                              (d === Ut &&
                                  t.charCodeAt(r + 1) !== Wn &&
                                  (!w ||
                                      (w &&
                                          w.type === "function" &&
                                          w.value !== "calc")))
                            ? (k = s)
                            : e.push({
                                  type: "space",
                                  sourceIndex: p,
                                  sourceEndIndex: r,
                                  value: s,
                              }),
                        (p = r);
                } else if (d === Un || d === Xo) {
                    (r = p),
                        (n = d === Un ? "'" : '"'),
                        (s = { type: "string", sourceIndex: p, quote: n });
                    do
                        if (((o = !1), (r = t.indexOf(n, r + 1)), ~r))
                            for (u = r; t.charCodeAt(u - 1) === Ko; )
                                (u -= 1), (o = !o);
                        else (t += n), (r = t.length - 1), (s.unclosed = !0);
                    while (o);
                    (s.value = t.slice(p + 1, r)),
                        (s.sourceEndIndex = s.unclosed ? r : r + 1),
                        e.push(s),
                        (p = r + 1),
                        (d = t.charCodeAt(p));
                } else if (d === Ut && t.charCodeAt(p + 1) === Wn)
                    (r = t.indexOf("*/", p)),
                        (s = {
                            type: "comment",
                            sourceIndex: p,
                            sourceEndIndex: r + 2,
                        }),
                        r === -1 &&
                            ((s.unclosed = !0),
                            (r = t.length),
                            (s.sourceEndIndex = r)),
                        (s.value = t.slice(p + 2, r)),
                        e.push(s),
                        (p = r + 2),
                        (d = t.charCodeAt(p));
                else if (
                    (d === Ut || d === Wn) &&
                    w &&
                    w.type === "function" &&
                    w.value === "calc"
                )
                    (s = t[p]),
                        e.push({
                            type: "word",
                            sourceIndex: p - k.length,
                            sourceEndIndex: p + s.length,
                            value: s,
                        }),
                        (p += 1),
                        (d = t.charCodeAt(p));
                else if (d === Ut || d === Zo || d === el)
                    (s = t[p]),
                        e.push({
                            type: "div",
                            sourceIndex: p - k.length,
                            sourceEndIndex: p + s.length,
                            value: s,
                            before: k,
                            after: "",
                        }),
                        (k = ""),
                        (p += 1),
                        (d = t.charCodeAt(p));
                else if (Qo === d) {
                    r = p;
                    do (r += 1), (d = t.charCodeAt(r));
                    while (d <= 32);
                    if (
                        ((f = p),
                        (s = {
                            type: "function",
                            sourceIndex: p - b.length,
                            value: b,
                            before: t.slice(f + 1, r),
                        }),
                        (p = r),
                        b === "url" && d !== Un && d !== Xo)
                    ) {
                        r -= 1;
                        do
                            if (((o = !1), (r = t.indexOf(")", r + 1)), ~r))
                                for (u = r; t.charCodeAt(u - 1) === Ko; )
                                    (u -= 1), (o = !o);
                            else
                                (t += ")"),
                                    (r = t.length - 1),
                                    (s.unclosed = !0);
                        while (o);
                        c = r;
                        do (c -= 1), (d = t.charCodeAt(c));
                        while (d <= 32);
                        f < c
                            ? (p !== c + 1
                                  ? (s.nodes = [
                                        {
                                            type: "word",
                                            sourceIndex: p,
                                            sourceEndIndex: c + 1,
                                            value: t.slice(p, c + 1),
                                        },
                                    ])
                                  : (s.nodes = []),
                              s.unclosed && c + 1 !== r
                                  ? ((s.after = ""),
                                    s.nodes.push({
                                        type: "space",
                                        sourceIndex: c + 1,
                                        sourceEndIndex: r,
                                        value: t.slice(c + 1, r),
                                    }))
                                  : ((s.after = t.slice(c + 1, r)),
                                    (s.sourceEndIndex = r)))
                            : ((s.after = ""), (s.nodes = [])),
                            (p = r + 1),
                            (s.sourceEndIndex = s.unclosed ? r : p),
                            (d = t.charCodeAt(p)),
                            e.push(s);
                    } else
                        (x += 1),
                            (s.after = ""),
                            (s.sourceEndIndex = p + 1),
                            e.push(s),
                            y.push(s),
                            (e = s.nodes = []),
                            (w = s);
                    b = "";
                } else if (Jo === d && x)
                    (p += 1),
                        (d = t.charCodeAt(p)),
                        (w.after = S),
                        (w.sourceEndIndex += S.length),
                        (S = ""),
                        (x -= 1),
                        (y[y.length - 1].sourceEndIndex = p),
                        y.pop(),
                        (w = y[x]),
                        (e = w.nodes);
                else {
                    r = p;
                    do d === Ko && (r += 1), (r += 1), (d = t.charCodeAt(r));
                    while (
                        r < h &&
                        !(
                            d <= 32 ||
                            d === Un ||
                            d === Xo ||
                            d === Zo ||
                            d === el ||
                            d === Ut ||
                            d === Qo ||
                            (d === Wn &&
                                w &&
                                w.type === "function" &&
                                w.value === "calc") ||
                            (d === Ut &&
                                w.type === "function" &&
                                w.value === "calc") ||
                            (d === Jo && x)
                        )
                    );
                    (s = t.slice(p, r)),
                        Qo === d
                            ? (b = s)
                            : (aA === s.charCodeAt(0) ||
                                  oA === s.charCodeAt(0)) &&
                              lA === s.charCodeAt(1) &&
                              uA.test(s.slice(2))
                            ? e.push({
                                  type: "unicode-range",
                                  sourceIndex: p,
                                  sourceEndIndex: r,
                                  value: s,
                              })
                            : e.push({
                                  type: "word",
                                  sourceIndex: p,
                                  sourceEndIndex: r,
                                  value: s,
                              }),
                        (p = r);
                }
            for (p = y.length - 1; p; p -= 1)
                (y[p].unclosed = !0), (y[p].sourceEndIndex = t.length);
            return y[0].nodes;
        };
    });
    var Fm = v((q4, Bm) => {
        l();
        Bm.exports = function i(e, t, r) {
            var n, a, s, o;
            for (n = 0, a = e.length; n < a; n += 1)
                (s = e[n]),
                    r || (o = t(s, n, e)),
                    o !== !1 &&
                        s.type === "function" &&
                        Array.isArray(s.nodes) &&
                        i(s.nodes, t, r),
                    r && t(s, n, e);
        };
    });
    var jm = v((R4, $m) => {
        l();
        function Nm(i, e) {
            var t = i.type,
                r = i.value,
                n,
                a;
            return e && (a = e(i)) !== void 0
                ? a
                : t === "word" || t === "space"
                ? r
                : t === "string"
                ? ((n = i.quote || ""), n + r + (i.unclosed ? "" : n))
                : t === "comment"
                ? "/*" + r + (i.unclosed ? "" : "*/")
                : t === "div"
                ? (i.before || "") + r + (i.after || "")
                : Array.isArray(i.nodes)
                ? ((n = Lm(i.nodes, e)),
                  t !== "function"
                      ? n
                      : r +
                        "(" +
                        (i.before || "") +
                        n +
                        (i.after || "") +
                        (i.unclosed ? "" : ")"))
                : r;
        }
        function Lm(i, e) {
            var t, r;
            if (Array.isArray(i)) {
                for (t = "", r = i.length - 1; ~r; r -= 1) t = Nm(i[r], e) + t;
                return t;
            }
            return Nm(i, e);
        }
        $m.exports = Lm;
    });
    var Vm = v((M4, zm) => {
        l();
        var Gn = "-".charCodeAt(0),
            Hn = "+".charCodeAt(0),
            tl = ".".charCodeAt(0),
            fA = "e".charCodeAt(0),
            cA = "E".charCodeAt(0);
        function pA(i) {
            var e = i.charCodeAt(0),
                t;
            if (e === Hn || e === Gn) {
                if (((t = i.charCodeAt(1)), t >= 48 && t <= 57)) return !0;
                var r = i.charCodeAt(2);
                return t === tl && r >= 48 && r <= 57;
            }
            return e === tl
                ? ((t = i.charCodeAt(1)), t >= 48 && t <= 57)
                : e >= 48 && e <= 57;
        }
        zm.exports = function (i) {
            var e = 0,
                t = i.length,
                r,
                n,
                a;
            if (t === 0 || !pA(i)) return !1;
            for (
                r = i.charCodeAt(e), (r === Hn || r === Gn) && e++;
                e < t && ((r = i.charCodeAt(e)), !(r < 48 || r > 57));

            )
                e += 1;
            if (
                ((r = i.charCodeAt(e)),
                (n = i.charCodeAt(e + 1)),
                r === tl && n >= 48 && n <= 57)
            )
                for (
                    e += 2;
                    e < t && ((r = i.charCodeAt(e)), !(r < 48 || r > 57));

                )
                    e += 1;
            if (
                ((r = i.charCodeAt(e)),
                (n = i.charCodeAt(e + 1)),
                (a = i.charCodeAt(e + 2)),
                (r === fA || r === cA) &&
                    ((n >= 48 && n <= 57) ||
                        ((n === Hn || n === Gn) && a >= 48 && a <= 57)))
            )
                for (
                    e += n === Hn || n === Gn ? 3 : 2;
                    e < t && ((r = i.charCodeAt(e)), !(r < 48 || r > 57));

                )
                    e += 1;
            return { number: i.slice(0, e), unit: i.slice(e) };
        };
    });
    var Yn = v((B4, Gm) => {
        l();
        var dA = Mm(),
            Um = Fm(),
            Wm = jm();
        function pt(i) {
            return this instanceof pt
                ? ((this.nodes = dA(i)), this)
                : new pt(i);
        }
        pt.prototype.toString = function () {
            return Array.isArray(this.nodes) ? Wm(this.nodes) : "";
        };
        pt.prototype.walk = function (i, e) {
            return Um(this.nodes, i, e), this;
        };
        pt.unit = Vm();
        pt.walk = Um;
        pt.stringify = Wm;
        Gm.exports = pt;
    });
    var Xm = v((F4, Jm) => {
        l();
        var { list: hA } = me(),
            Hm = Yn(),
            mA = ct(),
            Ym = ii(),
            Qm = class {
                constructor(e) {
                    (this.props = ["transition", "transition-property"]),
                        (this.prefixes = e);
                }
                add(e, t) {
                    let r,
                        n,
                        a = this.prefixes.add[e.prop],
                        s = this.ruleVendorPrefixes(e),
                        o = s || (a && a.prefixes) || [],
                        u = this.parse(e.value),
                        c = u.map((h) => this.findProp(h)),
                        f = [];
                    if (c.some((h) => h[0] === "-")) return;
                    for (let h of u) {
                        if (((n = this.findProp(h)), n[0] === "-")) continue;
                        let y = this.prefixes.add[n];
                        if (!(!y || !y.prefixes))
                            for (r of y.prefixes) {
                                if (s && !s.some((w) => r.includes(w)))
                                    continue;
                                let x = this.prefixes.prefixed(n, r);
                                x !== "-ms-transform" &&
                                    !c.includes(x) &&
                                    (this.disabled(n, r) ||
                                        f.push(this.clone(n, x, h)));
                            }
                    }
                    u = u.concat(f);
                    let p = this.stringify(u),
                        d = this.stringify(
                            this.cleanFromUnprefixed(u, "-webkit-")
                        );
                    if (
                        (o.includes("-webkit-") &&
                            this.cloneBefore(e, `-webkit-${e.prop}`, d),
                        this.cloneBefore(e, e.prop, d),
                        o.includes("-o-"))
                    ) {
                        let h = this.stringify(
                            this.cleanFromUnprefixed(u, "-o-")
                        );
                        this.cloneBefore(e, `-o-${e.prop}`, h);
                    }
                    for (r of o)
                        if (r !== "-webkit-" && r !== "-o-") {
                            let h = this.stringify(
                                this.cleanOtherPrefixes(u, r)
                            );
                            this.cloneBefore(e, r + e.prop, h);
                        }
                    p !== e.value &&
                        !this.already(e, e.prop, p) &&
                        (this.checkForWarning(t, e),
                        e.cloneBefore(),
                        (e.value = p));
                }
                findProp(e) {
                    let t = e[0].value;
                    if (/^\d/.test(t)) {
                        for (let [r, n] of e.entries())
                            if (r !== 0 && n.type === "word") return n.value;
                    }
                    return t;
                }
                already(e, t, r) {
                    return e.parent.some((n) => n.prop === t && n.value === r);
                }
                cloneBefore(e, t, r) {
                    this.already(e, t, r) ||
                        e.cloneBefore({ prop: t, value: r });
                }
                checkForWarning(e, t) {
                    if (t.prop !== "transition-property") return;
                    let r = !1,
                        n = !1;
                    t.parent.each((a) => {
                        if (
                            a.type !== "decl" ||
                            a.prop.indexOf("transition-") !== 0
                        )
                            return;
                        let s = hA.comma(a.value);
                        if (a.prop === "transition-property") {
                            s.forEach((o) => {
                                let u = this.prefixes.add[o];
                                u &&
                                    u.prefixes &&
                                    u.prefixes.length > 0 &&
                                    (r = !0);
                            });
                            return;
                        }
                        return (n = n || s.length > 1), !1;
                    }),
                        r &&
                            n &&
                            t.warn(
                                e,
                                "Replace transition-property to transition, because Autoprefixer could not support any cases of transition-property and other transition-*"
                            );
                }
                remove(e) {
                    let t = this.parse(e.value);
                    t = t.filter((s) => {
                        let o = this.prefixes.remove[this.findProp(s)];
                        return !o || !o.remove;
                    });
                    let r = this.stringify(t);
                    if (e.value === r) return;
                    if (t.length === 0) {
                        e.remove();
                        return;
                    }
                    let n = e.parent.some(
                            (s) => s.prop === e.prop && s.value === r
                        ),
                        a = e.parent.some(
                            (s) =>
                                s !== e &&
                                s.prop === e.prop &&
                                s.value.length > r.length
                        );
                    if (n || a) {
                        e.remove();
                        return;
                    }
                    e.value = r;
                }
                parse(e) {
                    let t = Hm(e),
                        r = [],
                        n = [];
                    for (let a of t.nodes)
                        n.push(a),
                            a.type === "div" &&
                                a.value === "," &&
                                (r.push(n), (n = []));
                    return r.push(n), r.filter((a) => a.length > 0);
                }
                stringify(e) {
                    if (e.length === 0) return "";
                    let t = [];
                    for (let r of e)
                        r[r.length - 1].type !== "div" && r.push(this.div(e)),
                            (t = t.concat(r));
                    return (
                        t[0].type === "div" && (t = t.slice(1)),
                        t[t.length - 1].type === "div" &&
                            (t = t.slice(0, -2 + 1 || 0)),
                        Hm.stringify({ nodes: t })
                    );
                }
                clone(e, t, r) {
                    let n = [],
                        a = !1;
                    for (let s of r)
                        !a && s.type === "word" && s.value === e
                            ? (n.push({ type: "word", value: t }), (a = !0))
                            : n.push(s);
                    return n;
                }
                div(e) {
                    for (let t of e)
                        for (let r of t)
                            if (r.type === "div" && r.value === ",") return r;
                    return { type: "div", value: ",", after: " " };
                }
                cleanOtherPrefixes(e, t) {
                    return e.filter((r) => {
                        let n = Ym.prefix(this.findProp(r));
                        return n === "" || n === t;
                    });
                }
                cleanFromUnprefixed(e, t) {
                    let r = e
                            .map((a) => this.findProp(a))
                            .filter((a) => a.slice(0, t.length) === t)
                            .map((a) => this.prefixes.unprefixed(a)),
                        n = [];
                    for (let a of e) {
                        let s = this.findProp(a),
                            o = Ym.prefix(s);
                        !r.includes(s) && (o === t || o === "") && n.push(a);
                    }
                    return n;
                }
                disabled(e, t) {
                    let r = [
                        "order",
                        "justify-content",
                        "align-self",
                        "align-content",
                    ];
                    if (e.includes("flex") || r.includes(e)) {
                        if (this.prefixes.options.flexbox === !1) return !0;
                        if (this.prefixes.options.flexbox === "no-2009")
                            return t.includes("2009");
                    }
                }
                ruleVendorPrefixes(e) {
                    let { parent: t } = e;
                    if (t.type !== "rule") return !1;
                    if (!t.selector.includes(":-")) return !1;
                    let r = mA
                        .prefixes()
                        .filter((n) => t.selector.includes(":" + n));
                    return r.length > 0 ? r : !1;
                }
            };
        Jm.exports = Qm;
    });
    var Wt = v((N4, Zm) => {
        l();
        var gA = ue(),
            Km = class {
                constructor(e, t, r, n) {
                    (this.unprefixed = e),
                        (this.prefixed = t),
                        (this.string = r || t),
                        (this.regexp = n || gA.regexp(t));
                }
                check(e) {
                    return e.includes(this.string)
                        ? !!e.match(this.regexp)
                        : !1;
                }
            };
        Zm.exports = Km;
    });
    var ke = v((L4, tg) => {
        l();
        var yA = Vt(),
            wA = Wt(),
            bA = ii(),
            vA = ue(),
            eg = class extends yA {
                static save(e, t) {
                    let r = t.prop,
                        n = [];
                    for (let a in t._autoprefixerValues) {
                        let s = t._autoprefixerValues[a];
                        if (s === t.value) continue;
                        let o,
                            u = bA.prefix(r);
                        if (u === "-pie-") continue;
                        if (u === a) {
                            (o = t.value = s), n.push(o);
                            continue;
                        }
                        let c = e.prefixed(r, a),
                            f = t.parent;
                        if (!f.every((y) => y.prop !== c)) {
                            n.push(o);
                            continue;
                        }
                        let p = s.replace(/\s+/, " ");
                        if (
                            f.some(
                                (y) =>
                                    y.prop === t.prop &&
                                    y.value.replace(/\s+/, " ") === p
                            )
                        ) {
                            n.push(o);
                            continue;
                        }
                        let h = this.clone(t, { value: s });
                        (o = t.parent.insertBefore(t, h)), n.push(o);
                    }
                    return n;
                }
                check(e) {
                    let t = e.value;
                    return t.includes(this.name)
                        ? !!t.match(this.regexp())
                        : !1;
                }
                regexp() {
                    return (
                        this.regexpCache ||
                        (this.regexpCache = vA.regexp(this.name))
                    );
                }
                replace(e, t) {
                    return e.replace(this.regexp(), `$1${t}$2`);
                }
                value(e) {
                    return e.raws.value && e.raws.value.value === e.value
                        ? e.raws.value.raw
                        : e.value;
                }
                add(e, t) {
                    e._autoprefixerValues || (e._autoprefixerValues = {});
                    let r = e._autoprefixerValues[t] || this.value(e),
                        n;
                    do
                        if (((n = r), (r = this.replace(r, t)), r === !1))
                            return;
                    while (r !== n);
                    e._autoprefixerValues[t] = r;
                }
                old(e) {
                    return new wA(this.name, e + this.name);
                }
            };
        tg.exports = eg;
    });
    var dt = v(($4, rg) => {
        l();
        rg.exports = {};
    });
    var il = v((j4, sg) => {
        l();
        var ig = Yn(),
            xA = ke(),
            kA = dt().insertAreas,
            SA = /(^|[^-])linear-gradient\(\s*(top|left|right|bottom)/i,
            CA = /(^|[^-])radial-gradient\(\s*\d+(\w*|%)\s+\d+(\w*|%)\s*,/i,
            AA = /(!\s*)?autoprefixer:\s*ignore\s+next/i,
            _A = /(!\s*)?autoprefixer\s*grid:\s*(on|off|(no-)?autoplace)/i,
            EA = [
                "width",
                "height",
                "min-width",
                "max-width",
                "min-height",
                "max-height",
                "inline-size",
                "min-inline-size",
                "max-inline-size",
                "block-size",
                "min-block-size",
                "max-block-size",
            ];
        function rl(i) {
            return i.parent.some(
                (e) =>
                    e.prop === "grid-template" ||
                    e.prop === "grid-template-areas"
            );
        }
        function OA(i) {
            let e = i.parent.some((r) => r.prop === "grid-template-rows"),
                t = i.parent.some((r) => r.prop === "grid-template-columns");
            return e && t;
        }
        var ng = class {
            constructor(e) {
                this.prefixes = e;
            }
            add(e, t) {
                let r = this.prefixes.add["@resolution"],
                    n = this.prefixes.add["@keyframes"],
                    a = this.prefixes.add["@viewport"],
                    s = this.prefixes.add["@supports"];
                e.walkAtRules((f) => {
                    if (f.name === "keyframes") {
                        if (!this.disabled(f, t)) return n && n.process(f);
                    } else if (f.name === "viewport") {
                        if (!this.disabled(f, t)) return a && a.process(f);
                    } else if (f.name === "supports") {
                        if (
                            this.prefixes.options.supports !== !1 &&
                            !this.disabled(f, t)
                        )
                            return s.process(f);
                    } else if (
                        f.name === "media" &&
                        f.params.includes("-resolution") &&
                        !this.disabled(f, t)
                    )
                        return r && r.process(f);
                }),
                    e.walkRules((f) => {
                        if (!this.disabled(f, t))
                            return this.prefixes.add.selectors.map((p) =>
                                p.process(f, t)
                            );
                    });
                function o(f) {
                    return f.parent.nodes.some((p) => {
                        if (p.type !== "decl") return !1;
                        let d =
                                p.prop === "display" &&
                                /(inline-)?grid/.test(p.value),
                            h = p.prop.startsWith("grid-template"),
                            y = /^grid-([A-z]+-)?gap/.test(p.prop);
                        return d || h || y;
                    });
                }
                function u(f) {
                    return f.parent.some(
                        (p) =>
                            p.prop === "display" &&
                            /(inline-)?flex/.test(p.value)
                    );
                }
                let c =
                    this.gridStatus(e, t) &&
                    this.prefixes.add["grid-area"] &&
                    this.prefixes.add["grid-area"].prefixes;
                return (
                    e.walkDecls((f) => {
                        if (this.disabledDecl(f, t)) return;
                        let p = f.parent,
                            d = f.prop,
                            h = f.value;
                        if (d === "grid-row-span") {
                            t.warn(
                                "grid-row-span is not part of final Grid Layout. Use grid-row.",
                                { node: f }
                            );
                            return;
                        } else if (d === "grid-column-span") {
                            t.warn(
                                "grid-column-span is not part of final Grid Layout. Use grid-column.",
                                { node: f }
                            );
                            return;
                        } else if (d === "display" && h === "box") {
                            t.warn(
                                "You should write display: flex by final spec instead of display: box",
                                { node: f }
                            );
                            return;
                        } else if (d === "text-emphasis-position")
                            (h === "under" || h === "over") &&
                                t.warn(
                                    "You should use 2 values for text-emphasis-position For example, `under left` instead of just `under`.",
                                    { node: f }
                                );
                        else if (
                            /^(align|justify|place)-(items|content)$/.test(d) &&
                            u(f)
                        )
                            (h === "start" || h === "end") &&
                                t.warn(
                                    `${h} value has mixed support, consider using flex-${h} instead`,
                                    { node: f }
                                );
                        else if (d === "text-decoration-skip" && h === "ink")
                            t.warn(
                                "Replace text-decoration-skip: ink to text-decoration-skip-ink: auto, because spec had been changed",
                                { node: f }
                            );
                        else {
                            if (c && this.gridStatus(f, t))
                                if (
                                    (f.value === "subgrid" &&
                                        t.warn("IE does not support subgrid", {
                                            node: f,
                                        }),
                                    /^(align|justify|place)-items$/.test(d) &&
                                        o(f))
                                ) {
                                    let x = d.replace("-items", "-self");
                                    t.warn(
                                        `IE does not support ${d} on grid containers. Try using ${x} on child elements instead: ${f.parent.selector} > * { ${x}: ${f.value} }`,
                                        { node: f }
                                    );
                                } else if (
                                    /^(align|justify|place)-content$/.test(d) &&
                                    o(f)
                                )
                                    t.warn(
                                        `IE does not support ${f.prop} on grid containers`,
                                        { node: f }
                                    );
                                else if (
                                    d === "display" &&
                                    f.value === "contents"
                                ) {
                                    t.warn(
                                        "Please do not use display: contents; if you have grid setting enabled",
                                        { node: f }
                                    );
                                    return;
                                } else if (f.prop === "grid-gap") {
                                    let x = this.gridStatus(f, t);
                                    x === "autoplace" && !OA(f) && !rl(f)
                                        ? t.warn(
                                              "grid-gap only works if grid-template(-areas) is being used or both rows and columns have been declared and cells have not been manually placed inside the explicit grid",
                                              { node: f }
                                          )
                                        : (x === !0 || x === "no-autoplace") &&
                                          !rl(f) &&
                                          t.warn(
                                              "grid-gap only works if grid-template(-areas) is being used",
                                              { node: f }
                                          );
                                } else if (d === "grid-auto-columns") {
                                    t.warn(
                                        "grid-auto-columns is not supported by IE",
                                        { node: f }
                                    );
                                    return;
                                } else if (d === "grid-auto-rows") {
                                    t.warn(
                                        "grid-auto-rows is not supported by IE",
                                        { node: f }
                                    );
                                    return;
                                } else if (d === "grid-auto-flow") {
                                    let x = p.some(
                                            (b) =>
                                                b.prop === "grid-template-rows"
                                        ),
                                        w = p.some(
                                            (b) =>
                                                b.prop ===
                                                "grid-template-columns"
                                        );
                                    rl(f)
                                        ? t.warn(
                                              "grid-auto-flow is not supported by IE",
                                              { node: f }
                                          )
                                        : h.includes("dense")
                                        ? t.warn(
                                              "grid-auto-flow: dense is not supported by IE",
                                              { node: f }
                                          )
                                        : !x &&
                                          !w &&
                                          t.warn(
                                              "grid-auto-flow works only if grid-template-rows and grid-template-columns are present in the same rule",
                                              { node: f }
                                          );
                                    return;
                                } else if (h.includes("auto-fit")) {
                                    t.warn(
                                        "auto-fit value is not supported by IE",
                                        { node: f, word: "auto-fit" }
                                    );
                                    return;
                                } else if (h.includes("auto-fill")) {
                                    t.warn(
                                        "auto-fill value is not supported by IE",
                                        { node: f, word: "auto-fill" }
                                    );
                                    return;
                                } else
                                    d.startsWith("grid-template") &&
                                        h.includes("[") &&
                                        t.warn(
                                            "Autoprefixer currently does not support line names. Try using grid-template-areas instead.",
                                            { node: f, word: "[" }
                                        );
                            if (h.includes("radial-gradient"))
                                if (CA.test(f.value))
                                    t.warn(
                                        "Gradient has outdated direction syntax. New syntax is like `closest-side at 0 0` instead of `0 0, closest-side`.",
                                        { node: f }
                                    );
                                else {
                                    let x = ig(h);
                                    for (let w of x.nodes)
                                        if (
                                            w.type === "function" &&
                                            w.value === "radial-gradient"
                                        )
                                            for (let b of w.nodes)
                                                b.type === "word" &&
                                                    (b.value === "cover"
                                                        ? t.warn(
                                                              "Gradient has outdated direction syntax. Replace `cover` to `farthest-corner`.",
                                                              { node: f }
                                                          )
                                                        : b.value ===
                                                              "contain" &&
                                                          t.warn(
                                                              "Gradient has outdated direction syntax. Replace `contain` to `closest-side`.",
                                                              { node: f }
                                                          ));
                                }
                            h.includes("linear-gradient") &&
                                SA.test(h) &&
                                t.warn(
                                    "Gradient has outdated direction syntax. New syntax is like `to left` instead of `right`.",
                                    { node: f }
                                );
                        }
                        EA.includes(f.prop) &&
                            (f.value.includes("-fill-available") ||
                                (f.value.includes("fill-available")
                                    ? t.warn(
                                          "Replace fill-available to stretch, because spec had been changed",
                                          { node: f }
                                      )
                                    : f.value.includes("fill") &&
                                      ig(h).nodes.some(
                                          (w) =>
                                              w.type === "word" &&
                                              w.value === "fill"
                                      ) &&
                                      t.warn(
                                          "Replace fill to stretch, because spec had been changed",
                                          { node: f }
                                      )));
                        let y;
                        if (
                            f.prop === "transition" ||
                            f.prop === "transition-property"
                        )
                            return this.prefixes.transition.add(f, t);
                        if (f.prop === "align-self") {
                            if (
                                (this.displayType(f) !== "grid" &&
                                    this.prefixes.options.flexbox !== !1 &&
                                    ((y = this.prefixes.add["align-self"]),
                                    y && y.prefixes && y.process(f)),
                                this.gridStatus(f, t) !== !1 &&
                                    ((y = this.prefixes.add["grid-row-align"]),
                                    y && y.prefixes))
                            )
                                return y.process(f, t);
                        } else if (f.prop === "justify-self") {
                            if (
                                this.gridStatus(f, t) !== !1 &&
                                ((y = this.prefixes.add["grid-column-align"]),
                                y && y.prefixes)
                            )
                                return y.process(f, t);
                        } else if (f.prop === "place-self") {
                            if (
                                ((y = this.prefixes.add["place-self"]),
                                y && y.prefixes && this.gridStatus(f, t) !== !1)
                            )
                                return y.process(f, t);
                        } else if (
                            ((y = this.prefixes.add[f.prop]), y && y.prefixes)
                        )
                            return y.process(f, t);
                    }),
                    this.gridStatus(e, t) && kA(e, this.disabled),
                    e.walkDecls((f) => {
                        if (this.disabledValue(f, t)) return;
                        let p = this.prefixes.unprefixed(f.prop),
                            d = this.prefixes.values("add", p);
                        if (Array.isArray(d))
                            for (let h of d) h.process && h.process(f, t);
                        xA.save(this.prefixes, f);
                    })
                );
            }
            remove(e, t) {
                let r = this.prefixes.remove["@resolution"];
                e.walkAtRules((n, a) => {
                    this.prefixes.remove[`@${n.name}`]
                        ? this.disabled(n, t) || n.parent.removeChild(a)
                        : n.name === "media" &&
                          n.params.includes("-resolution") &&
                          r &&
                          r.clean(n);
                });
                for (let n of this.prefixes.remove.selectors)
                    e.walkRules((a, s) => {
                        n.check(a) &&
                            (this.disabled(a, t) || a.parent.removeChild(s));
                    });
                return e.walkDecls((n, a) => {
                    if (this.disabled(n, t)) return;
                    let s = n.parent,
                        o = this.prefixes.unprefixed(n.prop);
                    if (
                        ((n.prop === "transition" ||
                            n.prop === "transition-property") &&
                            this.prefixes.transition.remove(n),
                        this.prefixes.remove[n.prop] &&
                            this.prefixes.remove[n.prop].remove)
                    ) {
                        let u = this.prefixes
                            .group(n)
                            .down((c) => this.prefixes.normalize(c.prop) === o);
                        if (
                            (o === "flex-flow" && (u = !0),
                            n.prop === "-webkit-box-orient")
                        ) {
                            let c = { "flex-direction": !0, "flex-flow": !0 };
                            if (!n.parent.some((f) => c[f.prop])) return;
                        }
                        if (u && !this.withHackValue(n)) {
                            n.raw("before").includes(`
`) && this.reduceSpaces(n),
                                s.removeChild(a);
                            return;
                        }
                    }
                    for (let u of this.prefixes.values("remove", o)) {
                        if (!u.check || !u.check(n.value)) continue;
                        if (
                            ((o = u.unprefixed),
                            this.prefixes
                                .group(n)
                                .down((f) => f.value.includes(o)))
                        ) {
                            s.removeChild(a);
                            return;
                        }
                    }
                });
            }
            withHackValue(e) {
                return (
                    e.prop === "-webkit-background-clip" && e.value === "text"
                );
            }
            disabledValue(e, t) {
                return (this.gridStatus(e, t) === !1 &&
                    e.type === "decl" &&
                    e.prop === "display" &&
                    e.value.includes("grid")) ||
                    (this.prefixes.options.flexbox === !1 &&
                        e.type === "decl" &&
                        e.prop === "display" &&
                        e.value.includes("flex")) ||
                    (e.type === "decl" && e.prop === "content")
                    ? !0
                    : this.disabled(e, t);
            }
            disabledDecl(e, t) {
                if (
                    this.gridStatus(e, t) === !1 &&
                    e.type === "decl" &&
                    (e.prop.includes("grid") || e.prop === "justify-items")
                )
                    return !0;
                if (this.prefixes.options.flexbox === !1 && e.type === "decl") {
                    let r = [
                        "order",
                        "justify-content",
                        "align-items",
                        "align-content",
                    ];
                    if (e.prop.includes("flex") || r.includes(e.prop))
                        return !0;
                }
                return this.disabled(e, t);
            }
            disabled(e, t) {
                if (!e) return !1;
                if (e._autoprefixerDisabled !== void 0)
                    return e._autoprefixerDisabled;
                if (e.parent) {
                    let n = e.prev();
                    if (n && n.type === "comment" && AA.test(n.text))
                        return (
                            (e._autoprefixerDisabled = !0),
                            (e._autoprefixerSelfDisabled = !0),
                            !0
                        );
                }
                let r = null;
                if (e.nodes) {
                    let n;
                    e.each((a) => {
                        a.type === "comment" &&
                            /(!\s*)?autoprefixer:\s*(off|on)/i.test(a.text) &&
                            (typeof n != "undefined"
                                ? t.warn(
                                      "Second Autoprefixer control comment was ignored. Autoprefixer applies control comment to whole block, not to next rules.",
                                      { node: a }
                                  )
                                : (n = /on/i.test(a.text)));
                    }),
                        n !== void 0 && (r = !n);
                }
                if (!e.nodes || r === null)
                    if (e.parent) {
                        let n = this.disabled(e.parent, t);
                        e.parent._autoprefixerSelfDisabled === !0
                            ? (r = !1)
                            : (r = n);
                    } else r = !1;
                return (e._autoprefixerDisabled = r), r;
            }
            reduceSpaces(e) {
                let t = !1;
                if ((this.prefixes.group(e).up(() => ((t = !0), !0)), t))
                    return;
                let r = e.raw("before").split(`
`),
                    n = r[r.length - 1].length,
                    a = !1;
                this.prefixes.group(e).down((s) => {
                    r = s.raw("before").split(`
`);
                    let o = r.length - 1;
                    r[o].length > n &&
                        (a === !1 && (a = r[o].length - n),
                        (r[o] = r[o].slice(0, -a)),
                        (s.raws.before = r.join(`
`)));
                });
            }
            displayType(e) {
                for (let t of e.parent.nodes)
                    if (t.prop === "display") {
                        if (t.value.includes("flex")) return "flex";
                        if (t.value.includes("grid")) return "grid";
                    }
                return !1;
            }
            gridStatus(e, t) {
                if (!e) return !1;
                if (e._autoprefixerGridStatus !== void 0)
                    return e._autoprefixerGridStatus;
                let r = null;
                if (e.nodes) {
                    let n;
                    e.each((a) => {
                        if (a.type === "comment" && _A.test(a.text)) {
                            let s = /:\s*autoplace/i.test(a.text),
                                o = /no-autoplace/i.test(a.text);
                            typeof n != "undefined"
                                ? t.warn(
                                      "Second Autoprefixer grid control comment was ignored. Autoprefixer applies control comments to the whole block, not to the next rules.",
                                      { node: a }
                                  )
                                : s
                                ? (n = "autoplace")
                                : o
                                ? (n = !0)
                                : (n = /on/i.test(a.text));
                        }
                    }),
                        n !== void 0 && (r = n);
                }
                if (e.type === "atrule" && e.name === "supports") {
                    let n = e.params;
                    n.includes("grid") && n.includes("auto") && (r = !1);
                }
                if (!e.nodes || r === null)
                    if (e.parent) {
                        let n = this.gridStatus(e.parent, t);
                        e.parent._autoprefixerSelfDisabled === !0
                            ? (r = !1)
                            : (r = n);
                    } else
                        typeof this.prefixes.options.grid != "undefined"
                            ? (r = this.prefixes.options.grid)
                            : typeof m.env.AUTOPREFIXER_GRID != "undefined"
                            ? m.env.AUTOPREFIXER_GRID === "autoplace"
                                ? (r = "autoplace")
                                : (r = !0)
                            : (r = !1);
                return (e._autoprefixerGridStatus = r), r;
            }
        };
        sg.exports = ng;
    });
    var og = v((z4, ag) => {
        l();
        ag.exports = {
            A: {
                A: { 2: "K E F G A B JC" },
                B: {
                    1: "C L M H N D O P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I",
                },
                C: {
                    1: "2 3 4 5 6 7 8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B",
                    2: "0 1 KC zB J K E F G A B C L M H N D O k l LC MC",
                },
                D: {
                    1: "8 9 AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB 0B dB 1B eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R S T U V W X Y Z a b c d e f g h i j n o p q r s t u v w x y z I uB 3B 4B",
                    2: "0 1 2 3 4 5 6 7 J K E F G A B C L M H N D O k l",
                },
                E: {
                    1: "G A B C L M H D RC 6B vB wB 7B SC TC 8B 9B xB AC yB BC CC DC EC FC GC UC",
                    2: "0 J K E F NC 5B OC PC QC",
                },
                F: {
                    1: "1 2 3 4 5 6 7 8 9 H N D O k l AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB m pB qB rB sB tB P Q R 2B S T U V W X Y Z a b c d e f g h i j wB",
                    2: "G B C VC WC XC YC vB HC ZC",
                },
                G: {
                    1: "D fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC 8B 9B xB AC yB BC CC DC EC FC GC",
                    2: "F 5B aC IC bC cC dC eC",
                },
                H: { 1: "uC" },
                I: { 1: "I zC 0C", 2: "zB J vC wC xC yC IC" },
                J: { 2: "E A" },
                K: { 1: "m", 2: "A B C vB HC wB" },
                L: { 1: "I" },
                M: { 1: "uB" },
                N: { 2: "A B" },
                O: { 1: "xB" },
                P: { 1: "J k l 1C 2C 3C 4C 5C 6B 6C 7C 8C 9C AD yB BD CD DD" },
                Q: { 1: "7B" },
                R: { 1: "ED" },
                S: { 1: "FD GD" },
            },
            B: 4,
            C: "CSS Feature Queries",
        };
    });
    var cg = v((V4, fg) => {
        l();
        function lg(i) {
            return i[i.length - 1];
        }
        var ug = {
            parse(i) {
                let e = [""],
                    t = [e];
                for (let r of i) {
                    if (r === "(") {
                        (e = [""]), lg(t).push(e), t.push(e);
                        continue;
                    }
                    if (r === ")") {
                        t.pop(), (e = lg(t)), e.push("");
                        continue;
                    }
                    e[e.length - 1] += r;
                }
                return t[0];
            },
            stringify(i) {
                let e = "";
                for (let t of i) {
                    if (typeof t == "object") {
                        e += `(${ug.stringify(t)})`;
                        continue;
                    }
                    e += t;
                }
                return e;
            },
        };
        fg.exports = ug;
    });
    var gg = v((U4, mg) => {
        l();
        var TA = og(),
            { feature: PA } = (zn(), jn),
            { parse: DA } = me(),
            IA = ct(),
            nl = cg(),
            qA = ke(),
            RA = ue(),
            pg = PA(TA),
            dg = [];
        for (let i in pg.stats) {
            let e = pg.stats[i];
            for (let t in e) {
                let r = e[t];
                /y/.test(r) && dg.push(i + " " + t);
            }
        }
        var hg = class {
            constructor(e, t) {
                (this.Prefixes = e), (this.all = t);
            }
            prefixer() {
                if (this.prefixerCache) return this.prefixerCache;
                let e = this.all.browsers.selected.filter((r) =>
                        dg.includes(r)
                    ),
                    t = new IA(this.all.browsers.data, e, this.all.options);
                return (
                    (this.prefixerCache = new this.Prefixes(
                        this.all.data,
                        t,
                        this.all.options
                    )),
                    this.prefixerCache
                );
            }
            parse(e) {
                let t = e.split(":"),
                    r = t[0],
                    n = t[1];
                return n || (n = ""), [r.trim(), n.trim()];
            }
            virtual(e) {
                let [t, r] = this.parse(e),
                    n = DA("a{}").first;
                return n.append({ prop: t, value: r, raws: { before: "" } }), n;
            }
            prefixed(e) {
                let t = this.virtual(e);
                if (this.disabled(t.first)) return t.nodes;
                let r = { warn: () => null },
                    n = this.prefixer().add[t.first.prop];
                n && n.process && n.process(t.first, r);
                for (let a of t.nodes) {
                    for (let s of this.prefixer().values("add", t.first.prop))
                        s.process(a);
                    qA.save(this.all, a);
                }
                return t.nodes;
            }
            isNot(e) {
                return typeof e == "string" && /not\s*/i.test(e);
            }
            isOr(e) {
                return typeof e == "string" && /\s*or\s*/i.test(e);
            }
            isProp(e) {
                return (
                    typeof e == "object" &&
                    e.length === 1 &&
                    typeof e[0] == "string"
                );
            }
            isHack(e, t) {
                return !new RegExp(`(\\(|\\s)${RA.escapeRegexp(t)}:`).test(e);
            }
            toRemove(e, t) {
                let [r, n] = this.parse(e),
                    a = this.all.unprefixed(r),
                    s = this.all.cleaner();
                if (s.remove[r] && s.remove[r].remove && !this.isHack(t, a))
                    return !0;
                for (let o of s.values("remove", a)) if (o.check(n)) return !0;
                return !1;
            }
            remove(e, t) {
                let r = 0;
                for (; r < e.length; ) {
                    if (
                        !this.isNot(e[r - 1]) &&
                        this.isProp(e[r]) &&
                        this.isOr(e[r + 1])
                    ) {
                        if (this.toRemove(e[r][0], t)) {
                            e.splice(r, 2);
                            continue;
                        }
                        r += 2;
                        continue;
                    }
                    typeof e[r] == "object" && (e[r] = this.remove(e[r], t)),
                        (r += 1);
                }
                return e;
            }
            cleanBrackets(e) {
                return e.map((t) =>
                    typeof t != "object"
                        ? t
                        : t.length === 1 && typeof t[0] == "object"
                        ? this.cleanBrackets(t[0])
                        : this.cleanBrackets(t)
                );
            }
            convert(e) {
                let t = [""];
                for (let r of e)
                    t.push([`${r.prop}: ${r.value}`]), t.push(" or ");
                return (t[t.length - 1] = ""), t;
            }
            normalize(e) {
                if (typeof e != "object") return e;
                if (
                    ((e = e.filter((t) => t !== "")), typeof e[0] == "string")
                ) {
                    let t = e[0].trim();
                    if (
                        t.includes(":") ||
                        t === "selector" ||
                        t === "not selector"
                    )
                        return [nl.stringify(e)];
                }
                return e.map((t) => this.normalize(t));
            }
            add(e, t) {
                return e.map((r) => {
                    if (this.isProp(r)) {
                        let n = this.prefixed(r[0]);
                        return n.length > 1 ? this.convert(n) : r;
                    }
                    return typeof r == "object" ? this.add(r, t) : r;
                });
            }
            process(e) {
                let t = nl.parse(e.params);
                (t = this.normalize(t)),
                    (t = this.remove(t, e.params)),
                    (t = this.add(t, e.params)),
                    (t = this.cleanBrackets(t)),
                    (e.params = nl.stringify(t));
            }
            disabled(e) {
                if (
                    !this.all.options.grid &&
                    ((e.prop === "display" && e.value.includes("grid")) ||
                        e.prop.includes("grid") ||
                        e.prop === "justify-items")
                )
                    return !0;
                if (this.all.options.flexbox === !1) {
                    if (e.prop === "display" && e.value.includes("flex"))
                        return !0;
                    let t = [
                        "order",
                        "justify-content",
                        "align-items",
                        "align-content",
                    ];
                    if (e.prop.includes("flex") || t.includes(e.prop))
                        return !0;
                }
                return !1;
            }
        };
        mg.exports = hg;
    });
    var bg = v((W4, wg) => {
        l();
        var yg = class {
            constructor(e, t) {
                (this.prefix = t),
                    (this.prefixed = e.prefixed(this.prefix)),
                    (this.regexp = e.regexp(this.prefix)),
                    (this.prefixeds = e
                        .possible()
                        .map((r) => [e.prefixed(r), e.regexp(r)])),
                    (this.unprefixed = e.name),
                    (this.nameRegexp = e.regexp());
            }
            isHack(e) {
                let t = e.parent.index(e) + 1,
                    r = e.parent.nodes;
                for (; t < r.length; ) {
                    let n = r[t].selector;
                    if (!n) return !0;
                    if (n.includes(this.unprefixed) && n.match(this.nameRegexp))
                        return !1;
                    let a = !1;
                    for (let [s, o] of this.prefixeds)
                        if (n.includes(s) && n.match(o)) {
                            a = !0;
                            break;
                        }
                    if (!a) return !0;
                    t += 1;
                }
                return !0;
            }
            check(e) {
                return !(
                    !e.selector.includes(this.prefixed) ||
                    !e.selector.match(this.regexp) ||
                    this.isHack(e)
                );
            }
        };
        wg.exports = yg;
    });
    var Gt = v((G4, xg) => {
        l();
        var { list: MA } = me(),
            BA = bg(),
            FA = Vt(),
            NA = ct(),
            LA = ue(),
            vg = class extends FA {
                constructor(e, t, r) {
                    super(e, t, r);
                    this.regexpCache = new Map();
                }
                check(e) {
                    return e.selector.includes(this.name)
                        ? !!e.selector.match(this.regexp())
                        : !1;
                }
                prefixed(e) {
                    return this.name.replace(/^(\W*)/, `$1${e}`);
                }
                regexp(e) {
                    if (!this.regexpCache.has(e)) {
                        let t = e ? this.prefixed(e) : this.name;
                        this.regexpCache.set(
                            e,
                            new RegExp(`(^|[^:"'=])${LA.escapeRegexp(t)}`, "gi")
                        );
                    }
                    return this.regexpCache.get(e);
                }
                possible() {
                    return NA.prefixes();
                }
                prefixeds(e) {
                    if (e._autoprefixerPrefixeds) {
                        if (e._autoprefixerPrefixeds[this.name])
                            return e._autoprefixerPrefixeds;
                    } else e._autoprefixerPrefixeds = {};
                    let t = {};
                    if (e.selector.includes(",")) {
                        let n = MA.comma(e.selector).filter((a) =>
                            a.includes(this.name)
                        );
                        for (let a of this.possible())
                            t[a] = n.map((s) => this.replace(s, a)).join(", ");
                    } else
                        for (let r of this.possible())
                            t[r] = this.replace(e.selector, r);
                    return (
                        (e._autoprefixerPrefixeds[this.name] = t),
                        e._autoprefixerPrefixeds
                    );
                }
                already(e, t, r) {
                    let n = e.parent.index(e) - 1;
                    for (; n >= 0; ) {
                        let a = e.parent.nodes[n];
                        if (a.type !== "rule") return !1;
                        let s = !1;
                        for (let o in t[this.name]) {
                            let u = t[this.name][o];
                            if (a.selector === u) {
                                if (r === o) return !0;
                                s = !0;
                                break;
                            }
                        }
                        if (!s) return !1;
                        n -= 1;
                    }
                    return !1;
                }
                replace(e, t) {
                    return e.replace(this.regexp(), `$1${this.prefixed(t)}`);
                }
                add(e, t) {
                    let r = this.prefixeds(e);
                    if (this.already(e, r, t)) return;
                    let n = this.clone(e, { selector: r[this.name][t] });
                    e.parent.insertBefore(e, n);
                }
                old(e) {
                    return new BA(this, e);
                }
            };
        xg.exports = vg;
    });
    var Cg = v((H4, Sg) => {
        l();
        var $A = Vt(),
            kg = class extends $A {
                add(e, t) {
                    let r = t + e.name;
                    if (
                        e.parent.some(
                            (s) => s.name === r && s.params === e.params
                        )
                    )
                        return;
                    let a = this.clone(e, { name: r });
                    return e.parent.insertBefore(e, a);
                }
                process(e) {
                    let t = this.parentPrefix(e);
                    for (let r of this.prefixes)
                        (!t || t === r) && this.add(e, r);
                }
            };
        Sg.exports = kg;
    });
    var _g = v((Y4, Ag) => {
        l();
        var jA = Gt(),
            sl = class extends jA {
                prefixed(e) {
                    return e === "-webkit-"
                        ? ":-webkit-full-screen"
                        : e === "-moz-"
                        ? ":-moz-full-screen"
                        : `:${e}fullscreen`;
                }
            };
        sl.names = [":fullscreen"];
        Ag.exports = sl;
    });
    var Og = v((Q4, Eg) => {
        l();
        var zA = Gt(),
            al = class extends zA {
                possible() {
                    return super.possible().concat(["-moz- old", "-ms- old"]);
                }
                prefixed(e) {
                    return e === "-webkit-"
                        ? "::-webkit-input-placeholder"
                        : e === "-ms-"
                        ? "::-ms-input-placeholder"
                        : e === "-ms- old"
                        ? ":-ms-input-placeholder"
                        : e === "-moz- old"
                        ? ":-moz-placeholder"
                        : `::${e}placeholder`;
                }
            };
        al.names = ["::placeholder"];
        Eg.exports = al;
    });
    var Pg = v((J4, Tg) => {
        l();
        var VA = Gt(),
            ol = class extends VA {
                prefixed(e) {
                    return e === "-ms-"
                        ? ":-ms-input-placeholder"
                        : `:${e}placeholder-shown`;
                }
            };
        ol.names = [":placeholder-shown"];
        Tg.exports = ol;
    });
    var Ig = v((X4, Dg) => {
        l();
        var UA = Gt(),
            WA = ue(),
            ll = class extends UA {
                constructor(e, t, r) {
                    super(e, t, r);
                    this.prefixes &&
                        (this.prefixes = WA.uniq(
                            this.prefixes.map((n) => "-webkit-")
                        ));
                }
                prefixed(e) {
                    return e === "-webkit-"
                        ? "::-webkit-file-upload-button"
                        : `::${e}file-selector-button`;
                }
            };
        ll.names = ["::file-selector-button"];
        Dg.exports = ll;
    });
    var de = v((K4, qg) => {
        l();
        qg.exports = function (i) {
            let e;
            return (
                i === "-webkit- 2009" || i === "-moz-"
                    ? (e = 2009)
                    : i === "-ms-"
                    ? (e = 2012)
                    : i === "-webkit-" && (e = "final"),
                i === "-webkit- 2009" && (i = "-webkit-"),
                [e, i]
            );
        };
    });
    var Fg = v((Z4, Bg) => {
        l();
        var Rg = me().list,
            Mg = de(),
            GA = R(),
            Ht = class extends GA {
                prefixed(e, t) {
                    let r;
                    return (
                        ([r, t] = Mg(t)),
                        r === 2009 ? t + "box-flex" : super.prefixed(e, t)
                    );
                }
                normalize() {
                    return "flex";
                }
                set(e, t) {
                    let r = Mg(t)[0];
                    if (r === 2009)
                        return (
                            (e.value = Rg.space(e.value)[0]),
                            (e.value = Ht.oldValues[e.value] || e.value),
                            super.set(e, t)
                        );
                    if (r === 2012) {
                        let n = Rg.space(e.value);
                        n.length === 3 &&
                            n[2] === "0" &&
                            (e.value = n.slice(0, 2).concat("0px").join(" "));
                    }
                    return super.set(e, t);
                }
            };
        Ht.names = ["flex", "box-flex"];
        Ht.oldValues = { auto: "1", none: "0" };
        Bg.exports = Ht;
    });
    var $g = v((eq, Lg) => {
        l();
        var Ng = de(),
            HA = R(),
            ul = class extends HA {
                prefixed(e, t) {
                    let r;
                    return (
                        ([r, t] = Ng(t)),
                        r === 2009
                            ? t + "box-ordinal-group"
                            : r === 2012
                            ? t + "flex-order"
                            : super.prefixed(e, t)
                    );
                }
                normalize() {
                    return "order";
                }
                set(e, t) {
                    return Ng(t)[0] === 2009 && /\d/.test(e.value)
                        ? ((e.value = (parseInt(e.value) + 1).toString()),
                          super.set(e, t))
                        : super.set(e, t);
                }
            };
        ul.names = ["order", "flex-order", "box-ordinal-group"];
        Lg.exports = ul;
    });
    var zg = v((tq, jg) => {
        l();
        var YA = R(),
            fl = class extends YA {
                check(e) {
                    let t = e.value;
                    return (
                        !t.toLowerCase().includes("alpha(") &&
                        !t.includes("DXImageTransform.Microsoft") &&
                        !t.includes("data:image/svg+xml")
                    );
                }
            };
        fl.names = ["filter"];
        jg.exports = fl;
    });
    var Ug = v((rq, Vg) => {
        l();
        var QA = R(),
            cl = class extends QA {
                insert(e, t, r, n) {
                    if (t !== "-ms-") return super.insert(e, t, r);
                    let a = this.clone(e),
                        s = e.prop.replace(/end$/, "start"),
                        o = t + e.prop.replace(/end$/, "span");
                    if (!e.parent.some((u) => u.prop === o)) {
                        if (((a.prop = o), e.value.includes("span")))
                            a.value = e.value.replace(/span\s/i, "");
                        else {
                            let u;
                            if (
                                (e.parent.walkDecls(s, (c) => {
                                    u = c;
                                }),
                                u)
                            ) {
                                let c = Number(e.value) - Number(u.value) + "";
                                a.value = c;
                            } else
                                e.warn(
                                    n,
                                    `Can not prefix ${e.prop} (${s} is not found)`
                                );
                        }
                        e.cloneBefore(a);
                    }
                }
            };
        cl.names = ["grid-row-end", "grid-column-end"];
        Vg.exports = cl;
    });
    var Gg = v((iq, Wg) => {
        l();
        var JA = R(),
            pl = class extends JA {
                check(e) {
                    return !e.value.split(/\s+/).some((t) => {
                        let r = t.toLowerCase();
                        return r === "reverse" || r === "alternate-reverse";
                    });
                }
            };
        pl.names = ["animation", "animation-direction"];
        Wg.exports = pl;
    });
    var Yg = v((nq, Hg) => {
        l();
        var XA = de(),
            KA = R(),
            dl = class extends KA {
                insert(e, t, r) {
                    let n;
                    if ((([n, t] = XA(t)), n !== 2009))
                        return super.insert(e, t, r);
                    let a = e.value
                        .split(/\s+/)
                        .filter(
                            (p) =>
                                p !== "wrap" && p !== "nowrap" && "wrap-reverse"
                        );
                    if (
                        a.length === 0 ||
                        e.parent.some(
                            (p) =>
                                p.prop === t + "box-orient" ||
                                p.prop === t + "box-direction"
                        )
                    )
                        return;
                    let o = a[0],
                        u = o.includes("row") ? "horizontal" : "vertical",
                        c = o.includes("reverse") ? "reverse" : "normal",
                        f = this.clone(e);
                    return (
                        (f.prop = t + "box-orient"),
                        (f.value = u),
                        this.needCascade(e) &&
                            (f.raws.before = this.calcBefore(r, e, t)),
                        e.parent.insertBefore(e, f),
                        (f = this.clone(e)),
                        (f.prop = t + "box-direction"),
                        (f.value = c),
                        this.needCascade(e) &&
                            (f.raws.before = this.calcBefore(r, e, t)),
                        e.parent.insertBefore(e, f)
                    );
                }
            };
        dl.names = ["flex-flow", "box-direction", "box-orient"];
        Hg.exports = dl;
    });
    var Jg = v((sq, Qg) => {
        l();
        var ZA = de(),
            e_ = R(),
            hl = class extends e_ {
                normalize() {
                    return "flex";
                }
                prefixed(e, t) {
                    let r;
                    return (
                        ([r, t] = ZA(t)),
                        r === 2009
                            ? t + "box-flex"
                            : r === 2012
                            ? t + "flex-positive"
                            : super.prefixed(e, t)
                    );
                }
            };
        hl.names = ["flex-grow", "flex-positive"];
        Qg.exports = hl;
    });
    var Kg = v((aq, Xg) => {
        l();
        var t_ = de(),
            r_ = R(),
            ml = class extends r_ {
                set(e, t) {
                    if (t_(t)[0] !== 2009) return super.set(e, t);
                }
            };
        ml.names = ["flex-wrap"];
        Xg.exports = ml;
    });
    var ey = v((oq, Zg) => {
        l();
        var i_ = R(),
            Yt = dt(),
            gl = class extends i_ {
                insert(e, t, r, n) {
                    if (t !== "-ms-") return super.insert(e, t, r);
                    let a = Yt.parse(e),
                        [s, o] = Yt.translate(a, 0, 2),
                        [u, c] = Yt.translate(a, 1, 3);
                    [
                        ["grid-row", s],
                        ["grid-row-span", o],
                        ["grid-column", u],
                        ["grid-column-span", c],
                    ].forEach(([f, p]) => {
                        Yt.insertDecl(e, f, p);
                    }),
                        Yt.warnTemplateSelectorNotFound(e, n),
                        Yt.warnIfGridRowColumnExists(e, n);
                }
            };
        gl.names = ["grid-area"];
        Zg.exports = gl;
    });
    var ry = v((lq, ty) => {
        l();
        var n_ = R(),
            ni = dt(),
            yl = class extends n_ {
                insert(e, t, r) {
                    if (t !== "-ms-") return super.insert(e, t, r);
                    if (e.parent.some((s) => s.prop === "-ms-grid-row-align"))
                        return;
                    let [[n, a]] = ni.parse(e);
                    a
                        ? (ni.insertDecl(e, "grid-row-align", n),
                          ni.insertDecl(e, "grid-column-align", a))
                        : (ni.insertDecl(e, "grid-row-align", n),
                          ni.insertDecl(e, "grid-column-align", n));
                }
            };
        yl.names = ["place-self"];
        ty.exports = yl;
    });
    var ny = v((uq, iy) => {
        l();
        var s_ = R(),
            wl = class extends s_ {
                check(e) {
                    let t = e.value;
                    return !t.includes("/") || t.includes("span");
                }
                normalize(e) {
                    return e.replace("-start", "");
                }
                prefixed(e, t) {
                    let r = super.prefixed(e, t);
                    return t === "-ms-" && (r = r.replace("-start", "")), r;
                }
            };
        wl.names = ["grid-row-start", "grid-column-start"];
        iy.exports = wl;
    });
    var oy = v((fq, ay) => {
        l();
        var sy = de(),
            a_ = R(),
            Qt = class extends a_ {
                check(e) {
                    return (
                        e.parent &&
                        !e.parent.some(
                            (t) => t.prop && t.prop.startsWith("grid-")
                        )
                    );
                }
                prefixed(e, t) {
                    let r;
                    return (
                        ([r, t] = sy(t)),
                        r === 2012
                            ? t + "flex-item-align"
                            : super.prefixed(e, t)
                    );
                }
                normalize() {
                    return "align-self";
                }
                set(e, t) {
                    let r = sy(t)[0];
                    if (r === 2012)
                        return (
                            (e.value = Qt.oldValues[e.value] || e.value),
                            super.set(e, t)
                        );
                    if (r === "final") return super.set(e, t);
                }
            };
        Qt.names = ["align-self", "flex-item-align"];
        Qt.oldValues = { "flex-end": "end", "flex-start": "start" };
        ay.exports = Qt;
    });
    var uy = v((cq, ly) => {
        l();
        var o_ = R(),
            l_ = ue(),
            bl = class extends o_ {
                constructor(e, t, r) {
                    super(e, t, r);
                    this.prefixes &&
                        (this.prefixes = l_.uniq(
                            this.prefixes.map((n) =>
                                n === "-ms-" ? "-webkit-" : n
                            )
                        ));
                }
            };
        bl.names = ["appearance"];
        ly.exports = bl;
    });
    var py = v((pq, cy) => {
        l();
        var fy = de(),
            u_ = R(),
            vl = class extends u_ {
                normalize() {
                    return "flex-basis";
                }
                prefixed(e, t) {
                    let r;
                    return (
                        ([r, t] = fy(t)),
                        r === 2012
                            ? t + "flex-preferred-size"
                            : super.prefixed(e, t)
                    );
                }
                set(e, t) {
                    let r;
                    if ((([r, t] = fy(t)), r === 2012 || r === "final"))
                        return super.set(e, t);
                }
            };
        vl.names = ["flex-basis", "flex-preferred-size"];
        cy.exports = vl;
    });
    var hy = v((dq, dy) => {
        l();
        var f_ = R(),
            xl = class extends f_ {
                normalize() {
                    return this.name.replace("box-image", "border");
                }
                prefixed(e, t) {
                    let r = super.prefixed(e, t);
                    return (
                        t === "-webkit-" &&
                            (r = r.replace("border", "box-image")),
                        r
                    );
                }
            };
        xl.names = [
            "mask-border",
            "mask-border-source",
            "mask-border-slice",
            "mask-border-width",
            "mask-border-outset",
            "mask-border-repeat",
            "mask-box-image",
            "mask-box-image-source",
            "mask-box-image-slice",
            "mask-box-image-width",
            "mask-box-image-outset",
            "mask-box-image-repeat",
        ];
        dy.exports = xl;
    });
    var gy = v((hq, my) => {
        l();
        var c_ = R(),
            Le = class extends c_ {
                insert(e, t, r) {
                    let n = e.prop === "mask-composite",
                        a;
                    n
                        ? (a = e.value.split(","))
                        : (a = e.value.match(Le.regexp) || []),
                        (a = a.map((c) => c.trim()).filter((c) => c));
                    let s = a.length,
                        o;
                    if (
                        (s &&
                            ((o = this.clone(e)),
                            (o.value = a
                                .map((c) => Le.oldValues[c] || c)
                                .join(", ")),
                            a.includes("intersect") && (o.value += ", xor"),
                            (o.prop = t + "mask-composite")),
                        n)
                    )
                        return s
                            ? (this.needCascade(e) &&
                                  (o.raws.before = this.calcBefore(r, e, t)),
                              e.parent.insertBefore(e, o))
                            : void 0;
                    let u = this.clone(e);
                    return (
                        (u.prop = t + u.prop),
                        s && (u.value = u.value.replace(Le.regexp, "")),
                        this.needCascade(e) &&
                            (u.raws.before = this.calcBefore(r, e, t)),
                        e.parent.insertBefore(e, u),
                        s
                            ? (this.needCascade(e) &&
                                  (o.raws.before = this.calcBefore(r, e, t)),
                              e.parent.insertBefore(e, o))
                            : e
                    );
                }
            };
        Le.names = ["mask", "mask-composite"];
        Le.oldValues = {
            add: "source-over",
            subtract: "source-out",
            intersect: "source-in",
            exclude: "xor",
        };
        Le.regexp = new RegExp(
            `\\s+(${Object.keys(Le.oldValues).join("|")})\\b(?!\\))\\s*(?=[,])`,
            "ig"
        );
        my.exports = Le;
    });
    var by = v((mq, wy) => {
        l();
        var yy = de(),
            p_ = R(),
            Jt = class extends p_ {
                prefixed(e, t) {
                    let r;
                    return (
                        ([r, t] = yy(t)),
                        r === 2009
                            ? t + "box-align"
                            : r === 2012
                            ? t + "flex-align"
                            : super.prefixed(e, t)
                    );
                }
                normalize() {
                    return "align-items";
                }
                set(e, t) {
                    let r = yy(t)[0];
                    return (
                        (r === 2009 || r === 2012) &&
                            (e.value = Jt.oldValues[e.value] || e.value),
                        super.set(e, t)
                    );
                }
            };
        Jt.names = ["align-items", "flex-align", "box-align"];
        Jt.oldValues = { "flex-end": "end", "flex-start": "start" };
        wy.exports = Jt;
    });
    var xy = v((gq, vy) => {
        l();
        var d_ = R(),
            kl = class extends d_ {
                set(e, t) {
                    return (
                        t === "-ms-" &&
                            e.value === "contain" &&
                            (e.value = "element"),
                        super.set(e, t)
                    );
                }
                insert(e, t, r) {
                    if (!(e.value === "all" && t === "-ms-"))
                        return super.insert(e, t, r);
                }
            };
        kl.names = ["user-select"];
        vy.exports = kl;
    });
    var Cy = v((yq, Sy) => {
        l();
        var ky = de(),
            h_ = R(),
            Sl = class extends h_ {
                normalize() {
                    return "flex-shrink";
                }
                prefixed(e, t) {
                    let r;
                    return (
                        ([r, t] = ky(t)),
                        r === 2012 ? t + "flex-negative" : super.prefixed(e, t)
                    );
                }
                set(e, t) {
                    let r;
                    if ((([r, t] = ky(t)), r === 2012 || r === "final"))
                        return super.set(e, t);
                }
            };
        Sl.names = ["flex-shrink", "flex-negative"];
        Sy.exports = Sl;
    });
    var _y = v((wq, Ay) => {
        l();
        var m_ = R(),
            Cl = class extends m_ {
                prefixed(e, t) {
                    return `${t}column-${e}`;
                }
                normalize(e) {
                    return e.includes("inside")
                        ? "break-inside"
                        : e.includes("before")
                        ? "break-before"
                        : "break-after";
                }
                set(e, t) {
                    return (
                        ((e.prop === "break-inside" &&
                            e.value === "avoid-column") ||
                            e.value === "avoid-page") &&
                            (e.value = "avoid"),
                        super.set(e, t)
                    );
                }
                insert(e, t, r) {
                    if (e.prop !== "break-inside") return super.insert(e, t, r);
                    if (!(/region/i.test(e.value) || /page/i.test(e.value)))
                        return super.insert(e, t, r);
                }
            };
        Cl.names = [
            "break-inside",
            "page-break-inside",
            "column-break-inside",
            "break-before",
            "page-break-before",
            "column-break-before",
            "break-after",
            "page-break-after",
            "column-break-after",
        ];
        Ay.exports = Cl;
    });
    var Oy = v((bq, Ey) => {
        l();
        var g_ = R(),
            Al = class extends g_ {
                prefixed(e, t) {
                    return t + "print-color-adjust";
                }
                normalize() {
                    return "color-adjust";
                }
            };
        Al.names = ["color-adjust", "print-color-adjust"];
        Ey.exports = Al;
    });
    var Py = v((vq, Ty) => {
        l();
        var y_ = R(),
            Xt = class extends y_ {
                insert(e, t, r) {
                    if (t === "-ms-") {
                        let n = this.set(this.clone(e), t);
                        this.needCascade(e) &&
                            (n.raws.before = this.calcBefore(r, e, t));
                        let a = "ltr";
                        return (
                            e.parent.nodes.forEach((s) => {
                                s.prop === "direction" &&
                                    (s.value === "rtl" || s.value === "ltr") &&
                                    (a = s.value);
                            }),
                            (n.value = Xt.msValues[a][e.value] || e.value),
                            e.parent.insertBefore(e, n)
                        );
                    }
                    return super.insert(e, t, r);
                }
            };
        Xt.names = ["writing-mode"];
        Xt.msValues = {
            ltr: {
                "horizontal-tb": "lr-tb",
                "vertical-rl": "tb-rl",
                "vertical-lr": "tb-lr",
            },
            rtl: {
                "horizontal-tb": "rl-tb",
                "vertical-rl": "bt-rl",
                "vertical-lr": "bt-lr",
            },
        };
        Ty.exports = Xt;
    });
    var Iy = v((xq, Dy) => {
        l();
        var w_ = R(),
            _l = class extends w_ {
                set(e, t) {
                    return (
                        (e.value = e.value.replace(/\s+fill(\s)/, "$1")),
                        super.set(e, t)
                    );
                }
            };
        _l.names = ["border-image"];
        Dy.exports = _l;
    });
    var My = v((kq, Ry) => {
        l();
        var qy = de(),
            b_ = R(),
            Kt = class extends b_ {
                prefixed(e, t) {
                    let r;
                    return (
                        ([r, t] = qy(t)),
                        r === 2012 ? t + "flex-line-pack" : super.prefixed(e, t)
                    );
                }
                normalize() {
                    return "align-content";
                }
                set(e, t) {
                    let r = qy(t)[0];
                    if (r === 2012)
                        return (
                            (e.value = Kt.oldValues[e.value] || e.value),
                            super.set(e, t)
                        );
                    if (r === "final") return super.set(e, t);
                }
            };
        Kt.names = ["align-content", "flex-line-pack"];
        Kt.oldValues = {
            "flex-end": "end",
            "flex-start": "start",
            "space-between": "justify",
            "space-around": "distribute",
        };
        Ry.exports = Kt;
    });
    var Fy = v((Sq, By) => {
        l();
        var v_ = R(),
            Se = class extends v_ {
                prefixed(e, t) {
                    return t === "-moz-"
                        ? t + (Se.toMozilla[e] || e)
                        : super.prefixed(e, t);
                }
                normalize(e) {
                    return Se.toNormal[e] || e;
                }
            };
        Se.names = ["border-radius"];
        Se.toMozilla = {};
        Se.toNormal = {};
        for (let i of ["top", "bottom"])
            for (let e of ["left", "right"]) {
                let t = `border-${i}-${e}-radius`,
                    r = `border-radius-${i}${e}`;
                Se.names.push(t),
                    Se.names.push(r),
                    (Se.toMozilla[t] = r),
                    (Se.toNormal[r] = t);
            }
        By.exports = Se;
    });
    var Ly = v((Cq, Ny) => {
        l();
        var x_ = R(),
            El = class extends x_ {
                prefixed(e, t) {
                    return e.includes("-start")
                        ? t + e.replace("-block-start", "-before")
                        : t + e.replace("-block-end", "-after");
                }
                normalize(e) {
                    return e.includes("-before")
                        ? e.replace("-before", "-block-start")
                        : e.replace("-after", "-block-end");
                }
            };
        El.names = [
            "border-block-start",
            "border-block-end",
            "margin-block-start",
            "margin-block-end",
            "padding-block-start",
            "padding-block-end",
            "border-before",
            "border-after",
            "margin-before",
            "margin-after",
            "padding-before",
            "padding-after",
        ];
        Ny.exports = El;
    });
    var jy = v((Aq, $y) => {
        l();
        var k_ = R(),
            {
                parseTemplate: S_,
                warnMissedAreas: C_,
                getGridGap: A_,
                warnGridGap: __,
                inheritGridGap: E_,
            } = dt(),
            Ol = class extends k_ {
                insert(e, t, r, n) {
                    if (t !== "-ms-") return super.insert(e, t, r);
                    if (e.parent.some((h) => h.prop === "-ms-grid-rows"))
                        return;
                    let a = A_(e),
                        s = E_(e, a),
                        {
                            rows: o,
                            columns: u,
                            areas: c,
                        } = S_({ decl: e, gap: s || a }),
                        f = Object.keys(c).length > 0,
                        p = Boolean(o),
                        d = Boolean(u);
                    return (
                        __({ gap: a, hasColumns: d, decl: e, result: n }),
                        C_(c, e, n),
                        ((p && d) || f) &&
                            e.cloneBefore({
                                prop: "-ms-grid-rows",
                                value: o,
                                raws: {},
                            }),
                        d &&
                            e.cloneBefore({
                                prop: "-ms-grid-columns",
                                value: u,
                                raws: {},
                            }),
                        e
                    );
                }
            };
        Ol.names = ["grid-template"];
        $y.exports = Ol;
    });
    var Vy = v((_q, zy) => {
        l();
        var O_ = R(),
            Tl = class extends O_ {
                prefixed(e, t) {
                    return t + e.replace("-inline", "");
                }
                normalize(e) {
                    return e.replace(
                        /(margin|padding|border)-(start|end)/,
                        "$1-inline-$2"
                    );
                }
            };
        Tl.names = [
            "border-inline-start",
            "border-inline-end",
            "margin-inline-start",
            "margin-inline-end",
            "padding-inline-start",
            "padding-inline-end",
            "border-start",
            "border-end",
            "margin-start",
            "margin-end",
            "padding-start",
            "padding-end",
        ];
        zy.exports = Tl;
    });
    var Wy = v((Eq, Uy) => {
        l();
        var T_ = R(),
            Pl = class extends T_ {
                check(e) {
                    return !e.value.includes("flex-") && e.value !== "baseline";
                }
                prefixed(e, t) {
                    return t + "grid-row-align";
                }
                normalize() {
                    return "align-self";
                }
            };
        Pl.names = ["grid-row-align"];
        Uy.exports = Pl;
    });
    var Hy = v((Oq, Gy) => {
        l();
        var P_ = R(),
            Zt = class extends P_ {
                keyframeParents(e) {
                    let { parent: t } = e;
                    for (; t; ) {
                        if (t.type === "atrule" && t.name === "keyframes")
                            return !0;
                        ({ parent: t } = t);
                    }
                    return !1;
                }
                contain3d(e) {
                    if (e.prop === "transform-origin") return !1;
                    for (let t of Zt.functions3d)
                        if (e.value.includes(`${t}(`)) return !0;
                    return !1;
                }
                set(e, t) {
                    return (
                        (e = super.set(e, t)),
                        t === "-ms-" &&
                            (e.value = e.value.replace(/rotatez/gi, "rotate")),
                        e
                    );
                }
                insert(e, t, r) {
                    if (t === "-ms-") {
                        if (!this.contain3d(e) && !this.keyframeParents(e))
                            return super.insert(e, t, r);
                    } else if (t === "-o-") {
                        if (!this.contain3d(e)) return super.insert(e, t, r);
                    } else return super.insert(e, t, r);
                }
            };
        Zt.names = ["transform", "transform-origin"];
        Zt.functions3d = [
            "matrix3d",
            "translate3d",
            "translateZ",
            "scale3d",
            "scaleZ",
            "rotate3d",
            "rotateX",
            "rotateY",
            "perspective",
        ];
        Gy.exports = Zt;
    });
    var Jy = v((Tq, Qy) => {
        l();
        var Yy = de(),
            D_ = R(),
            Dl = class extends D_ {
                normalize() {
                    return "flex-direction";
                }
                insert(e, t, r) {
                    let n;
                    if ((([n, t] = Yy(t)), n !== 2009))
                        return super.insert(e, t, r);
                    if (
                        e.parent.some(
                            (f) =>
                                f.prop === t + "box-orient" ||
                                f.prop === t + "box-direction"
                        )
                    )
                        return;
                    let s = e.value,
                        o,
                        u;
                    s === "inherit" || s === "initial" || s === "unset"
                        ? ((o = s), (u = s))
                        : ((o = s.includes("row") ? "horizontal" : "vertical"),
                          (u = s.includes("reverse") ? "reverse" : "normal"));
                    let c = this.clone(e);
                    return (
                        (c.prop = t + "box-orient"),
                        (c.value = o),
                        this.needCascade(e) &&
                            (c.raws.before = this.calcBefore(r, e, t)),
                        e.parent.insertBefore(e, c),
                        (c = this.clone(e)),
                        (c.prop = t + "box-direction"),
                        (c.value = u),
                        this.needCascade(e) &&
                            (c.raws.before = this.calcBefore(r, e, t)),
                        e.parent.insertBefore(e, c)
                    );
                }
                old(e, t) {
                    let r;
                    return (
                        ([r, t] = Yy(t)),
                        r === 2009
                            ? [t + "box-orient", t + "box-direction"]
                            : super.old(e, t)
                    );
                }
            };
        Dl.names = ["flex-direction", "box-direction", "box-orient"];
        Qy.exports = Dl;
    });
    var Ky = v((Pq, Xy) => {
        l();
        var I_ = R(),
            Il = class extends I_ {
                check(e) {
                    return e.value === "pixelated";
                }
                prefixed(e, t) {
                    return t === "-ms-"
                        ? "-ms-interpolation-mode"
                        : super.prefixed(e, t);
                }
                set(e, t) {
                    return t !== "-ms-"
                        ? super.set(e, t)
                        : ((e.prop = "-ms-interpolation-mode"),
                          (e.value = "nearest-neighbor"),
                          e);
                }
                normalize() {
                    return "image-rendering";
                }
                process(e, t) {
                    return super.process(e, t);
                }
            };
        Il.names = ["image-rendering", "interpolation-mode"];
        Xy.exports = Il;
    });
    var ew = v((Dq, Zy) => {
        l();
        var q_ = R(),
            R_ = ue(),
            ql = class extends q_ {
                constructor(e, t, r) {
                    super(e, t, r);
                    this.prefixes &&
                        (this.prefixes = R_.uniq(
                            this.prefixes.map((n) =>
                                n === "-ms-" ? "-webkit-" : n
                            )
                        ));
                }
            };
        ql.names = ["backdrop-filter"];
        Zy.exports = ql;
    });
    var rw = v((Iq, tw) => {
        l();
        var M_ = R(),
            B_ = ue(),
            Rl = class extends M_ {
                constructor(e, t, r) {
                    super(e, t, r);
                    this.prefixes &&
                        (this.prefixes = B_.uniq(
                            this.prefixes.map((n) =>
                                n === "-ms-" ? "-webkit-" : n
                            )
                        ));
                }
                check(e) {
                    return e.value.toLowerCase() === "text";
                }
            };
        Rl.names = ["background-clip"];
        tw.exports = Rl;
    });
    var nw = v((qq, iw) => {
        l();
        var F_ = R(),
            N_ = [
                "none",
                "underline",
                "overline",
                "line-through",
                "blink",
                "inherit",
                "initial",
                "unset",
            ],
            Ml = class extends F_ {
                check(e) {
                    return e.value.split(/\s+/).some((t) => !N_.includes(t));
                }
            };
        Ml.names = ["text-decoration"];
        iw.exports = Ml;
    });
    var ow = v((Rq, aw) => {
        l();
        var sw = de(),
            L_ = R(),
            er = class extends L_ {
                prefixed(e, t) {
                    let r;
                    return (
                        ([r, t] = sw(t)),
                        r === 2009
                            ? t + "box-pack"
                            : r === 2012
                            ? t + "flex-pack"
                            : super.prefixed(e, t)
                    );
                }
                normalize() {
                    return "justify-content";
                }
                set(e, t) {
                    let r = sw(t)[0];
                    if (r === 2009 || r === 2012) {
                        let n = er.oldValues[e.value] || e.value;
                        if (((e.value = n), r !== 2009 || n !== "distribute"))
                            return super.set(e, t);
                    } else if (r === "final") return super.set(e, t);
                }
            };
        er.names = ["justify-content", "flex-pack", "box-pack"];
        er.oldValues = {
            "flex-end": "end",
            "flex-start": "start",
            "space-between": "justify",
            "space-around": "distribute",
        };
        aw.exports = er;
    });
    var uw = v((Mq, lw) => {
        l();
        var $_ = R(),
            Bl = class extends $_ {
                set(e, t) {
                    let r = e.value.toLowerCase();
                    return (
                        t === "-webkit-" &&
                            !r.includes(" ") &&
                            r !== "contain" &&
                            r !== "cover" &&
                            (e.value = e.value + " " + e.value),
                        super.set(e, t)
                    );
                }
            };
        Bl.names = ["background-size"];
        lw.exports = Bl;
    });
    var cw = v((Bq, fw) => {
        l();
        var j_ = R(),
            Fl = dt(),
            Nl = class extends j_ {
                insert(e, t, r) {
                    if (t !== "-ms-") return super.insert(e, t, r);
                    let n = Fl.parse(e),
                        [a, s] = Fl.translate(n, 0, 1);
                    n[0] &&
                        n[0].includes("span") &&
                        (s = n[0].join("").replace(/\D/g, "")),
                        [
                            [e.prop, a],
                            [`${e.prop}-span`, s],
                        ].forEach(([u, c]) => {
                            Fl.insertDecl(e, u, c);
                        });
                }
            };
        Nl.names = ["grid-row", "grid-column"];
        fw.exports = Nl;
    });
    var hw = v((Fq, dw) => {
        l();
        var z_ = R(),
            {
                prefixTrackProp: pw,
                prefixTrackValue: V_,
                autoplaceGridItems: U_,
                getGridGap: W_,
                inheritGridGap: G_,
            } = dt(),
            H_ = il(),
            Ll = class extends z_ {
                prefixed(e, t) {
                    return t === "-ms-"
                        ? pw({ prop: e, prefix: t })
                        : super.prefixed(e, t);
                }
                normalize(e) {
                    return e.replace(
                        /^grid-(rows|columns)/,
                        "grid-template-$1"
                    );
                }
                insert(e, t, r, n) {
                    if (t !== "-ms-") return super.insert(e, t, r);
                    let { parent: a, prop: s, value: o } = e,
                        u = s.includes("rows"),
                        c = s.includes("columns"),
                        f = a.some(
                            (k) =>
                                k.prop === "grid-template" ||
                                k.prop === "grid-template-areas"
                        );
                    if (f && u) return !1;
                    let p = new H_({ options: {} }),
                        d = p.gridStatus(a, n),
                        h = W_(e);
                    h = G_(e, h) || h;
                    let y = u ? h.row : h.column;
                    (d === "no-autoplace" || d === !0) && !f && (y = null);
                    let x = V_({ value: o, gap: y });
                    e.cloneBefore({
                        prop: pw({ prop: s, prefix: t }),
                        value: x,
                    });
                    let w = a.nodes.find((k) => k.prop === "grid-auto-flow"),
                        b = "row";
                    if (
                        (w && !p.disabled(w, n) && (b = w.value.trim()),
                        d === "autoplace")
                    ) {
                        let k = a.nodes.find(
                            (_) => _.prop === "grid-template-rows"
                        );
                        if (!k && f) return;
                        if (!k && !f) {
                            e.warn(
                                n,
                                "Autoplacement does not work without grid-template-rows property"
                            );
                            return;
                        }
                        !a.nodes.find(
                            (_) => _.prop === "grid-template-columns"
                        ) &&
                            !f &&
                            e.warn(
                                n,
                                "Autoplacement does not work without grid-template-columns property"
                            ),
                            c && !f && U_(e, n, h, b);
                    }
                }
            };
        Ll.names = [
            "grid-template-rows",
            "grid-template-columns",
            "grid-rows",
            "grid-columns",
        ];
        dw.exports = Ll;
    });
    var gw = v((Nq, mw) => {
        l();
        var Y_ = R(),
            $l = class extends Y_ {
                check(e) {
                    return !e.value.includes("flex-") && e.value !== "baseline";
                }
                prefixed(e, t) {
                    return t + "grid-column-align";
                }
                normalize() {
                    return "justify-self";
                }
            };
        $l.names = ["grid-column-align"];
        mw.exports = $l;
    });
    var ww = v((Lq, yw) => {
        l();
        var Q_ = R(),
            jl = class extends Q_ {
                prefixed(e, t) {
                    return t + "scroll-chaining";
                }
                normalize() {
                    return "overscroll-behavior";
                }
                set(e, t) {
                    return (
                        e.value === "auto"
                            ? (e.value = "chained")
                            : (e.value === "none" || e.value === "contain") &&
                              (e.value = "none"),
                        super.set(e, t)
                    );
                }
            };
        jl.names = ["overscroll-behavior", "scroll-chaining"];
        yw.exports = jl;
    });
    var xw = v(($q, vw) => {
        l();
        var J_ = R(),
            {
                parseGridAreas: X_,
                warnMissedAreas: K_,
                prefixTrackProp: Z_,
                prefixTrackValue: bw,
                getGridGap: eE,
                warnGridGap: tE,
                inheritGridGap: rE,
            } = dt();
        function iE(i) {
            return i
                .trim()
                .slice(1, -1)
                .split(/["']\s*["']?/g);
        }
        var zl = class extends J_ {
            insert(e, t, r, n) {
                if (t !== "-ms-") return super.insert(e, t, r);
                let a = !1,
                    s = !1,
                    o = e.parent,
                    u = eE(e);
                (u = rE(e, u) || u),
                    o.walkDecls(/-ms-grid-rows/, (p) => p.remove()),
                    o.walkDecls(/grid-template-(rows|columns)/, (p) => {
                        if (p.prop === "grid-template-rows") {
                            s = !0;
                            let { prop: d, value: h } = p;
                            p.cloneBefore({
                                prop: Z_({ prop: d, prefix: t }),
                                value: bw({ value: h, gap: u.row }),
                            });
                        } else a = !0;
                    });
                let c = iE(e.value);
                a &&
                    !s &&
                    u.row &&
                    c.length > 1 &&
                    e.cloneBefore({
                        prop: "-ms-grid-rows",
                        value: bw({
                            value: `repeat(${c.length}, auto)`,
                            gap: u.row,
                        }),
                        raws: {},
                    }),
                    tE({ gap: u, hasColumns: a, decl: e, result: n });
                let f = X_({ rows: c, gap: u });
                return K_(f, e, n), e;
            }
        };
        zl.names = ["grid-template-areas"];
        vw.exports = zl;
    });
    var Sw = v((jq, kw) => {
        l();
        var nE = R(),
            Vl = class extends nE {
                set(e, t) {
                    return (
                        t === "-webkit-" &&
                            (e.value = e.value.replace(
                                /\s*(right|left)\s*/i,
                                ""
                            )),
                        super.set(e, t)
                    );
                }
            };
        Vl.names = ["text-emphasis-position"];
        kw.exports = Vl;
    });
    var Aw = v((zq, Cw) => {
        l();
        var sE = R(),
            Ul = class extends sE {
                set(e, t) {
                    return e.prop === "text-decoration-skip-ink" &&
                        e.value === "auto"
                        ? ((e.prop = t + "text-decoration-skip"),
                          (e.value = "ink"),
                          e)
                        : super.set(e, t);
                }
            };
        Ul.names = ["text-decoration-skip-ink", "text-decoration-skip"];
        Cw.exports = Ul;
    });
    var Dw = v((Vq, Pw) => {
        l();
        ("use strict");
        Pw.exports = {
            wrap: _w,
            limit: Ew,
            validate: Ow,
            test: Wl,
            curry: aE,
            name: Tw,
        };
        function _w(i, e, t) {
            var r = e - i;
            return ((((t - i) % r) + r) % r) + i;
        }
        function Ew(i, e, t) {
            return Math.max(i, Math.min(e, t));
        }
        function Ow(i, e, t, r, n) {
            if (!Wl(i, e, t, r, n))
                throw new Error(
                    t + " is outside of range [" + i + "," + e + ")"
                );
            return t;
        }
        function Wl(i, e, t, r, n) {
            return !(t < i || t > e || (n && t === e) || (r && t === i));
        }
        function Tw(i, e, t, r) {
            return (t ? "(" : "[") + i + "," + e + (r ? ")" : "]");
        }
        function aE(i, e, t, r) {
            var n = Tw.bind(null, i, e, t, r);
            return {
                wrap: _w.bind(null, i, e),
                limit: Ew.bind(null, i, e),
                validate: function (a) {
                    return Ow(i, e, a, t, r);
                },
                test: function (a) {
                    return Wl(i, e, a, t, r);
                },
                toString: n,
                name: n,
            };
        }
    });
    var Rw = v((Uq, qw) => {
        l();
        var Gl = Yn(),
            oE = Dw(),
            lE = Wt(),
            uE = ke(),
            fE = ue(),
            Iw = /top|left|right|bottom/gi,
            Qe = class extends uE {
                replace(e, t) {
                    let r = Gl(e);
                    for (let n of r.nodes)
                        if (n.type === "function" && n.value === this.name)
                            if (
                                ((n.nodes = this.newDirection(n.nodes)),
                                (n.nodes = this.normalize(n.nodes)),
                                t === "-webkit- old")
                            ) {
                                if (!this.oldWebkit(n)) return !1;
                            } else
                                (n.nodes = this.convertDirection(n.nodes)),
                                    (n.value = t + n.value);
                    return r.toString();
                }
                replaceFirst(e, ...t) {
                    return t
                        .map((n) =>
                            n === " "
                                ? { type: "space", value: n }
                                : { type: "word", value: n }
                        )
                        .concat(e.slice(1));
                }
                normalizeUnit(e, t) {
                    return `${(parseFloat(e) / t) * 360}deg`;
                }
                normalize(e) {
                    if (!e[0]) return e;
                    if (/-?\d+(.\d+)?grad/.test(e[0].value))
                        e[0].value = this.normalizeUnit(e[0].value, 400);
                    else if (/-?\d+(.\d+)?rad/.test(e[0].value))
                        e[0].value = this.normalizeUnit(
                            e[0].value,
                            2 * Math.PI
                        );
                    else if (/-?\d+(.\d+)?turn/.test(e[0].value))
                        e[0].value = this.normalizeUnit(e[0].value, 1);
                    else if (e[0].value.includes("deg")) {
                        let t = parseFloat(e[0].value);
                        (t = oE.wrap(0, 360, t)), (e[0].value = `${t}deg`);
                    }
                    return (
                        e[0].value === "0deg"
                            ? (e = this.replaceFirst(e, "to", " ", "top"))
                            : e[0].value === "90deg"
                            ? (e = this.replaceFirst(e, "to", " ", "right"))
                            : e[0].value === "180deg"
                            ? (e = this.replaceFirst(e, "to", " ", "bottom"))
                            : e[0].value === "270deg" &&
                              (e = this.replaceFirst(e, "to", " ", "left")),
                        e
                    );
                }
                newDirection(e) {
                    if (
                        e[0].value === "to" ||
                        ((Iw.lastIndex = 0), !Iw.test(e[0].value))
                    )
                        return e;
                    e.unshift(
                        { type: "word", value: "to" },
                        { type: "space", value: " " }
                    );
                    for (let t = 2; t < e.length && e[t].type !== "div"; t++)
                        e[t].type === "word" &&
                            (e[t].value = this.revertDirection(e[t].value));
                    return e;
                }
                isRadial(e) {
                    let t = "before";
                    for (let r of e)
                        if (t === "before" && r.type === "space") t = "at";
                        else if (t === "at" && r.value === "at") t = "after";
                        else {
                            if (t === "after" && r.type === "space") return !0;
                            if (r.type === "div") break;
                            t = "before";
                        }
                    return !1;
                }
                convertDirection(e) {
                    return (
                        e.length > 0 &&
                            (e[0].value === "to"
                                ? this.fixDirection(e)
                                : e[0].value.includes("deg")
                                ? this.fixAngle(e)
                                : this.isRadial(e) && this.fixRadial(e)),
                        e
                    );
                }
                fixDirection(e) {
                    e.splice(0, 2);
                    for (let t of e) {
                        if (t.type === "div") break;
                        t.type === "word" &&
                            (t.value = this.revertDirection(t.value));
                    }
                }
                fixAngle(e) {
                    let t = e[0].value;
                    (t = parseFloat(t)),
                        (t = Math.abs(450 - t) % 360),
                        (t = this.roundFloat(t, 3)),
                        (e[0].value = `${t}deg`);
                }
                fixRadial(e) {
                    let t = [],
                        r = [],
                        n,
                        a,
                        s,
                        o,
                        u;
                    for (o = 0; o < e.length - 2; o++)
                        if (
                            ((n = e[o]),
                            (a = e[o + 1]),
                            (s = e[o + 2]),
                            n.type === "space" &&
                                a.value === "at" &&
                                s.type === "space")
                        ) {
                            u = o + 3;
                            break;
                        } else t.push(n);
                    let c;
                    for (o = u; o < e.length; o++)
                        if (e[o].type === "div") {
                            c = e[o];
                            break;
                        } else r.push(e[o]);
                    e.splice(0, o, ...r, c, ...t);
                }
                revertDirection(e) {
                    return Qe.directions[e.toLowerCase()] || e;
                }
                roundFloat(e, t) {
                    return parseFloat(e.toFixed(t));
                }
                oldWebkit(e) {
                    let { nodes: t } = e,
                        r = Gl.stringify(e.nodes);
                    if (
                        this.name !== "linear-gradient" ||
                        (t[0] && t[0].value.includes("deg")) ||
                        r.includes("px") ||
                        r.includes("-corner") ||
                        r.includes("-side")
                    )
                        return !1;
                    let n = [[]];
                    for (let a of t)
                        n[n.length - 1].push(a),
                            a.type === "div" && a.value === "," && n.push([]);
                    this.oldDirection(n), this.colorStops(n), (e.nodes = []);
                    for (let a of n) e.nodes = e.nodes.concat(a);
                    return (
                        e.nodes.unshift(
                            { type: "word", value: "linear" },
                            this.cloneDiv(e.nodes)
                        ),
                        (e.value = "-webkit-gradient"),
                        !0
                    );
                }
                oldDirection(e) {
                    let t = this.cloneDiv(e[0]);
                    if (e[0][0].value !== "to")
                        return e.unshift([
                            { type: "word", value: Qe.oldDirections.bottom },
                            t,
                        ]);
                    {
                        let r = [];
                        for (let a of e[0].slice(2))
                            a.type === "word" && r.push(a.value.toLowerCase());
                        r = r.join(" ");
                        let n = Qe.oldDirections[r] || r;
                        return (e[0] = [{ type: "word", value: n }, t]), e[0];
                    }
                }
                cloneDiv(e) {
                    for (let t of e)
                        if (t.type === "div" && t.value === ",") return t;
                    return { type: "div", value: ",", after: " " };
                }
                colorStops(e) {
                    let t = [];
                    for (let r = 0; r < e.length; r++) {
                        let n,
                            a = e[r],
                            s;
                        if (r === 0) continue;
                        let o = Gl.stringify(a[0]);
                        a[1] && a[1].type === "word"
                            ? (n = a[1].value)
                            : a[2] && a[2].type === "word" && (n = a[2].value);
                        let u;
                        r === 1 && (!n || n === "0%")
                            ? (u = `from(${o})`)
                            : r === e.length - 1 && (!n || n === "100%")
                            ? (u = `to(${o})`)
                            : n
                            ? (u = `color-stop(${n}, ${o})`)
                            : (u = `color-stop(${o})`);
                        let c = a[a.length - 1];
                        (e[r] = [{ type: "word", value: u }]),
                            c.type === "div" &&
                                c.value === "," &&
                                (s = e[r].push(c)),
                            t.push(s);
                    }
                    return t;
                }
                old(e) {
                    if (e === "-webkit-") {
                        let t =
                                this.name === "linear-gradient"
                                    ? "linear"
                                    : "radial",
                            r = "-gradient",
                            n = fE.regexp(
                                `-webkit-(${t}-gradient|gradient\\(\\s*${t})`,
                                !1
                            );
                        return new lE(this.name, e + this.name, r, n);
                    } else return super.old(e);
                }
                add(e, t) {
                    let r = e.prop;
                    if (r.includes("mask")) {
                        if (t === "-webkit-" || t === "-webkit- old")
                            return super.add(e, t);
                    } else if (
                        r === "list-style" ||
                        r === "list-style-image" ||
                        r === "content"
                    ) {
                        if (t === "-webkit-" || t === "-webkit- old")
                            return super.add(e, t);
                    } else return super.add(e, t);
                }
            };
        Qe.names = [
            "linear-gradient",
            "repeating-linear-gradient",
            "radial-gradient",
            "repeating-radial-gradient",
        ];
        Qe.directions = {
            top: "bottom",
            left: "right",
            bottom: "top",
            right: "left",
        };
        Qe.oldDirections = {
            top: "left bottom, left top",
            left: "right top, left top",
            bottom: "left top, left bottom",
            right: "left top, right top",
            "top right": "left bottom, right top",
            "top left": "right bottom, left top",
            "right top": "left bottom, right top",
            "right bottom": "left top, right bottom",
            "bottom right": "left top, right bottom",
            "bottom left": "right top, left bottom",
            "left top": "right bottom, left top",
            "left bottom": "right top, left bottom",
        };
        qw.exports = Qe;
    });
    var Fw = v((Wq, Bw) => {
        l();
        var cE = Wt(),
            pE = ke();
        function Mw(i) {
            return new RegExp(`(^|[\\s,(])(${i}($|[\\s),]))`, "gi");
        }
        var Hl = class extends pE {
            regexp() {
                return (
                    this.regexpCache || (this.regexpCache = Mw(this.name)),
                    this.regexpCache
                );
            }
            isStretch() {
                return (
                    this.name === "stretch" ||
                    this.name === "fill" ||
                    this.name === "fill-available"
                );
            }
            replace(e, t) {
                return t === "-moz-" && this.isStretch()
                    ? e.replace(this.regexp(), "$1-moz-available$3")
                    : t === "-webkit-" && this.isStretch()
                    ? e.replace(this.regexp(), "$1-webkit-fill-available$3")
                    : super.replace(e, t);
            }
            old(e) {
                let t = e + this.name;
                return (
                    this.isStretch() &&
                        (e === "-moz-"
                            ? (t = "-moz-available")
                            : e === "-webkit-" &&
                              (t = "-webkit-fill-available")),
                    new cE(this.name, t, t, Mw(t))
                );
            }
            add(e, t) {
                if (!(e.prop.includes("grid") && t !== "-webkit-"))
                    return super.add(e, t);
            }
        };
        Hl.names = [
            "max-content",
            "min-content",
            "fit-content",
            "fill",
            "fill-available",
            "stretch",
        ];
        Bw.exports = Hl;
    });
    var $w = v((Gq, Lw) => {
        l();
        var Nw = Wt(),
            dE = ke(),
            Yl = class extends dE {
                replace(e, t) {
                    return t === "-webkit-"
                        ? e.replace(
                              this.regexp(),
                              "$1-webkit-optimize-contrast"
                          )
                        : t === "-moz-"
                        ? e.replace(this.regexp(), "$1-moz-crisp-edges")
                        : super.replace(e, t);
                }
                old(e) {
                    return e === "-webkit-"
                        ? new Nw(this.name, "-webkit-optimize-contrast")
                        : e === "-moz-"
                        ? new Nw(this.name, "-moz-crisp-edges")
                        : super.old(e);
                }
            };
        Yl.names = ["pixelated"];
        Lw.exports = Yl;
    });
    var zw = v((Hq, jw) => {
        l();
        var hE = ke(),
            Ql = class extends hE {
                replace(e, t) {
                    let r = super.replace(e, t);
                    return (
                        t === "-webkit-" &&
                            (r = r.replace(
                                /("[^"]+"|'[^']+')(\s+\d+\w)/gi,
                                "url($1)$2"
                            )),
                        r
                    );
                }
            };
        Ql.names = ["image-set"];
        jw.exports = Ql;
    });
    var Uw = v((Yq, Vw) => {
        l();
        var mE = me().list,
            gE = ke(),
            Jl = class extends gE {
                replace(e, t) {
                    return mE
                        .space(e)
                        .map((r) => {
                            if (
                                r.slice(0, +this.name.length + 1) !==
                                this.name + "("
                            )
                                return r;
                            let n = r.lastIndexOf(")"),
                                a = r.slice(n + 1),
                                s = r.slice(this.name.length + 1, n);
                            if (t === "-webkit-") {
                                let o = s.match(/\d*.?\d+%?/);
                                o
                                    ? ((s = s.slice(o[0].length).trim()),
                                      (s += `, ${o[0]}`))
                                    : (s += ", 0.5");
                            }
                            return t + this.name + "(" + s + ")" + a;
                        })
                        .join(" ");
                }
            };
        Jl.names = ["cross-fade"];
        Vw.exports = Jl;
    });
    var Gw = v((Qq, Ww) => {
        l();
        var yE = de(),
            wE = Wt(),
            bE = ke(),
            Xl = class extends bE {
                constructor(e, t) {
                    super(e, t);
                    e === "display-flex" && (this.name = "flex");
                }
                check(e) {
                    return e.prop === "display" && e.value === this.name;
                }
                prefixed(e) {
                    let t, r;
                    return (
                        ([t, e] = yE(e)),
                        t === 2009
                            ? this.name === "flex"
                                ? (r = "box")
                                : (r = "inline-box")
                            : t === 2012
                            ? this.name === "flex"
                                ? (r = "flexbox")
                                : (r = "inline-flexbox")
                            : t === "final" && (r = this.name),
                        e + r
                    );
                }
                replace(e, t) {
                    return this.prefixed(t);
                }
                old(e) {
                    let t = this.prefixed(e);
                    if (!!t) return new wE(this.name, t);
                }
            };
        Xl.names = ["display-flex", "inline-flex"];
        Ww.exports = Xl;
    });
    var Yw = v((Jq, Hw) => {
        l();
        var vE = ke(),
            Kl = class extends vE {
                constructor(e, t) {
                    super(e, t);
                    e === "display-grid" && (this.name = "grid");
                }
                check(e) {
                    return e.prop === "display" && e.value === this.name;
                }
            };
        Kl.names = ["display-grid", "inline-grid"];
        Hw.exports = Kl;
    });
    var Jw = v((Xq, Qw) => {
        l();
        var xE = ke(),
            Zl = class extends xE {
                constructor(e, t) {
                    super(e, t);
                    e === "filter-function" && (this.name = "filter");
                }
            };
        Zl.names = ["filter", "filter-function"];
        Qw.exports = Zl;
    });
    var eb = v((Kq, Zw) => {
        l();
        var Xw = ii(),
            M = R(),
            Kw = qm(),
            kE = Xm(),
            SE = il(),
            CE = gg(),
            eu = ct(),
            tr = Gt(),
            AE = Cg(),
            $e = ke(),
            rr = ue(),
            _E = _g(),
            EE = Og(),
            OE = Pg(),
            TE = Ig(),
            PE = Fg(),
            DE = $g(),
            IE = zg(),
            qE = Ug(),
            RE = Gg(),
            ME = Yg(),
            BE = Jg(),
            FE = Kg(),
            NE = ey(),
            LE = ry(),
            $E = ny(),
            jE = oy(),
            zE = uy(),
            VE = py(),
            UE = hy(),
            WE = gy(),
            GE = by(),
            HE = xy(),
            YE = Cy(),
            QE = _y(),
            JE = Oy(),
            XE = Py(),
            KE = Iy(),
            ZE = My(),
            e5 = Fy(),
            t5 = Ly(),
            r5 = jy(),
            i5 = Vy(),
            n5 = Wy(),
            s5 = Hy(),
            a5 = Jy(),
            o5 = Ky(),
            l5 = ew(),
            u5 = rw(),
            f5 = nw(),
            c5 = ow(),
            p5 = uw(),
            d5 = cw(),
            h5 = hw(),
            m5 = gw(),
            g5 = ww(),
            y5 = xw(),
            w5 = Sw(),
            b5 = Aw(),
            v5 = Rw(),
            x5 = Fw(),
            k5 = $w(),
            S5 = zw(),
            C5 = Uw(),
            A5 = Gw(),
            _5 = Yw(),
            E5 = Jw();
        tr.hack(_E);
        tr.hack(EE);
        tr.hack(OE);
        tr.hack(TE);
        M.hack(PE);
        M.hack(DE);
        M.hack(IE);
        M.hack(qE);
        M.hack(RE);
        M.hack(ME);
        M.hack(BE);
        M.hack(FE);
        M.hack(NE);
        M.hack(LE);
        M.hack($E);
        M.hack(jE);
        M.hack(zE);
        M.hack(VE);
        M.hack(UE);
        M.hack(WE);
        M.hack(GE);
        M.hack(HE);
        M.hack(YE);
        M.hack(QE);
        M.hack(JE);
        M.hack(XE);
        M.hack(KE);
        M.hack(ZE);
        M.hack(e5);
        M.hack(t5);
        M.hack(r5);
        M.hack(i5);
        M.hack(n5);
        M.hack(s5);
        M.hack(a5);
        M.hack(o5);
        M.hack(l5);
        M.hack(u5);
        M.hack(f5);
        M.hack(c5);
        M.hack(p5);
        M.hack(d5);
        M.hack(h5);
        M.hack(m5);
        M.hack(g5);
        M.hack(y5);
        M.hack(w5);
        M.hack(b5);
        $e.hack(v5);
        $e.hack(x5);
        $e.hack(k5);
        $e.hack(S5);
        $e.hack(C5);
        $e.hack(A5);
        $e.hack(_5);
        $e.hack(E5);
        var tu = new Map(),
            si = class {
                constructor(e, t, r = {}) {
                    (this.data = e),
                        (this.browsers = t),
                        (this.options = r),
                        ([this.add, this.remove] = this.preprocess(
                            this.select(this.data)
                        )),
                        (this.transition = new kE(this)),
                        (this.processor = new SE(this));
                }
                cleaner() {
                    if (this.cleanerCache) return this.cleanerCache;
                    if (this.browsers.selected.length) {
                        let e = new eu(this.browsers.data, []);
                        this.cleanerCache = new si(this.data, e, this.options);
                    } else return this;
                    return this.cleanerCache;
                }
                select(e) {
                    let t = { add: {}, remove: {} };
                    for (let r in e) {
                        let n = e[r],
                            a = n.browsers.map((u) => {
                                let c = u.split(" ");
                                return {
                                    browser: `${c[0]} ${c[1]}`,
                                    note: c[2],
                                };
                            }),
                            s = a
                                .filter((u) => u.note)
                                .map(
                                    (u) =>
                                        `${this.browsers.prefix(u.browser)} ${
                                            u.note
                                        }`
                                );
                        (s = rr.uniq(s)),
                            (a = a
                                .filter((u) =>
                                    this.browsers.isSelected(u.browser)
                                )
                                .map((u) => {
                                    let c = this.browsers.prefix(u.browser);
                                    return u.note ? `${c} ${u.note}` : c;
                                })),
                            (a = this.sort(rr.uniq(a))),
                            this.options.flexbox === "no-2009" &&
                                (a = a.filter((u) => !u.includes("2009")));
                        let o = n.browsers.map((u) => this.browsers.prefix(u));
                        n.mistakes && (o = o.concat(n.mistakes)),
                            (o = o.concat(s)),
                            (o = rr.uniq(o)),
                            a.length
                                ? ((t.add[r] = a),
                                  a.length < o.length &&
                                      (t.remove[r] = o.filter(
                                          (u) => !a.includes(u)
                                      )))
                                : (t.remove[r] = o);
                    }
                    return t;
                }
                sort(e) {
                    return e.sort((t, r) => {
                        let n = rr.removeNote(t).length,
                            a = rr.removeNote(r).length;
                        return n === a ? r.length - t.length : a - n;
                    });
                }
                preprocess(e) {
                    let t = { selectors: [], "@supports": new CE(si, this) };
                    for (let n in e.add) {
                        let a = e.add[n];
                        if (n === "@keyframes" || n === "@viewport")
                            t[n] = new AE(n, a, this);
                        else if (n === "@resolution") t[n] = new Kw(n, a, this);
                        else if (this.data[n].selector)
                            t.selectors.push(tr.load(n, a, this));
                        else {
                            let s = this.data[n].props;
                            if (s) {
                                let o = $e.load(n, a, this);
                                for (let u of s)
                                    t[u] || (t[u] = { values: [] }),
                                        t[u].values.push(o);
                            } else {
                                let o = (t[n] && t[n].values) || [];
                                (t[n] = M.load(n, a, this)), (t[n].values = o);
                            }
                        }
                    }
                    let r = { selectors: [] };
                    for (let n in e.remove) {
                        let a = e.remove[n];
                        if (this.data[n].selector) {
                            let s = tr.load(n, a);
                            for (let o of a) r.selectors.push(s.old(o));
                        } else if (n === "@keyframes" || n === "@viewport")
                            for (let s of a) {
                                let o = `@${s}${n.slice(1)}`;
                                r[o] = { remove: !0 };
                            }
                        else if (n === "@resolution") r[n] = new Kw(n, a, this);
                        else {
                            let s = this.data[n].props;
                            if (s) {
                                let o = $e.load(n, [], this);
                                for (let u of a) {
                                    let c = o.old(u);
                                    if (c)
                                        for (let f of s)
                                            r[f] || (r[f] = {}),
                                                r[f].values ||
                                                    (r[f].values = []),
                                                r[f].values.push(c);
                                }
                            } else
                                for (let o of a) {
                                    let u = this.decl(n).old(n, o);
                                    if (n === "align-self") {
                                        let c = t[n] && t[n].prefixes;
                                        if (c) {
                                            if (
                                                o === "-webkit- 2009" &&
                                                c.includes("-webkit-")
                                            )
                                                continue;
                                            if (
                                                o === "-webkit-" &&
                                                c.includes("-webkit- 2009")
                                            )
                                                continue;
                                        }
                                    }
                                    for (let c of u)
                                        r[c] || (r[c] = {}), (r[c].remove = !0);
                                }
                        }
                    }
                    return [t, r];
                }
                decl(e) {
                    return tu.has(e) || tu.set(e, M.load(e)), tu.get(e);
                }
                unprefixed(e) {
                    let t = this.normalize(Xw.unprefixed(e));
                    return t === "flex-direction" && (t = "flex-flow"), t;
                }
                normalize(e) {
                    return this.decl(e).normalize(e);
                }
                prefixed(e, t) {
                    return (e = Xw.unprefixed(e)), this.decl(e).prefixed(e, t);
                }
                values(e, t) {
                    let r = this[e],
                        n = r["*"] && r["*"].values,
                        a = r[t] && r[t].values;
                    return n && a ? rr.uniq(n.concat(a)) : n || a || [];
                }
                group(e) {
                    let t = e.parent,
                        r = t.index(e),
                        { length: n } = t.nodes,
                        a = this.unprefixed(e.prop),
                        s = (o, u) => {
                            for (r += o; r >= 0 && r < n; ) {
                                let c = t.nodes[r];
                                if (c.type === "decl") {
                                    if (
                                        (o === -1 &&
                                            c.prop === a &&
                                            !eu.withPrefix(c.value)) ||
                                        this.unprefixed(c.prop) !== a
                                    )
                                        break;
                                    if (u(c) === !0) return !0;
                                    if (
                                        o === 1 &&
                                        c.prop === a &&
                                        !eu.withPrefix(c.value)
                                    )
                                        break;
                                }
                                r += o;
                            }
                            return !1;
                        };
                    return {
                        up(o) {
                            return s(-1, o);
                        },
                        down(o) {
                            return s(1, o);
                        },
                    };
                }
            };
        Zw.exports = si;
    });
    var rb = v((Zq, tb) => {
        l();
        tb.exports = {
            "backdrop-filter": {
                feature: "css-backdrop-filter",
                browsers: [
                    "ios_saf 16.1",
                    "ios_saf 16.3",
                    "ios_saf 16.4",
                    "ios_saf 16.5",
                    "safari 16.5",
                ],
            },
            element: {
                props: [
                    "background",
                    "background-image",
                    "border-image",
                    "mask",
                    "list-style",
                    "list-style-image",
                    "content",
                    "mask-image",
                ],
                feature: "css-element-function",
                browsers: ["firefox 114"],
            },
            "user-select": {
                mistakes: ["-khtml-"],
                feature: "user-select-none",
                browsers: [
                    "ios_saf 16.1",
                    "ios_saf 16.3",
                    "ios_saf 16.4",
                    "ios_saf 16.5",
                    "safari 16.5",
                ],
            },
            "background-clip": {
                feature: "background-clip-text",
                browsers: [
                    "and_chr 114",
                    "and_uc 15.5",
                    "chrome 109",
                    "chrome 113",
                    "chrome 114",
                    "edge 114",
                    "opera 99",
                    "samsung 21",
                ],
            },
            hyphens: {
                feature: "css-hyphens",
                browsers: [
                    "ios_saf 16.1",
                    "ios_saf 16.3",
                    "ios_saf 16.4",
                    "ios_saf 16.5",
                    "safari 16.5",
                ],
            },
            fill: {
                props: [
                    "width",
                    "min-width",
                    "max-width",
                    "height",
                    "min-height",
                    "max-height",
                    "inline-size",
                    "min-inline-size",
                    "max-inline-size",
                    "block-size",
                    "min-block-size",
                    "max-block-size",
                    "grid",
                    "grid-template",
                    "grid-template-rows",
                    "grid-template-columns",
                    "grid-auto-columns",
                    "grid-auto-rows",
                ],
                feature: "intrinsic-width",
                browsers: [
                    "and_chr 114",
                    "and_uc 15.5",
                    "chrome 109",
                    "chrome 113",
                    "chrome 114",
                    "edge 114",
                    "opera 99",
                    "samsung 21",
                ],
            },
            "fill-available": {
                props: [
                    "width",
                    "min-width",
                    "max-width",
                    "height",
                    "min-height",
                    "max-height",
                    "inline-size",
                    "min-inline-size",
                    "max-inline-size",
                    "block-size",
                    "min-block-size",
                    "max-block-size",
                    "grid",
                    "grid-template",
                    "grid-template-rows",
                    "grid-template-columns",
                    "grid-auto-columns",
                    "grid-auto-rows",
                ],
                feature: "intrinsic-width",
                browsers: [
                    "and_chr 114",
                    "and_uc 15.5",
                    "chrome 109",
                    "chrome 113",
                    "chrome 114",
                    "edge 114",
                    "opera 99",
                    "samsung 21",
                ],
            },
            stretch: {
                props: [
                    "width",
                    "min-width",
                    "max-width",
                    "height",
                    "min-height",
                    "max-height",
                    "inline-size",
                    "min-inline-size",
                    "max-inline-size",
                    "block-size",
                    "min-block-size",
                    "max-block-size",
                    "grid",
                    "grid-template",
                    "grid-template-rows",
                    "grid-template-columns",
                    "grid-auto-columns",
                    "grid-auto-rows",
                ],
                feature: "intrinsic-width",
                browsers: ["firefox 114"],
            },
            "fit-content": {
                props: [
                    "width",
                    "min-width",
                    "max-width",
                    "height",
                    "min-height",
                    "max-height",
                    "inline-size",
                    "min-inline-size",
                    "max-inline-size",
                    "block-size",
                    "min-block-size",
                    "max-block-size",
                    "grid",
                    "grid-template",
                    "grid-template-rows",
                    "grid-template-columns",
                    "grid-auto-columns",
                    "grid-auto-rows",
                ],
                feature: "intrinsic-width",
                browsers: ["firefox 114"],
            },
            "text-decoration-style": {
                feature: "text-decoration",
                browsers: [
                    "ios_saf 16.1",
                    "ios_saf 16.3",
                    "ios_saf 16.4",
                    "ios_saf 16.5",
                ],
            },
            "text-decoration-color": {
                feature: "text-decoration",
                browsers: [
                    "ios_saf 16.1",
                    "ios_saf 16.3",
                    "ios_saf 16.4",
                    "ios_saf 16.5",
                ],
            },
            "text-decoration-line": {
                feature: "text-decoration",
                browsers: [
                    "ios_saf 16.1",
                    "ios_saf 16.3",
                    "ios_saf 16.4",
                    "ios_saf 16.5",
                ],
            },
            "text-decoration": {
                feature: "text-decoration",
                browsers: [
                    "ios_saf 16.1",
                    "ios_saf 16.3",
                    "ios_saf 16.4",
                    "ios_saf 16.5",
                ],
            },
            "text-decoration-skip": {
                feature: "text-decoration",
                browsers: [
                    "ios_saf 16.1",
                    "ios_saf 16.3",
                    "ios_saf 16.4",
                    "ios_saf 16.5",
                ],
            },
            "text-decoration-skip-ink": {
                feature: "text-decoration",
                browsers: [
                    "ios_saf 16.1",
                    "ios_saf 16.3",
                    "ios_saf 16.4",
                    "ios_saf 16.5",
                ],
            },
            "text-size-adjust": {
                feature: "text-size-adjust",
                browsers: [
                    "ios_saf 16.1",
                    "ios_saf 16.3",
                    "ios_saf 16.4",
                    "ios_saf 16.5",
                ],
            },
            "mask-clip": {
                feature: "css-masks",
                browsers: [
                    "and_chr 114",
                    "and_uc 15.5",
                    "chrome 109",
                    "chrome 113",
                    "chrome 114",
                    "edge 114",
                    "opera 99",
                    "samsung 21",
                ],
            },
            "mask-composite": {
                feature: "css-masks",
                browsers: [
                    "and_chr 114",
                    "and_uc 15.5",
                    "chrome 109",
                    "chrome 113",
                    "chrome 114",
                    "edge 114",
                    "opera 99",
                    "samsung 21",
                ],
            },
            "mask-image": {
                feature: "css-masks",
                browsers: [
                    "and_chr 114",
                    "and_uc 15.5",
                    "chrome 109",
                    "chrome 113",
                    "chrome 114",
                    "edge 114",
                    "opera 99",
                    "samsung 21",
                ],
            },
            "mask-origin": {
                feature: "css-masks",
                browsers: [
                    "and_chr 114",
                    "and_uc 15.5",
                    "chrome 109",
                    "chrome 113",
                    "chrome 114",
                    "edge 114",
                    "opera 99",
                    "samsung 21",
                ],
            },
            "mask-repeat": {
                feature: "css-masks",
                browsers: [
                    "and_chr 114",
                    "and_uc 15.5",
                    "chrome 109",
                    "chrome 113",
                    "chrome 114",
                    "edge 114",
                    "opera 99",
                    "samsung 21",
                ],
            },
            "mask-border-repeat": {
                feature: "css-masks",
                browsers: [
                    "and_chr 114",
                    "and_uc 15.5",
                    "chrome 109",
                    "chrome 113",
                    "chrome 114",
                    "edge 114",
                    "opera 99",
                    "samsung 21",
                ],
            },
            "mask-border-source": {
                feature: "css-masks",
                browsers: [
                    "and_chr 114",
                    "and_uc 15.5",
                    "chrome 109",
                    "chrome 113",
                    "chrome 114",
                    "edge 114",
                    "opera 99",
                    "samsung 21",
                ],
            },
            mask: {
                feature: "css-masks",
                browsers: [
                    "and_chr 114",
                    "and_uc 15.5",
                    "chrome 109",
                    "chrome 113",
                    "chrome 114",
                    "edge 114",
                    "opera 99",
                    "samsung 21",
                ],
            },
            "mask-position": {
                feature: "css-masks",
                browsers: [
                    "and_chr 114",
                    "and_uc 15.5",
                    "chrome 109",
                    "chrome 113",
                    "chrome 114",
                    "edge 114",
                    "opera 99",
                    "samsung 21",
                ],
            },
            "mask-size": {
                feature: "css-masks",
                browsers: [
                    "and_chr 114",
                    "and_uc 15.5",
                    "chrome 109",
                    "chrome 113",
                    "chrome 114",
                    "edge 114",
                    "opera 99",
                    "samsung 21",
                ],
            },
            "mask-border": {
                feature: "css-masks",
                browsers: [
                    "and_chr 114",
                    "and_uc 15.5",
                    "chrome 109",
                    "chrome 113",
                    "chrome 114",
                    "edge 114",
                    "opera 99",
                    "samsung 21",
                ],
            },
            "mask-border-outset": {
                feature: "css-masks",
                browsers: [
                    "and_chr 114",
                    "and_uc 15.5",
                    "chrome 109",
                    "chrome 113",
                    "chrome 114",
                    "edge 114",
                    "opera 99",
                    "samsung 21",
                ],
            },
            "mask-border-width": {
                feature: "css-masks",
                browsers: [
                    "and_chr 114",
                    "and_uc 15.5",
                    "chrome 109",
                    "chrome 113",
                    "chrome 114",
                    "edge 114",
                    "opera 99",
                    "samsung 21",
                ],
            },
            "mask-border-slice": {
                feature: "css-masks",
                browsers: [
                    "and_chr 114",
                    "and_uc 15.5",
                    "chrome 109",
                    "chrome 113",
                    "chrome 114",
                    "edge 114",
                    "opera 99",
                    "samsung 21",
                ],
            },
            "clip-path": { feature: "css-clip-path", browsers: ["samsung 21"] },
            "box-decoration-break": {
                feature: "css-boxdecorationbreak",
                browsers: [
                    "and_chr 114",
                    "and_uc 15.5",
                    "chrome 109",
                    "chrome 113",
                    "chrome 114",
                    "edge 114",
                    "ios_saf 16.1",
                    "ios_saf 16.3",
                    "ios_saf 16.4",
                    "ios_saf 16.5",
                    "opera 99",
                    "safari 16.5",
                    "samsung 21",
                ],
            },
            appearance: { feature: "css-appearance", browsers: ["samsung 21"] },
            "image-set": {
                props: [
                    "background",
                    "background-image",
                    "border-image",
                    "cursor",
                    "mask",
                    "mask-image",
                    "list-style",
                    "list-style-image",
                    "content",
                ],
                feature: "css-image-set",
                browsers: ["and_uc 15.5", "chrome 109", "samsung 21"],
            },
            "cross-fade": {
                props: [
                    "background",
                    "background-image",
                    "border-image",
                    "mask",
                    "list-style",
                    "list-style-image",
                    "content",
                    "mask-image",
                ],
                feature: "css-cross-fade",
                browsers: [
                    "and_chr 114",
                    "and_uc 15.5",
                    "chrome 109",
                    "chrome 113",
                    "chrome 114",
                    "edge 114",
                    "opera 99",
                    "samsung 21",
                ],
            },
            isolate: {
                props: ["unicode-bidi"],
                feature: "css-unicode-bidi",
                browsers: [
                    "ios_saf 16.1",
                    "ios_saf 16.3",
                    "ios_saf 16.4",
                    "ios_saf 16.5",
                    "safari 16.5",
                ],
            },
            "color-adjust": {
                feature: "css-color-adjust",
                browsers: [
                    "chrome 109",
                    "chrome 113",
                    "chrome 114",
                    "edge 114",
                    "opera 99",
                ],
            },
        };
    });
    var nb = v((e6, ib) => {
        l();
        ib.exports = {};
    });
    var lb = v((t6, ob) => {
        l();
        var O5 = Wo(),
            { agents: T5 } = (zn(), jn),
            ru = bm(),
            P5 = ct(),
            D5 = eb(),
            I5 = rb(),
            q5 = nb(),
            sb = { browsers: T5, prefixes: I5 },
            ab = `
  Replace Autoprefixer \`browsers\` option to Browserslist config.
  Use \`browserslist\` key in \`package.json\` or \`.browserslistrc\` file.

  Using \`browsers\` option can cause errors. Browserslist config can
  be used for Babel, Autoprefixer, postcss-normalize and other tools.

  If you really need to use option, rename it to \`overrideBrowserslist\`.

  Learn more at:
  https://github.com/browserslist/browserslist#readme
  https://twitter.com/browserslist

`;
        function R5(i) {
            return Object.prototype.toString.apply(i) === "[object Object]";
        }
        var iu = new Map();
        function M5(i, e) {
            e.browsers.selected.length !== 0 &&
                (e.add.selectors.length > 0 ||
                    Object.keys(e.add).length > 2 ||
                    i.warn(`Autoprefixer target browsers do not need any prefixes.You do not need Autoprefixer anymore.
Check your Browserslist config to be sure that your targets are set up correctly.

  Learn more at:
  https://github.com/postcss/autoprefixer#readme
  https://github.com/browserslist/browserslist#readme

`));
        }
        ob.exports = ir;
        function ir(...i) {
            let e;
            if (
                (i.length === 1 && R5(i[0])
                    ? ((e = i[0]), (i = void 0))
                    : i.length === 0 || (i.length === 1 && !i[0])
                    ? (i = void 0)
                    : i.length <= 2 && (Array.isArray(i[0]) || !i[0])
                    ? ((e = i[1]), (i = i[0]))
                    : typeof i[i.length - 1] == "object" && (e = i.pop()),
                e || (e = {}),
                e.browser)
            )
                throw new Error(
                    "Change `browser` option to `overrideBrowserslist` in Autoprefixer"
                );
            if (e.browserslist)
                throw new Error(
                    "Change `browserslist` option to `overrideBrowserslist` in Autoprefixer"
                );
            e.overrideBrowserslist
                ? (i = e.overrideBrowserslist)
                : e.browsers &&
                  (typeof console != "undefined" &&
                      console.warn &&
                      (ru.red
                          ? console.warn(
                                ru.red(
                                    ab.replace(/`[^`]+`/g, (n) =>
                                        ru.yellow(n.slice(1, -1))
                                    )
                                )
                            )
                          : console.warn(ab)),
                  (i = e.browsers));
            let t = {
                ignoreUnknownVersions: e.ignoreUnknownVersions,
                stats: e.stats,
                env: e.env,
            };
            function r(n) {
                let a = sb,
                    s = new P5(a.browsers, i, n, t),
                    o = s.selected.join(", ") + JSON.stringify(e);
                return (
                    iu.has(o) || iu.set(o, new D5(a.prefixes, s, e)), iu.get(o)
                );
            }
            return {
                postcssPlugin: "autoprefixer",
                prepare(n) {
                    let a = r({ from: n.opts.from, env: e.env });
                    return {
                        OnceExit(s) {
                            M5(n, a),
                                e.remove !== !1 && a.processor.remove(s, n),
                                e.add !== !1 && a.processor.add(s, n);
                        },
                    };
                },
                info(n) {
                    return (
                        (n = n || {}), (n.from = n.from || m.cwd()), q5(r(n))
                    );
                },
                options: e,
                browsers: i,
            };
        }
        ir.postcss = !0;
        ir.data = sb;
        ir.defaults = O5.defaults;
        ir.info = () => ir().info();
    });
    var ub = {};
    Ae(ub, { default: () => B5 });
    var B5,
        fb = C(() => {
            l();
            B5 = [];
        });
    var pb = {};
    Ae(pb, { default: () => F5 });
    var cb,
        F5,
        db = C(() => {
            l();
            hi();
            (cb = K(bi())), (F5 = Ze(cb.default.theme));
        });
    var mb = {};
    Ae(mb, { default: () => N5 });
    var hb,
        N5,
        gb = C(() => {
            l();
            hi();
            (hb = K(bi())), (N5 = Ze(hb.default));
        });
    l();
    ("use strict");
    var L5 = Je(ym()),
        $5 = Je(me()),
        j5 = Je(lb()),
        z5 = Je((fb(), ub)),
        V5 = Je((db(), pb)),
        U5 = Je((gb(), mb)),
        W5 = Je((ts(), ku)),
        G5 = Je((bo(), wo)),
        H5 = Je((gs(), rf));
    function Je(i) {
        return i && i.__esModule ? i : { default: i };
    }
    console.warn(
        "cdn.tailwindcss.com should not be used in production. To use Tailwind CSS in production, install it as a PostCSS plugin or use the Tailwind CLI: https://tailwindcss.com/docs/installation"
    );
    var Qn = "tailwind",
        nu = "text/tailwindcss",
        yb = "/template.html",
        vt,
        wb = !0,
        bb = 0,
        su = new Set(),
        au,
        vb = "",
        xb = (i = !1) => ({
            get(e, t) {
                return (!i || t === "config") &&
                    typeof e[t] == "object" &&
                    e[t] !== null
                    ? new Proxy(e[t], xb())
                    : e[t];
            },
            set(e, t, r) {
                return (e[t] = r), (!i || t === "config") && ou(!0), !0;
            },
        });
    window[Qn] = new Proxy(
        {
            config: {},
            defaultTheme: V5.default,
            defaultConfig: U5.default,
            colors: W5.default,
            plugin: G5.default,
            resolveConfig: H5.default,
        },
        xb(!0)
    );
    function kb(i) {
        au.observe(i, {
            attributes: !0,
            attributeFilter: ["type"],
            characterData: !0,
            subtree: !0,
            childList: !0,
        });
    }
    new MutationObserver(async (i) => {
        let e = !1;
        if (!au) {
            au = new MutationObserver(async () => await ou(!0));
            for (let t of document.querySelectorAll(`style[type="${nu}"]`))
                kb(t);
        }
        for (let t of i)
            for (let r of t.addedNodes)
                r.nodeType === 1 &&
                    r.tagName === "STYLE" &&
                    r.getAttribute("type") === nu &&
                    (kb(r), (e = !0));
        await ou(e);
    }).observe(document.documentElement, {
        attributes: !0,
        attributeFilter: ["class"],
        childList: !0,
        subtree: !0,
    });
    async function ou(i = !1) {
        i && (bb++, su.clear());
        let e = "";
        for (let r of document.querySelectorAll(`style[type="${nu}"]`))
            e += r.textContent;
        let t = new Set();
        for (let r of document.querySelectorAll("[class]"))
            for (let n of r.classList) su.has(n) || t.add(n);
        if (
            document.body &&
            (wb || t.size > 0 || e !== vb || !vt || !vt.isConnected)
        ) {
            for (let n of t) su.add(n);
            (wb = !1), (vb = e), (self[yb] = Array.from(t).join(" "));
            let { css: r } = await (0, $5.default)([
                (0, L5.default)({
                    ...window[Qn].config,
                    _hash: bb,
                    content: [yb],
                    plugins: [
                        ...z5.default,
                        ...(Array.isArray(window[Qn].config.plugins)
                            ? window[Qn].config.plugins
                            : []),
                    ],
                }),
                (0, j5.default)({ remove: !1 }),
            ]).process(
                `@tailwind base;@tailwind components;@tailwind utilities;${e}`
            );
            (!vt || !vt.isConnected) &&
                ((vt = document.createElement("style")),
                document.head.append(vt)),
                (vt.textContent = r);
        }
    }
})();
/*! https://mths.be/cssesc v3.0.0 by @mathias */


/***/ }),

/***/ "./src/throttle.js":
/*!*************************!*\
  !*** ./src/throttle.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/ban-types
const Throttle = (fn, wait = 300) => {
    let inThrottle, lastFn, lastTime;
    return function (This) {
        const context = This,
            // eslint-disable-next-line prefer-rest-params
            args = arguments;
        if (!inThrottle) {
            fn.apply(context, args);
            lastTime = Date.now();
            inThrottle = true;
        } else {
            clearTimeout(lastFn);
            lastFn = setTimeout(() => {
                if (Date.now() - lastTime >= wait) {
                    fn.apply(context, args);
                    lastTime = Date.now();
                }
            }, Math.max(wait - (Date.now() - lastTime), 0));
        }
    };
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Throttle);


/***/ }),

/***/ "./src sync recursive":
/*!*******************!*\
  !*** ./src/ sync ***!
  \*******************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "./src sync recursive";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "./src/apercu-condensed-regular-pro.woff":
/*!***********************************************!*\
  !*** ./src/apercu-condensed-regular-pro.woff ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "06b92cceca7773689d87.woff";

/***/ }),

/***/ "./src/apercu-condensed-regular-pro.woff2":
/*!************************************************!*\
  !*** ./src/apercu-condensed-regular-pro.woff2 ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "2c4bb5599256439c0efc.woff2";

/***/ }),

/***/ "./src/assets/images/icon-tick.png":
/*!*****************************************!*\
  !*** ./src/assets/images/icon-tick.png ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "a8d20cd48e2e0d022083.png";

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"index": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _tailwind_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tailwind.js */ "./src/tailwind.js");
/* harmony import */ var _tailwind_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_tailwind_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _style_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./style.css */ "./src/style.css");
/* harmony import */ var _assets_images_icon_tick_png__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./assets/images/icon-tick.png */ "./src/assets/images/icon-tick.png");
/* harmony import */ var _print__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./print */ "./src/print.js");
/* harmony import */ var _style_scss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./style.scss */ "./src/style.scss");
/* harmony import */ var _subscribe_now_panel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./subscribe-now-panel */ "./src/subscribe-now-panel.js");
/* harmony import */ var _table_duplication_reformat__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./table-duplication-reformat */ "./src/table-duplication-reformat.js");
/* harmony import */ var _my_promises__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./my-promises */ "./src/my-promises.js");
/* harmony import */ var _subscribe_now_panel_scss__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./subscribe-now-panel.scss */ "./src/subscribe-now-panel.scss");
/* harmony import */ var _tables_scss__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./tables.scss */ "./src/tables.scss");
/* harmony import */ var _navigation_scss__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./navigation.scss */ "./src/navigation.scss");
/* harmony import */ var alpinejs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! alpinejs */ "./node_modules/alpinejs/dist/module.esm.js");
/* harmony import */ var _navigation_mobile__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./navigation-mobile */ "./src/navigation-mobile.js");
/* harmony import */ var _navigation_mobile__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_navigation_mobile__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var _alert__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./alert */ "./src/alert.js");
/* harmony import */ var _alert__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_alert__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var _alpinejs_collapse__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @alpinejs/collapse */ "./node_modules/@alpinejs/collapse/dist/module.esm.js");

// import "https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.0.2/css/bootstrap.min.css";

















function component() {
    window.Alpine = alpinejs__WEBPACK_IMPORTED_MODULE_12__["default"];
    alpinejs__WEBPACK_IMPORTED_MODULE_12__["default"].start();
    alpinejs__WEBPACK_IMPORTED_MODULE_12__["default"].plugin(_alpinejs_collapse__WEBPACK_IMPORTED_MODULE_15__["default"]);

    const element = document.createElement("div");
    const btn = document.createElement("button");

    // Lodash, now imported by this script
    element.innerHTML = lodash__WEBPACK_IMPORTED_MODULE_0___default().join(["<h1>", "Hello", "webpack", "</h1>"], " ");

    btn.innerHTML = "Click me and check the console!";
    btn.onclick = _print__WEBPACK_IMPORTED_MODULE_4__["default"];
    element.appendChild(btn);

    // css
    element.classList.add("hello");

    // image
    const myIcon = new Image();
    myIcon.src = _assets_images_icon_tick_png__WEBPACK_IMPORTED_MODULE_3__;
    myIcon.classList.add("image");

    element.appendChild(myIcon);

    // build and append to dom a CSS link tag with the href pointing at https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.0.2/css/bootstrap.min.css
    // const link = document.createElement("link");
    // link.rel = "stylesheet";
    // link.href =
    //     "https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.0.2/css/bootstrap.min.css";
    // document.head.appendChild(link);

    // const scriptAlpineMin = document.createElement("script");
    // scriptAlpineMin.src = "https://cdn.tailwindcss.com";
    // const scriptAlpineMin = document.createElement("script");
    // scriptAlpineMin.src =
    //     "https://cdn.jsdelivr.net/npm/@alpinejs/collapse@3.x.x/dist/cdn.min.js";
    // const scriptAlpineCore = document.createElement("script");
    // scriptAlpineCore.src =
    //     "https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js";

    // document.body.appendChild(scriptAlpineMin);
    // document.body.appendChild(scriptAlpineCore);
    // element.innerHTML = `
    //     <div class="subscribe-now-panel">
    //         <div class="subscribe-now-panel__inner-wrapper">
    //             <a href="#" class="subscribe-now-panel__anchor-wrapper">
    //                 <div class="subscribe-now-panel__anchor-inner">
    //                     <div class="subscribe-now-panel__column-left">
    //                         <div class="subscribe-now-panel__image-container">
    //                             <img src="assets/images/icon-tick.png" style="height: auto; max-width:100%;" />
    //                         </div>
    //                     </div>

    //                     <div class="subscribe-now-panel__column-right">
    //                         <h3 class="h3 condensed">Experience the best!</h3>
    //                         <div class="subscribe-now-panel__visual-link">
    //                             <span>Subscribe now</span>
    //                             <img style="height: 28px" />
    //                         </div>
    //                     </div>
    //                 </div>
    //             </a>
    //         </div>

    //         <div class="subscribe-now-panel__tcs m-1-top">
    //             <a href="#prize-tiles-tcs-1-2" style="display: none" data-lity>T&Cs Apply</a>
    //         </div>
    //     </div>

    //     <div class="subscribe-now-panel">
    //         <div class="subscribe-now-panel__inner-wrapper">
    //             <a href="#" class="subscribe-now-panel__anchor-wrapper">
    //                 <div class="subscribe-now-panel__anchor-inner">
    //                     <div class="subscribe-now-panel__column-left">
    //                         <div class="subscribe-now-panel__image-container">
    //                         <img src="assets/images/icon-tick.png" style="height: auto; max-width:100%;" />
    //                         </div>
    //                     </div>

    //                     <div class="subscribe-now-panel__column-right">
    //                         <h3 class="h3 condensed">Experience the best!</h3>
    //                         <div class="subscribe-now-panel__visual-link">
    //                             <span>Subscribe now</span>
    //                             <img style="height: 28px" />
    //                         </div>
    //                     </div>
    //                 </div>
    //             </a>
    //         </div>

    //         <div class="subscribe-now-panel__tcs m-1-top">
    //             <a href="#prize-tiles-tcs-1-2" style="display: none" data-lity>T&Cs Apply</a>
    //         </div>
    //     </div>
    //     <div class="container">
    //         <div class="row">
    //             <div class="col-12 col-sm2-6">
    //                 <div class="subscribe-now-panel">
    //                     <div class="subscribe-now-panel__inner-wrapper">
    //                         <a href="#" class="subscribe-now-panel__anchor-wrapper">
    //                             <div class="subscribe-now-panel__anchor-inner">
    //                                 <div class="subscribe-now-panel__column-left">
    //                                     <div class="subscribe-now-panel__image-container">
    //                                         <img src="assets/images/icon-tick.png" style="height: auto; max-width:100%;" />
    //                                     </div>
    //                                 </div>

    //                                 <div class="subscribe-now-panel__column-right">
    //                                     <h3 class="h3 condensed">Experience the best!</h3>
    //                                     <div class="subscribe-now-panel__visual-link">
    //                                         <span>Subscribe now</span>
    //                                         <img style="height: 28px" />
    //                                     </div>
    //                                 </div>
    //                             </div>
    //                         </a>
    //                     </div>

    //                     <div class="subscribe-now-panel__tcs m-1-top">
    //                         <a href="#prize-tiles-tcs-1-2" style="display: none" data-lity>T&Cs Apply</a>
    //                     </div>
    //                 </div>
    //             </div>
    //         </div>
    //         <div class="row">
    //             <div class="col-12 col-sm2-6">
    //                 <div class="subscribe-now-panel">
    //                 <div class="subscribe-now-panel__inner-wrapper">
    //                     <a href="#" class="subscribe-now-panel__anchor-wrapper">
    //                         <div class="subscribe-now-panel__anchor-inner">
    //                             <div class="subscribe-now-panel__column-left">
    //                                 <div class="subscribe-now-panel__image-container">
    //                                 <img src="assets/images/icon-tick.png" style="height: auto; max-width:100%;" />
    //                                 </div>
    //                             </div>

    //                             <div class="subscribe-now-panel__column-right">
    //                                 <h3 class="h3 condensed">Experience the best!</h3>
    //                                 <div class="subscribe-now-panel__visual-link">
    //                                     <span>Subscribe now</span>
    //                                     <img style="height: 28px" />
    //                                 </div>
    //                             </div>
    //                         </div>
    //                     </a>
    //                 </div>

    //                 <div class="subscribe-now-panel__tcs m-1-top">
    //                     <a href="#prize-tiles-tcs-1-2" style="display: none" data-lity>T&Cs Apply</a>
    //                 </div>
    //                 </div>
    //             </div>
    //         </div>
    //     </div>
    // `;

    // element.innerHTML = `
    // <div class="container">
    //     <div class="row">
    //         <div class="col-12">
    //             <div class="table-wrapper connected">
    //                 <table class="rsllott vertical-table col-1-small d-none d-md-table">
    //                 <tr>
    //                     <th>Prize value</th>
    //                     <th>Sales ref num.</th>
    //                     <th>Location</th>
    //                 </tr>
    //                 <tr>
    //                     <td>$1,000</td>
    //                     <td>100000000</td>
    //                     <td>Kergunyah, Vic</td>
    //                 </tr>
    //                 <tr>
    //                     <td>$2,000</td>
    //                     <td>200000000</td>
    //                     <td>Taigum, Qld</td>
    //                 </tr>
    //                 <tr>
    //                     <td>$3,000</td>
    //                     <td>300000000</td>
    //                     <td>Anderson, Tas</td>
    //                 </tr>
    //                 <tr>
    //                     <td>$4,000</td>
    //                     <td>400000000</td>
    //                     <td>Coopers, NT</td>
    //                 </tr>
    //                 </table>
    //             </div>
    //         </div>

    //         <div class="col-12">
    //             <div class="table-wrapper connected">
    //                 <table class="rsllott vertical-table col-1-medium alt-rows d-none d-md-table">
    //                 <tr>
    //                     <th>Prize</th>
    //                     <th>Sales</th>
    //                     <th>Location</th>
    //                 </tr>
    //                 <tr>
    //                     <td>$1,000</td>
    //                     <td>100000000</td>
    //                     <td>Kergunyah, Vic</td>
    //                 </tr>
    //                 <tr>
    //                     <td>$2,000</td>
    //                     <td>200000000</td>
    //                     <td>Taigum, Qld</td>
    //                 </tr>

    //                 </table>
    //             </div>
    //         </div>

    //         <div class="col-12">
    //             <div class="table-wrapper">
    //                 <table class="rsllott theme--blue alt-rows vertical-table col-1-large d-none d-md-table">
    //                 <tr>
    //                     <th>Prize 3</th>
    //                     <th>Sales</th>
    //                     <th>Location</th>
    //                 </tr>
    //                 <tr>
    //                     <td>$1,000</td>
    //                     <td>100000000</td>
    //                     <td>Kergunyah, Vic</td>
    //                 </tr>
    //                 <tr>
    //                     <td>$2,000</td>
    //                     <td>200000000</td>
    //                     <td>Taigum, Qld</td>
    //                 </tr>
    //                 <tr>
    //                     <td>$1,000</td>
    //                     <td>100000000</td>
    //                     <td>Kergunyah, Vic</td>
    //                 </tr>
    //                 <tr>
    //                     <td>$2,000</td>
    //                     <td>200000000</td>
    //                     <td>Taigum, Qld</td>
    //                 </tr>
    //                 <tr>
    //                     <td>$1,000</td>
    //                     <td>100000000</td>
    //                     <td>Kergunyah, Vic</td>
    //                 </tr>
    //                 <tr>
    //                     <td>$2,000</td>
    //                     <td>200000000</td>
    //                     <td>Taigum, Qld</td>
    //                 </tr>

    //                 </table>
    //             </div>
    //         </div>

    //         <div class="col-12">
    //             <div class="table-wrapper">
    //                 <table class="rsllott vertical-table col-1-medium alt-rows d-none d-md-table">

    //                 <tr>
    //                     <th>Prize</th>
    //                        <th>Sales</th>
    //                     <th>Location</th>
    //                 </tr>
    //                 <tr>
    //                     <td>$1,000</td>
    //                     <td>100000000</td>
    //                     <td>Kergunyah, Vic</td>
    //                 </tr>
    //                 <tr>
    //                     <td>$2,000</td>
    //                     <td>200000000</td>
    //                     <td>Taigum, Qld</td>
    //                 </tr>

    //                 </table>
    //             </div>
    //         </div>

    //     </div>
    // </div>`;

    /*
    element.innerHTML = `
        <div x-data="{selected:null}">
        
            <button @click="selected !== 0 ? selected = 0 : selected = null""  type="button" aria-expanded="false" aria-label="Toggle navigation">
                test
                <div class="nav-icon"><div></div></div>
            </button>
 
            <ul 
                class="ease-in" 
                
                
            >
                <li>
                    
                        <button @click="selected !== 1 ? selected = 1 : selected = null">Prizes</button>
                    
                        <ul x-show="item_1" x-collapse>
                            <li><a href="#">Prizes 1</a></li>
                            <li><a href="#">Prizes 2</a></li>
                            <li><a href="#">Prizes 3</a></li>
                            <li><a href="#">Prizes 4</a></li>
                        </ul>
                    </div>
                </li>

                <li>
                    
                        <button @click="selected !== 1 ? selected = 1 : selected = null">VIP Club</button>
                    
                        <ul x-show="item_2" x-collapse>
                            <li><a href="#">Prizes 1</a></li>
                            <li><a href="#">Prizes 2</a></li>
                            <li><a href="#">Prizes 3</a></li>
                            <li><a href="#">Prizes 4</a></li>
                        </ul>
                    
                </li>

                <li>
                    <div x-data="{ item_3: false }">
                        <button @click="item_3 = ! item_3">Winners</button>
                    
                        <ul x-show="item_3" x-collapse>
                            <li><a href="#">Prizes 1</a></li>
                            <li><a href="#">Prizes 2</a></li>
                            <li><a href="#">Prizes 3</a></li>
                            <li><a href="#">Prizes 4</a></li>
                        </ul>
                    </div>
                </li>

                <li>
                    <div x-data="{ item_4: false }">
                        <button @click="item_4 = ! item_4">About us</button>
                    
                        <ul x-show="item_4" x-collapse>
                            <li><a href="#">Prizes 1</a></li>
                            <li><a href="#">Prizes 2</a></li>
                            <li><a href="#">Prizes 3</a></li>
                            <li><a href="#">Prizes 4</a></li>
                        </ul>
                    </div>
                </li>

                <li>
                    <div x-data="{ item_5: false }">
                        <button @click="item_5 = ! item_5">My account</button>
                    
                        <ul x-show="item_5" x-collapse>
                            <li><a href="#">Prizes 1</a></li>
                            <li><a href="#">Prizes 2</a></li>
                            <li><a href="#">Prizes 3</a></li>
                            <li><a href="#">Prizes 4</a></li>
                        </ul>
                    </div>
                </li>

            </ul>
    
        </div>
    `;

    element.innerHTML = `
    
    <nav x-data="{open: false, toggle(){this.open = !this.open;}}">

  <div 
    id="nav-box" 
    class="grid justify-items-end items-center
  >

    <!-- bars btn -->
    <div 
      id="bars-btn"
      class="cursor-pointer md:hidden" 
      @click="toggle"
      
    >
      <img src="https://raw.githubusercontent.com/andrew-zachary/responsive-nav-menu/c444f2550548cee7d408ea1b8be32af34202bd16/public/bars.svg" alt="">
    </div>
    <!-- bars btn -->

    <!-- logo -->
    <div 
      id="logo" 
      class="md:col-start-1 md:col-end-2"
    >
      <img class="w-full max-w-[30rem]" src="/logo.svg" alt="">
    </div>
    <!-- logo -->

    <!-- links-list -->
    <div 
      id="list-links" 
      class="w-full 
      row-start-2 row-end-3 col-start-1 col-end-4
      md:row-start-1 md:row-end-2 md:col-start-2 md:col-end-3"
    >
         <ul 
            class="md:px-4
            text-4xl text-center font-regular capitalize
            md:!flex md:justify-between md:!h-full"
            x-show="open" x-collapse 
            x-transition:enter="transition ease-out duration-300"
            x-transition:enter-start="opacity-0 scale-90"
            x-transition:enter-end="opacity-100 scale-100"
            x-transition:leave="transition ease-in duration-300"
            x-transition:leave-start="opacity-100 scale-100"
            x-transition:leave-end="opacity-0 scale-90"
        >
            <div x-data="{selected:null}">
                <li class="py-6 md:py-0">
                    <button @click="selected !== 0 ? selected = 0 : selected = null">test</button>     

                    <div x-show="selected == 0" x-collapse>
                        <div class="border py-4 px-2">
                            This is made with Alpine JS and Tailwind CSS
                        </div>
                    </div>
                </li>

                <li class="py-6 md:py-0">
                    <button @click="selected !== 1 ? selected = 1 : selected = null">test</button>     

                    <div x-show="selected == 1" x-collapse>
                        <div class="border py-4 px-2">
                            This is made with Alpine JS and Tailwind CSS
                        </div>
                    </div>
                </li>
        <li class="py-6 md:py-0">
          <a href="#" class="hover:font-bold">about us</a>
        </li>
        <li class="py-6 md:py-0">
          <a href="#" class="hover:font-bold">contacts</a>
        </li>
        </div>
      </ul>
    </div>
    <!-- links-list -->

    <!-- search btn -->
    <div 
      id="search-btn" 
      class="cursor-pointer"
    >
      <img src="/search.svg" alt="">
    </div>
    <!-- search btn -->

  </div>

</nav>
    `;
    

    element.innerHTML = `
    <div class="grid justify-items-end items-center">
    <nav x-data="{sidebarOpen: false}" class=" ">

  <div 
    id="nav-box" 
    class="grid justify-items-end items-center
  >

    <!-- bars btn -->
    <div 
      id="bars-btn"
      class="cursor-pointer md:hidden" 
      @click="sidebarOpen = !sidebarOpen"
      
    >
      <img src="https://raw.githubusercontent.com/andrew-zachary/responsive-nav-menu/c444f2550548cee7d408ea1b8be32af34202bd16/public/bars.svg" alt="">
    </div>
    <!-- bars btn -->

    <!-- logo -->
    <div 
      id="logo" 
      class="md:col-start-1 md:col-end-2"
    >
      <img class="w-full max-w-[30rem]" src="/logo.svg" alt="">
    </div>
    <!-- logo -->

    
    <!-- links-list -->
    <div 
      id="list-links" 
      class="w-full 
      row-start-2 row-end-3 col-start-1 col-end-4
      md:row-start-1 md:row-end-2 md:col-start-2 md:col-end-3"
    >
         <ul 
         class="absolute flex-shrink-0 w-64 flex flex-col border-r transition-all duration-300 overflow-hidden" 
         :class="{ 'translate-x-0': sidebarOpen === true,  '-translate-x-full': sidebarOpen === false }"
         x-cloak
         x-data={slideout()}"
         x-init="init()"
        >
            <div x-data="{selected:null}">
                <li class="py-6 md:py-0">
                    <button @click="selected !== 0 ? selected = 0 : selected = null">test</button>     

                    <div x-show="selected == 0" x-collapse>
                        <div class="border py-4 px-2">
                            This is made with Alpine JS and Tailwind CSS
                        </div>
                    </div>
                </li>

                <li class="py-6 md:py-0">
                    <button @click="selected !== 1 ? selected = 1 : selected = null">test</button>     

                    <div x-show="selected == 1" x-collapse>
                        <div class="border py-4 px-2">
                            This is made with Alpine JS and Tailwind CSS
                        </div>
                    </div>
                </li>
        <li class="py-6 md:py-0">
          <a href="#" class="hover:font-bold">about us</a>
        </li>
        <li class="py-6 md:py-0">
          <a href="#" class="hover:font-bold">contacts</a>
        </li>
        </div>
      </ul>
    </div>
    <!-- links-list -->

    <!-- search btn -->
    <div 
      id="search-btn" 
      class="cursor-pointer"
    >
      <img src="/search.svg" alt="">
    </div>
    <!-- search btn -->

  </div>
  
  </nav>
  </div>
    `;

    */

    element.innerHTML = `
        <div class="navigation">
            <div class="navigation__wrapper">
                
                <header class="navigation__header">
                    <div class="container-custom">
                        <div class="navigation__header-inner">
                            <div>
                                <div class="navigation__desktop-menu-wrapper">
                                    <!--<div class="navigation__desktop-menu-inner-wrapper">
                                        <div>-->
                                            <ul class="navigation__layer-1">
                                                <li x-data="{ open: false }"  x-on:keydown.escape.prevent.stop="close($refs.button)" class="relative">
                                                    <!-- Button -->
                                                    <button
                                                        x-ref="button"
                                                        @click="open = !open"
                                                        :aria-expanded="open ? 'true' : 'false'"
                                                        :aria-controls="$id('dropdown-button')"
                                                        type="button"
                                                        class="navigation__primary-btn navigation__active"
                                                        :class="open && ' open'"
                                                    >
                                                        Prizes

                                                        <!-- Heroicon: chevron-down -->
                                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                                                            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                                        </svg>
                                                    </button>

                                                    <!-- Panel -->
                                                    <div
                                                        x-show="open"
                                                        @click.away="open = false"
                                                        :id="$id('dropdown-button')"
                                                        style="display: none;"
                                                        class="absolute origin-top bg-white shadow-md navigation__desktop-menu-dropdown"
                                                        x-transition:enter="transition ease-out duration-300"
                                                        x-transition:enter-start="opacity-0 transform scale-y-0"
                                                        x-transition:enter-end="opacity-100 transform scale-y-100"
                                                        x-transition:leave="transition ease-in duration-300"
                                                        x-transition:leave-end="opacity-0 transform scale-y-0"
                                                    >
                                                        <a href="#" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            Explore prizes
                                                        </a>

                                                        <a href="#" class="navigation__active flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            2023 Lineup
                                                        </a>

                                                        <a href="#" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            <span class="text-red-600">Delete Task 0</span>
                                                        </a>
                                                        <a href="#" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            New Task 0
                                                        </a>

                                                        <a href="#" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            Edit Task 0
                                                        </a>

                                                        <a href="#" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            <span class="text-red-600">Delete Task 0</span>
                                                        </a>
                                                        <a href="#" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            New Task 0
                                                        </a>

                                                        <a href="#" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            Edit Task 0
                                                        </a>

                                                        <a href="#" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            <span class="text-red-600">Delete Task 0</span>
                                                        </a>
                                                    </div>                            
                                                </li>

                                                <li  x-data="{ open: false }" class="relative">
                                                    <!-- Button -->
                                                    <button
                                                        @click="open = !open"
                                                        :aria-expanded="open ? 'true' : 'false'"
                                                        :aria-controls="$id('dropdown-button')"
                                                        type="button"
                                                        class="navigation__primary-btn"
                                                        :class="open && ' open'"
                                                    >
                                                        VIP Club

                                                        <!-- Heroicon: chevron-down -->
                                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                                                            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                                        </svg>
                                                    </button>

                                                    <!-- Panel -->
                                                    <div
                                                        x-show="open"
                                                        @click.away="open = false"
                                                        :id="$id('dropdown-button')"
                                                        style="display: none;"
                                                        class="absolute origin-top bg-white shadow-md navigation__desktop-menu-dropdown"
                                                        x-transition:enter="transition ease-out duration-300"
                                                        x-transition:enter-start="opacity-0 transform scale-y-0"
                                                        x-transition:enter-end="opacity-100 transform scale-y-100"
                                                        x-transition:leave="transition ease-in duration-300"
                                                        x-transition:leave-end="opacity-0 transform scale-y-0"
                                                    >
                                                        <a href="#" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            New Task 1
                                                        </a>

                                                        <a href="#" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            Edit Task 1
                                                        </a>

                                                        <a href="#" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            <span class="text-red-600">Delete Task 1</span>
                                                        </a>
                                                    </div>
                                                </li>

                                                <li  x-data="{ open: false }" class="relative">
                                                    <!-- Button -->
                                                    <button
                                                        @click="open = !open"
                                                        :aria-expanded="open ? 'true' : 'false'"
                                                        :aria-controls="$id('dropdown-button')"
                                                        type="button"
                                                        class="navigation__primary-btn"
                                                        :class="open && ' open'"
                                                    >
                                                        Winners

                                                        <!-- Heroicon: chevron-down -->
                                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                                                            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                                        </svg>
                                                    </button>

                                                    <!-- Panel -->
                                                    <div
                                                        x-show="open"
                                                        @click.away="open = false"
                                                        :id="$id('dropdown-button')"
                                                        style="display: none;"
                                                        class="absolute origin-top bg-white shadow-md navigation__desktop-menu-dropdown"
                                                        x-transition:enter="transition ease-out duration-300"
                                                        x-transition:enter-start="opacity-0 transform scale-y-0"
                                                        x-transition:enter-end="opacity-100 transform scale-y-100"
                                                        x-transition:leave="transition ease-in duration-300"
                                                        x-transition:leave-end="opacity-0 transform scale-y-0"
                                                    >
                                                        <a href="#" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            New Task 1
                                                        </a>

                                                        <a href="#" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            Edit Task 1
                                                        </a>

                                                        <a href="#" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            <span class="text-red-600">Delete Task 1</span>
                                                        </a>
                                                    </div>
                                                </li>

                                                <li  x-data="{ open: false }" class="relative">
                                                    <!-- Button -->
                                                    <button
                                                        @click="open = !open"
                                                        :aria-expanded="open ? 'true' : 'false'"
                                                        :aria-controls="$id('dropdown-button')"
                                                        type="button"
                                                        class="navigation__primary-btn"
                                                        :class="open && ' open'"
                                                    >
                                                        About us

                                                        <!-- Heroicon: chevron-down -->
                                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                                                            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                                        </svg>
                                                    </button>

                                                    <!-- Panel -->
                                                    <div
                                                        x-show="open"
                                                        @click.away="open = false"
                                                        :id="$id('dropdown-button')"
                                                        style="display: none;"
                                                        class="absolute origin-top bg-white shadow-md navigation__desktop-menu-dropdown"
                                                        x-transition:enter="transition ease-out duration-300"
                                                        x-transition:enter-start="opacity-0 transform scale-y-0"
                                                        x-transition:enter-end="opacity-100 transform scale-y-100"
                                                        x-transition:leave="transition ease-in duration-300"
                                                        x-transition:leave-end="opacity-0 transform scale-y-0"
                                                    >
                                                        <a href="#" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            New Task 1
                                                        </a>

                                                        <a href="#" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            Edit Task 1
                                                        </a>

                                                        <a href="#" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            <span class="text-red-600">Delete Task 1</span>
                                                        </a>
                                                    </div>
                                                </li>
                                            </ul>

                                                
                                            <ul class="navigation__login-cart-wrapper">
                                                <li  x-data="{ open: false }" class="navigation__login relative">
                                                    <!-- Button -->
                                                    <button
                                                        @click="$dispatch('open-menu', { open: false }), open = !open"
                                                        :aria-expanded="open ? 'true' : 'false'"
                                                        :aria-controls="$id('dropdown-button')"
                                                        type="button"
                                                        class="navigation__primary-btn"
                                                        :class="open && ' open'"
                                                    >
                                                        <div>
                                                            <img src="./assets/images/navigation-login-avatar-circle.svg" alt="RSL Union Login Avatar" />
                                                            Login
                                                        </div>
                                                    </button>

                                                    <!-- Panel -->
                                                    <div
                                                        x-show="open"
                                                        @click.away="open = false"
                                                        :id="$id('dropdown-button')"
                                                        style="display: none;"
                                                        class="absolute origin-top-right bg-white shadow-md navigation__desktop-menu-dropdown"
                                                        x-transition:enter="transition ease-out duration-300"
                                                        x-transition:enter-start="opacity-0 transform scale-y-0"
                                                        x-transition:enter-end="opacity-100 transform scale-y-100"
                                                        x-transition:leave="transition ease-in duration-300"
                                                        x-transition:leave-end="opacity-0 transform scale-y-0"
                                                    >
                                                        <a href="#" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            New Task 1
                                                        </a>

                                                        <a href="#" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            Edit Task 1
                                                        </a>

                                                        <a href="#" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            <span class="text-red-600">Delete Task 1</span>
                                                        </a>
                                                    </div>
                                                </li>

                                                <li  x-data="{ open: false }" class="navigation__login status--logged-in relative">
                                                    <!-- Button -->
                                                    <button
                                                        @click="$dispatch('open-menu', { open: false }), open = !open"
                                                        :aria-expanded="open ? 'true' : 'false'"
                                                        :aria-controls="$id('dropdown-button')"
                                                        type="button"
                                                        class="navigation__primary-btn"
                                                        :class="open && ' open'"
                                                    >
                                                        <div>
                                                            <img src="./assets/images/navigation-login-avatar-circle.svg" alt="RSL Union Login Avatar" />
                                                            Frank Drebbin
                                                        </div>
                                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                                                            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                                        </svg>
                                                    </button>

                                                    <!-- Panel -->
                                                    <div
                                                        x-show="open"
                                                        @click.away="open = false"
                                                        :id="$id('dropdown-button')"
                                                        style="display: none;"
                                                        class="absolute origin-top-right bg-white shadow-md navigation__desktop-menu-dropdown"
                                                        x-transition:enter="transition ease-out duration-300"
                                                        x-transition:enter-start="opacity-0 transform scale-y-0"
                                                        x-transition:enter-end="opacity-100 transform scale-y-100"
                                                        x-transition:leave="transition ease-in duration-300"
                                                        x-transition:leave-end="opacity-0 transform scale-y-0"
                                                    >
                                                        <a href="#" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            New Task 1
                                                        </a>

                                                        <a href="#" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            Edit Task 1
                                                        </a>

                                                        <a href="#" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            <span class="text-red-600">Delete Task 1</span>
                                                        </a>
                                                    </div>
                                                </li>
                                            
                                                <li  x-data="{ open: false }" class="navigation__cart relative">
                                                    <!-- Button -->
                                                    <button
                                                        @click="$dispatch('open-menu', { open: true }), open = !open"
                                                        :aria-expanded="open ? 'true' : 'false'"
                                                        :aria-controls="$id('dropdown-button')"
                                                        type="button"
                                                        class="navigation__primary-btn"
                                                        :class="open && ' open'"
                                                    >
                                                        <img src="./assets/images/navigation-shopping-cart.svg" alt="RSL Union Login Avatar" />
                                                    </button>

                                                    <!-- Panel -->
                                                    <div
                                                        x-show="open"
                                                        @click.away="open = false"
                                                        :id="$id('dropdown-button')"
                                                        style="display: none;"
                                                        class="absolute origin-top-right bg-white shadow-md navigation__desktop-menu-dropdown"
                                                        x-transition:enter="transition ease-out duration-300"
                                                        x-transition:enter-start="opacity-0 transform scale-y-0"
                                                        x-transition:enter-end="opacity-100 transform scale-y-100"
                                                        x-transition:leave="transition ease-in duration-300"
                                                        x-transition:leave-end="opacity-0 transform scale-y-0"
                                                    >
                                                        <a href="#" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            New Task 1
                                                        </a>

                                                        <a href="#" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            Edit Task 1
                                                        </a>

                                                        <a href="#" class="flex items-center gap-2 w-full first-of-type:rounded-t-md last-of-type:rounded-b-md px-4 py-2.5 text-left text-sm hover:bg-gray-50 disabled:text-gray-500">
                                                            <span class="text-red-600">Delete Task 1</span>
                                                        </a>
                                                    </div>
                                                </li>
                                            </ul>
                                        <!--</div>
                                    </div>-->
                                    <button
                                    x-data="{usedKeyboard: false}"
                                    @keydown.window.tab="usedKeyboard = true"
                                    @click="$dispatch('open-menu', { open: true })"
                                    :class="{'focus:outline-none': !usedKeyboard}"
                                    class="navigation__hamburger"
                                    >
                                    <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="#000" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="feather feather-menu stroke-current"><line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line></svg>
                                    </button>
                                </div>
                            </div>

                            <div class="navigation__logo">
                                <img src="./assets/images/rsl-art-union-logo.svg" alt="RSL Art Uninion Winners">
                            </div>                        
                        </div>
                    </div>
                </header>
            </div>
        </div>

        <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-10 p-16">
            <button
                x-data="{usedKeyboard: false}"
                @keydown.window.tab="usedKeyboard = true"
                role=button
                @click="$dispatch('open-menu', { open: true })"
                :class="{'focus:outline-none': !usedKeyboard}"
                class="bg-indigo-500 hover:bg-indigo-400 h-64 text-white font-extrabold text-4xl flex items-center justify-center uppercase">
                Open Menu
            </button>
        </div>
    

        <section
            x-data="slideout()"
            @open-menu.window="open = $event.detail.open"
            x-cloak
            @keydown.window.tab="usedKeyboard = true"
            @keydown.escape="open = false"
            x-init="init()"
        >
            <div
                x-show.transition.opacity.duration.500="open"
                @click="open = false"
                class="navigation__mobile-underlay"
            >
            </div>
            
            <div
                class="navigation__mobile-menu-wrapper"
                :class="{'translate-x-full': !open}">
                
                <div class=" w-full absolute top-0 h-full overflow-y-auto">
                    
                    <ul 
                        x-data="navToggle()" 
                        x-cloak
                        @selected.window="selected = $event.detail.selected"
                        x-init="init()"
                        class="navigation__mobile-ul"
                    >
                        <li class="navigation__mobile-close-li">
                            <button
                                @click="open = false, $dispatch('selected', { selected: null })"
                                x-ref="closeButton"
                                :class="{'focus:outline-none': !usedKeyboard}"
                                class="navigation__mobile-close-button">
                                <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="#000" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="feather feather-x"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
                            </button>
                        </li>

                        <li>
                            <!--<button @click="$dispatch('selected', { selected: 1 })">test</button>-->
                            <button @click="selected !== 0 ? selected = 0 : selected = null">test  0</button>

                            <div x-show="selected == 0" x-collapse>
                                <ul>
                                    <li>
                                        <a href="#">
                                            test - 0 - 0
                                        </a>
                                    </li>
                                    <li>
                                        <a href="#">
                                            test - 0 - 1
                                        </a>
                                    </li>
                                    <li>
                                        <a href="#">
                                            test - 0 - 2
                                        </a>
                                    </li>
                                </ul>
                            </div>
                        </li>

                        <li>
                            <button @click="selected !== 1 ? selected = 1 : selected = null">test 1</button>     

                            <div x-show="selected == 1" x-collapse>
                                <ul>
                                    <li>
                                        <a href="#">
                                            test - 1 - 0
                                        </a>
                                    </li>
                                    <li>
                                        <a href="#">
                                            test - 1 - 1
                                        </a>
                                    </li>
                                    <li>
                                        <a href="#">
                                            test - 1 - 2
                                        </a>
                                    </li>
                                </ul>
                            </div>
                        </li>

                        
                    </ul>


                </div>
            </section>
        `;

    // element.innerHTML = `<button onClick="window.alertTest()">alert me</button><br /><button onClick="slideout.slideout()">alert me</button>`;

    // SubscribeNowPanel();
    // test();
    (0,_table_duplication_reformat__WEBPACK_IMPORTED_MODULE_7__["default"])();
    // navMobile();

    return element;
}

document.body.appendChild(component());

})();

/******/ })()
;
//# sourceMappingURL=index.bundle.js.map